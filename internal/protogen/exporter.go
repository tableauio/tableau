package protogen

import (
	"path/filepath"
	"regexp"
	"strings"

	"github.com/emirpasic/gods/sets/treeset"
	"github.com/rogpeppe/go-internal/lockedfile"
	"github.com/tableauio/tableau/internal/printer"
	"github.com/tableauio/tableau/internal/strcase"
	"github.com/tableauio/tableau/internal/types"
	"github.com/tableauio/tableau/internal/x/xfs"
	"github.com/tableauio/tableau/internal/x/xproto"
	"github.com/tableauio/tableau/log"
	"github.com/tableauio/tableau/proto/tableaupb"
	"github.com/tableauio/tableau/proto/tableaupb/internalpb"
	"github.com/tableauio/tableau/xerrors"
	"google.golang.org/protobuf/encoding/prototext"
	"google.golang.org/protobuf/reflect/protoreflect"
)

type bookExporter struct {
	ProtoPackage     string
	ProtoFileOptions map[string]string
	OutputDir        string
	FilenameSuffix   string
	wb               *internalpb.Workbook

	gen *Generator

	messagerPatternRegexp *regexp.Regexp
}

func newBookExporter(protoPackage string, protoFileOptions map[string]string, outputDir, filenameSuffix string, wb *internalpb.Workbook, gen *Generator) *bookExporter {
	return &bookExporter{
		ProtoPackage:          protoPackage,
		ProtoFileOptions:      protoFileOptions,
		OutputDir:             outputDir,
		FilenameSuffix:        filenameSuffix,
		wb:                    wb,
		gen:                   gen,
		messagerPatternRegexp: regexp.MustCompile(gen.InputOpt.MessagerPattern),
	}
}

func (x *bookExporter) GetProtoFilePath() string {
	return genProtoFilePath(x.wb.Name, x.FilenameSuffix)
}

func (x *bookExporter) export(checkProtoFileConflicts bool) error {
	// log.Debug(proto.MarshalTextString(wb))
	g1 := NewGeneratedBuf()
	g1.P("// Code generated by tableau (protogen v", Version, "). DO NOT EDIT.")
	g1.P("// clang-format off")
	g1.P("")
	g1.P(`syntax = "proto3";`)
	g1.P("")
	g1.P("package ", x.ProtoPackage, ";")
	g1.P("")

	// keep the elements ordered by import path
	set := treeset.NewWithStringComparator()
	set.Add(tableauProtoPath) // default must be imported path
	g3 := NewGeneratedBuf()
	for i, ws := range x.wb.Worksheets {
		se := &sheetExporter{
			be:             x,
			ws:             ws,
			g:              g3,
			isLastSheet:    i == len(x.wb.Worksheets)-1,
			typeInfos:      x.gen.typeInfos,
			nestedMessages: make(map[string]*internalpb.Field),
			Imports:        make(map[string]bool),
		}
		if err := se.export(); err != nil {
			return err
		}
		for key := range se.Imports {
			set.Add(key)
		}
	}

	// generate imports
	g2 := NewGeneratedBuf()
	for _, key := range set.Values() {
		g2.P(`import "`, key, `";`)
	}
	g2.P("")
	for k, v := range x.ProtoFileOptions {
		g2.P(`option `, k, ` = "`, v, `";`)
	}
	g2.P("option (tableau.workbook) = {", marshalToText(x.wb.Options), "};")
	g2.P("")

	relPath := x.GetProtoFilePath()
	path := filepath.Join(x.OutputDir, relPath)
	log.Infof("%15s: %s", "generated proto", relPath)

	// mu := lockedfile.MutexAt(path)
	// unlock, err := mu.Lock()
	// if err != nil {
	// 	return xerrors.Wrapf(err, "failed to lock file: %s", path)
	// }
	// defer unlock()

	// NOTE: use file lock to protect .proto file from being writen by multiple goroutines
	// refer: https://github.com/golang/go/issues/33974
	// refer: https://go.googlesource.com/proposal/+/master/design/33974-add-public-lockedfile-pkg.md

	if checkProtoFileConflicts {
		if existed, err := xfs.Exists(path); err != nil {
			return xerrors.WrapKV(err)
		} else {
			if existed {
				return xerrors.Errorf("file already exists: %s", path)
			}
		}
	}

	if f, err := lockedfile.Create(path); err != nil {
		return xerrors.WrapKV(err)
	} else {
		defer func() {
			err := f.Close()
			if err != nil {
				log.Panicf("failed to close file: %s", path)
			}
		}()
		if _, err = f.Write(g1.Content()); err != nil {
			return xerrors.WrapKV(err)
		}
		if _, err = f.Write(g2.Content()); err != nil {
			return xerrors.WrapKV(err)
		}
		if _, err = f.Write(g3.Content()); err != nil {
			return xerrors.WrapKV(err)
		}
	}

	return nil
}

type sheetExporter struct {
	be          *bookExporter
	ws          *internalpb.Worksheet
	g           *GeneratedBuf
	isLastSheet bool
	typeInfos   *xproto.TypeInfos

	Imports        map[string]bool              // import name -> defined
	nestedMessages map[string]*internalpb.Field // top message scoped type name -> field
}

func (x *sheetExporter) export() error {
	mode := x.ws.GetOptions().GetMode()
	switch x.ws.Options.Mode {
	case tableaupb.Mode_MODE_DEFAULT:
		return x.exportMessager()
	case tableaupb.Mode_MODE_ENUM_TYPE, tableaupb.Mode_MODE_ENUM_TYPE_MULTI:
		return x.exportEnum()
	case tableaupb.Mode_MODE_STRUCT_TYPE, tableaupb.Mode_MODE_STRUCT_TYPE_MULTI:
		return x.exportStruct()
	case tableaupb.Mode_MODE_UNION_TYPE, tableaupb.Mode_MODE_UNION_TYPE_MULTI:
		return x.exportUnion()
	default:
		return xerrors.Errorf("unknown mode: %v", mode)
	}
}

func (x *sheetExporter) exportEnum() error {
	if x.ws.Note != "" {
		x.g.P("// ", x.ws.Note)
	}
	x.g.P("enum ", x.ws.Name, " {")
	opts := &tableaupb.EnumOptions{Name: x.ws.GetOptions().GetName(), Note: x.ws.Note}
	x.g.P("  option (tableau.etype) = {", marshalToText(opts), "};")
	x.g.P("")
	// generate the enum value fields
	for i, field := range x.ws.Fields {
		if i == 0 && field.Number != 0 {
			ename := strcase.FromContext(x.be.gen.ctx).ToScreamingSnake(x.ws.Name) + "_INVALID"
			x.g.P("  ", ename, " = 0;")
		}
		note := ""
		if field.Alias != "" {
			note = " // " + field.Alias
		}
		x.g.P("  ", strings.TrimSpace(field.Name), " = ", field.Number, ` [(tableau.evalue).name = "`, strings.TrimSpace(field.Alias), `"];`, note)
	}
	x.g.P("}")
	if !x.isLastSheet {
		x.g.P("")
	}
	return nil
}

func (x *sheetExporter) exportStruct() error {
	x.g.P("message ", x.ws.Name, " {")
	opts := &tableaupb.StructOptions{Name: x.ws.GetOptions().GetName(), Note: x.ws.Note}
	x.g.P("  option (tableau.struct) = {", marshalToText(opts), "};")
	x.g.P("")
	// generate the fields
	depth := 1
	for i, field := range x.ws.Fields {
		tagid := i + 1
		if err := x.exportField(depth, tagid, field, x.ws.Name); err != nil {
			return err
		}
	}
	x.g.P("}")
	if !x.isLastSheet {
		x.g.P("")
	}
	return nil
}

func (x *sheetExporter) exportUnion() error {
	x.g.P("message ", x.ws.Name, " {")
	opts := &tableaupb.UnionOptions{Name: x.ws.GetOptions().GetName(), Note: x.ws.Note}
	x.g.P("  option (tableau.union) = {", marshalToText(opts), "};")
	x.g.P()

	typeOpts := &tableaupb.FieldOptions{Name: "Type"}
	x.g.P("  Type type = 9999 [(tableau.field) = {", marshalToText(typeOpts), "}];")
	x.g.P(`  oneof value {`)

	oneOfOpts := &tableaupb.OneofOptions{Note: x.ws.Note, Field: "Field"}
	x.g.P("    option (tableau.oneof) = {", marshalToText(oneOfOpts), "};")
	x.g.P()

	for _, field := range x.ws.Fields {
		ename := "TYPE_" + strcase.FromContext(x.be.gen.ctx).ToScreamingSnake(field.Name)
		if len(field.Fields) == 0 {
			x.g.P("    // No field bound to enum value: ", ename, ".")
		} else {
			x.g.P("    ", strings.TrimSpace(field.Name), " ", strcase.FromContext(x.be.gen.ctx).ToSnake(field.Name), " = ", field.Number, `; // Bound to enum value: `, ename, ".")
		}
	}
	x.g.P(`  }`)
	x.g.P()

	// generate enum type
	x.g.P("  enum Type {")
	x.g.P("    TYPE_INVALID = 0;")
	for _, field := range x.ws.Fields {
		ename := "TYPE_" + strcase.FromContext(x.be.gen.ctx).ToScreamingSnake(field.Name)
		note := ""
		if field.Alias != "" {
			note = " // " + field.Alias
		}
		x.g.P("    ", ename, " = ", field.Number, ` [(tableau.evalue).name = "`, field.Alias, `"];`, note)
	}
	x.g.P("  }")
	x.g.P()

	// generate message type
	for _, msgField := range x.ws.Fields {
		if len(msgField.Fields) == 0 {
			continue
		}
		x.g.P("  message ", strings.TrimSpace(msgField.Name), " {")
		// generate the fields
		depth := 2
		tagid := 1
		for _, field := range msgField.Fields {
			if err := x.exportField(depth, tagid, field, msgField.Name); err != nil {
				return err
			}
			cross := int(field.GetOptions().GetProp().GetCross())
			if cross < 1 {
				cross = 1
			}
			tagid += cross
		}
		x.g.P("  }")
	}

	x.g.P("}")
	if !x.isLastSheet {
		x.g.P("")
	}
	return nil
}

func (x *sheetExporter) exportMessager() error {
	// log.Debugf("workbook: %s", x.ws.String())
	if x.be.messagerPatternRegexp != nil && !x.be.messagerPatternRegexp.MatchString(x.ws.Name) {
		return xerrors.Errorf("messager %s does not match pattern %s", x.ws.Name, x.be.messagerPatternRegexp.String())
	}
	x.g.P("message ", x.ws.Name, " {")
	x.g.P("  option (tableau.worksheet) = {", marshalToText(x.ws.Options), "};")
	x.g.P("")
	// generate the fields
	depth := 1
	for i, field := range x.ws.Fields {
		tagid := i + 1
		if err := x.exportField(depth, tagid, field, x.ws.Name); err != nil {
			return err
		}
	}
	x.g.P("}")
	if !x.isLastSheet {
		x.g.P("")
	}
	return nil
}

func (x *sheetExporter) exportField(depth int, tagid int, field *internalpb.Field, prefix string) error {
	label := ""
	if x.ws.GetOptions().GetFieldPresence() &&
		types.IsScalarType(field.FullType) &&
		!types.IsWellKnownMessage(field.FullType) {
		label = "optional "
	}
	note := ""
	if field.Note != "" {
		note = " // " + field.Note
	}
	x.g.P(printer.Indent(depth), label, field.FullType, " ", field.Name, " = ", tagid, " ", genFieldOptionsString(field.Options), ";", note)

	typeName := field.Type
	fullTypeName := field.FullType
	if field.ListEntry != nil {
		typeName = field.ListEntry.ElemType
		fullTypeName = field.ListEntry.ElemFullType
	}
	if field.MapEntry != nil {
		typeName = field.MapEntry.ValueType
		fullTypeName = field.MapEntry.ValueFullType
	}

	if types.IsWellKnownMessage(fullTypeName) {
		importPath := types.GetWellKnownMessageImport(fullTypeName)
		x.Imports[importPath] = true
	}

	if field.Predefined {
		// import the predefined type's parent filename.
		// NOTE: excludes self.
		if typeInfo := x.typeInfos.GetByFullName(protoreflect.FullName(fullTypeName)); typeInfo != nil &&
			typeInfo.ParentFilename != x.be.GetProtoFilePath() {
			x.Imports[typeInfo.ParentFilename] = true
		}
	} else {
		nestedMsgName := prefix + "." + typeName
		switch {
		case field.Fields != nil:
			// iff field is a map or list and message type is not imported.
			if isSameFieldMessageType(field, x.nestedMessages[nestedMsgName]) {
				// if the nested message is the same as the previous one,
				// just use the previous one, and don't generate a new one.
				return nil
			}
		case !types.IsScalarType(typeName):
			if _, ok := x.nestedMessages[nestedMsgName]; ok {
				// if the nested message has the same name with the previous one,
				// just use the previous one, and don't generate a new one.
				return nil
			}
		default:
			return nil
		}
		// bookkeeping this nested msessage, so we can check if we can reuse it later.
		x.nestedMessages[nestedMsgName] = field

		// x.g.P("")
		x.g.P(printer.Indent(depth), "message ", typeName, " {")
		for i, f := range field.Fields {
			tagid := i + 1
			if err := x.exportField(depth+1, tagid, f, nestedMsgName); err != nil {
				return err
			}
		}
		x.g.P(printer.Indent(depth), "}")
	}
	return nil
}

func genFieldOptionsString(opts *tableaupb.FieldOptions) string {
	jsonName := ""
	// remember and then clear protobuf built-in options
	if opts.Prop != nil {
		jsonName = opts.Prop.JsonName
		opts.Prop.JsonName = ""

		// set nil if field prop is empty
		if IsEmptyFieldProp(opts.Prop) {
			opts.Prop = nil
		}
	}

	// compose this field options
	fieldOpts := "[(tableau.field) = {" + marshalToText(opts) + "}"
	if jsonName != "" {
		fieldOpts += `, json_name="` + jsonName + `"`
	}
	fieldOpts += "]"
	return fieldOpts
}

func marshalToText(m protoreflect.ProtoMessage) string {
	// text := proto.CompactTextString(field.Options)
	bin, err := prototext.Marshal(m)
	if err != nil {
		panic(err)
	}
	// NOTE: remove redundant spaces/whitespace from a string
	// refer: https://stackoverflow.com/questions/37290693/how-to-remove-redundant-spaces-whitespace-from-a-string-in-golang
	text := strings.Join(strings.Fields(string(bin)), " ")
	return text
}

func isSameFieldMessageType(left, right *internalpb.Field) bool {
	if left.GetType() == right.GetType() &&
		left.GetFullType() == right.GetFullType() &&
		len(left.GetFields()) == len(right.GetFields()) {
		for i, l := range left.GetFields() {
			r := right.GetFields()[i]
			if !isSameFieldMessageType(l, r) {
				return false
			}
		}
		return true
	}
	return false
}
