// Protoconf - Tableau's data interchange format
// https://tableauio.github.io/

syntax = "proto3";

package tableau;

option cc_enable_arenas = true;
option go_package = "github.com/tableauio/tableau/proto/tableaupb";
option java_package = "com.tableau.protobuf";
option java_outer_classname = "TableauProto";
option java_multiple_files = true;
option objc_class_prefix = "TPB";
option csharp_namespace = "Tableau.Protobuf.Tableau";

import "tableau/protobuf/tableau.proto";

// Supported formats:
//  - N%: percentage, e.g.: 10%
//  - N‰: per thounsand, e.g.: 10‰
//  - N‱: per ten thounsand, e.g.: 10‱
//  - N/D: simple fraction, e.g.: 3/4
//  - N: only numerator, e.g.: 3 is same to 3/1
message Fraction {
  int32 num = 1;  // numerator
  int32 den = 2;  // denominator
}

// Format: <Sign><Fraction>
// e.g.: ==10, !=1/2, <10%, <=10‰, >10%, >=10‱
message Comparator {
  Sign sign = 1;
  Fraction value = 2;

  enum Sign {
    SIGN_EQUAL = 0;             // ==
    SIGN_NOT_EQUAL = 1;         // !=
    SIGN_LESS = 2;              // <
    SIGN_LESS_OR_EQUAL = 3;     // <=
    SIGN_GREATER = 4;           // >
    SIGN_GREATER_OR_EQUAL = 5;  // >=
  }
}

// TODO:
// - Vector2d for double 2D vector
// - Vector2l for int64 (long) 2D vector
// ...

// A 2D vector using float coordinates.
// See https://docs.godotengine.org/en/stable/classes/class_vector2.html
message Vector2 {
  float x = 1 [(tableau.field) = { name: "X" }];
  float y = 2 [(tableau.field) = { name: "Y" }];
}

// A 3D vector using float coordinates.
// See https://docs.godotengine.org/en/stable/classes/class_vector3.html
message Vector3 {
  float x = 1 [(tableau.field) = { name: "X" }];
  float y = 2 [(tableau.field) = { name: "Y" }];
  float z = 3 [(tableau.field) = { name: "Z" }];
}

// A 4D vector using float coordinates.
// See https://docs.godotengine.org/en/stable/classes/class_vector4.html
message Vector4 {
  float x = 1 [(tableau.field) = { name: "X" }];
  float y = 2 [(tableau.field) = { name: "Y" }];
  float z = 3 [(tableau.field) = { name: "Z" }];
  float w = 4 [(tableau.field) = { name: "W" }];
}

// A 2D vector using int32 coordinates.
// See https://docs.godotengine.org/en/stable/classes/class_vector2i.html
message Vector2i {
  int32 x = 1 [(tableau.field) = { name: "X" }];
  int32 y = 2 [(tableau.field) = { name: "Y" }];
}

// A 3D vector using int32 coordinates.
// See https://docs.godotengine.org/en/stable/classes/class_vector3i.html
message Vector3i {
  int32 x = 1 [(tableau.field) = { name: "X" }];
  int32 y = 2 [(tableau.field) = { name: "Y" }];
  int32 z = 3 [(tableau.field) = { name: "Z" }];
}

// A 4D vector using int32 coordinates.
// See https://docs.godotengine.org/en/stable/classes/class_vector4i.html
message Vector4i {
  int32 x = 1 [(tableau.field) = { name: "X" }];
  int32 y = 2 [(tableau.field) = { name: "Y" }];
  int32 z = 3 [(tableau.field) = { name: "Z" }];
  int32 w = 4 [(tableau.field) = { name: "W" }];
}

// Version number in [dot-decimal notation](https://en.wikipedia.org/wiki/Dot-decimal_notation).
// The version form is "<MAJOR>.<MINOR>.<PATCH>[.<OTHER>]...".
//
// You can specify the version pattern as "<MAJOR_MAX>.<MINOR_MAX>.<PATCH_MAX>[.<OTHER_MAX>]...".
//  - Each part with suffix "MAX" represents the max decimal value of each part in the dot-decimal notation.
//  - Each part "XXX_MAX+1" represents the part's value occupying in an integer.
//  - For example, the formula for general pattern "<MAJOR_MAX>.<MINOR_MAX>.<PATCH_MAX>" is: 
//    MAJOR*(MINOR_MAX+1)*(PATCH_MAX+1) + MINOR*(PATCH_MAX+1) + PATCH
// 
// Default pattern: "255.255.255".
message Version {
  string str = 1; // Version in string form.
  uint64 val = 2; // Version in integer form.
  uint32 major = 3; // Major version number.
  uint32 minor = 4; // Minor version number.
  uint32 patch = 5; // Patch version number.
  repeated uint32 others = 6; // Other version numbers, such as build number, resource version, and so on.
}