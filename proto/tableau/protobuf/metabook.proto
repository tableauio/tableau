// Protoconf - Tableau's data interchange format
// https://tableauio.github.io/
// clang-format off
syntax = "proto3";

package tableau;

import "tableau/protobuf/tableau.proto";

option go_package = "github.com/tableauio/tableau/proto/tableaupb";

message Metabook {
  option (tableau.worksheet) = {name:"@TABLEAU" namerow:1 datarow:2};

  map<string, Metasheet> metasheet_map = 1 [(tableau.field).key = "Sheet"];
}

message Metasheet {
  string sheet = 1 [(tableau.field) = {name:"Sheet"}];
  string alias = 2 [(tableau.field) = {name:"Alias" prop:{optional:true}}];
  int32 namerow = 3 [(tableau.field) = {name:"Namerow" prop:{optional:true}}];
  int32 typerow = 4 [(tableau.field) = {name:"Typerow" prop:{optional:true}}];
  int32 noterow = 5 [(tableau.field) = {name:"Noterow" prop:{optional:true}}];
  int32 datarow = 6 [(tableau.field) = {name:"Datarow" prop:{optional:true}}];
  int32 nameline = 7 [(tableau.field) = {name:"Nameline" prop:{optional:true}}];
  int32 typeline = 8 [(tableau.field) = {name:"Typeline" prop:{optional:true}}];
  bool transpose = 9 [(tableau.field) = {name:"Transpose" prop:{optional:true}}];
  // nested naming of namerow
  bool nested = 10 [(tableau.field) = {name:"Nested" prop:{optional:true}}];
  string sep = 11 [(tableau.field) = {name:"Sep" prop:{optional:true}}];
  string subsep = 12 [(tableau.field) = {name:"Subsep" prop:{optional:true}}];
  // merge multiple sheets with same schema to one.
  // each element is:
  // - a workbook name or Glob(https://pkg.go.dev/path/filepath#Glob) to merge (relative to this workbook): <Workbook>,
  //   then the sheet name is the same as this sheet.
  // - or a workbook name (relative to this workbook) with a worksheet name: <Workbook>#<Worksheet>.
  repeated string merger = 13 [(tableau.field) = {name:"Merger" layout:LAYOUT_INCELL prop:{optional:true}}];
  // Tableau will merge adjacent rows with the same key. If the key cell is not set,
  // it will be treated as the same as the most nearest key above the same column.
  //
  // This option is only useful for map or keyed-list.
  bool adjacent_key = 14 [(tableau.field) = {name:"AdjacentKey" prop:{optional:true}}];
  // Field presence is the notion of whether a protobuf field has a value. If set as true,
  // in order to track presence for basic types (numeric, string, bytes, and enums), the
  // generated .proto will add the `optional` label to them.
  //
  // Singular proto3 fields of basic types (numeric, string, bytes, and enums) which are defined
  // with the optional label have explicit presence, like proto2 (this feature is enabled by default
  // as release 3.15). Refer: https://github.com/protocolbuffers/protobuf/blob/main/docs/field_presence.md
  bool field_presence = 15 [(tableau.field) = {name:"FieldPresence" prop:{optional:true}}];
  // declares if sheet is a template config, which only generates protobuf IDL and not generates json data.
  // NOTE: currently only used for XML protogen.
  bool template = 16 [(tableau.field) = {name:"Template" prop:{optional:true}}];
  // Sheet mode.
  Mode mode = 17 [(tableau.field) = {name:"Mode" prop:{optional:true}}];
  // Scatter converts sheets separately with same schema.
  // each element is:
  // - a workbook name or Glob(https://pkg.go.dev/path/filepath#Glob) which is relative to this workbook: <Workbook>,
  //   then the sheet name is the same as this sheet.
  // - or a workbook name which is relative to this workbook with a worksheet name: <Workbook>#<Worksheet>.
  repeated string scatter = 18 [(tableau.field) = {name:"Scatter" layout:LAYOUT_INCELL prop:{optional:true}}];
  // Whether all fields in this sheet are optional (field name existence).
  // If set to true, then:
  //  - table formats (Excel/CSV): field's column can be absent.
  //  - document formats (XML/YAML): field's name can be absent.
  bool optional = 19 [(tableau.field) = {name:"Optional" prop:{optional:true}}];
  // Sheet patch type.
  Patch patch = 20 [(tableau.field) = {name:"Patch" prop:{optional:true}}];
  // confgen: export JSON/Bin/Text files with parent dir created.
  bool with_parent_dir = 21 [(tableau.field) = {name:"WithParentDir" prop:{optional:true}}];
  // confgen(scatter): export JSON/Bin/Text filenames without book name prefix.
  bool scatter_without_book_name = 22 [(tableau.field) = {name:"ScatterWithoutBookName" prop:{optional:true}}];

  ////////// Loader related options below //////////
  // Generate ordered map accessers
  bool ordered_map = 50 [(tableau.field) = {name:"OrderedMap" prop:{optional:true}}];
  // Generate index accessers, and multiple index columns are comma-separated.
  // Format: <ColumnName>[@IndexName], if IndexName is not set, it will be this
  // columnâ€™s parent struct type name.
  //
  // Composite indexes (or multicolumn indexes) are in the form: ([column1, column2, column3,...])[@IndexName]
  //
  // Examples:
  //  - ID
  //  - ID@Item
  //  - (ID,Type)
  //  - (ID,Type)@Item
  //  - ID, (ID,Type)@Item
  //
  // Generated APIs are:
  //
  // C++:
  // - const std::vector<const STRUCT_TYPE*>& Find<IndexName>(INDEX_TYPE index) const;
  // - const STRUCT_TYPE* FindFirst<IndexName>(INDEX_TYPE index);
  string index = 51 [(tableau.field) = {name:"Index" prop:{optional:true}}];
}

// EnumDescriptor represents enum type definition in sheet.
message EnumDescriptor {
  option (tableau.worksheet) = {
    namerow: 1
    datarow: 2
  };

  repeated Value values = 1 [(tableau.field) = {layout:LAYOUT_VERTICAL}];
  message Value {
    optional int32 number = 1 [(tableau.field) = {name:"Number" prop:{optional:true}}];
    string name = 2 [(tableau.field) = {name:"Name"}];
    string alias = 3 [(tableau.field) = {name:"Alias"}];
  }
}

// StructDescriptor represents struct type definition in sheet.
message StructDescriptor {
  option (tableau.worksheet) = {
    namerow: 1
    datarow: 2
  };

  repeated Field fields = 1 [(tableau.field) = {layout:LAYOUT_VERTICAL}];
  message Field {
    string name = 1 [(tableau.field) = {name:"Name"}];
    string type = 2 [(tableau.field) = {name:"Type"}];
  }
}

// UnionDescriptor represents union type definition in sheet.
message UnionDescriptor {
  option (tableau.worksheet) = {
    namerow: 1
    datarow: 2
  };

  repeated Value values = 1 [(tableau.field) = {layout:LAYOUT_VERTICAL}];
  message Value {
    optional int32 number = 1 [(tableau.field) = {name:"Number" prop:{optional:true}}];
    // This is message type name, and the corresponding enum value name
    // is generated as: "TYPE_" + strcase.ToScreamingSnake(name).
    string name = 2 [(tableau.field) = {name:"Name"}];
    string alias = 3 [(tableau.field) = {name:"Alias"}];
    repeated string fields = 4 [(tableau.field) = {name:"Field" layout:LAYOUT_HORIZONTAL}];
  }
}
