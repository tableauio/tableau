// Protoconf - Tableau's data interchange format
// https://tableauio.github.io/

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.21.12
// source: tableau/protobuf/tableau.proto

package tableaupb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	descriptorpb "google.golang.org/protobuf/types/descriptorpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Layout of list and map.
type Layout int32

const (
	// Default:
	//  - vertical for struct map
	//  - incell for scalar map
	//  - horizontal for struct list
	//  - incell for scalar list
	Layout_LAYOUT_DEFAULT    Layout = 0
	Layout_LAYOUT_VERTICAL   Layout = 1 // Vertical
	Layout_LAYOUT_HORIZONTAL Layout = 2 // Horizontal
	Layout_LAYOUT_INCELL     Layout = 3 // Incell
)

// Enum value maps for Layout.
var (
	Layout_name = map[int32]string{
		0: "LAYOUT_DEFAULT",
		1: "LAYOUT_VERTICAL",
		2: "LAYOUT_HORIZONTAL",
		3: "LAYOUT_INCELL",
	}
	Layout_value = map[string]int32{
		"LAYOUT_DEFAULT":    0,
		"LAYOUT_VERTICAL":   1,
		"LAYOUT_HORIZONTAL": 2,
		"LAYOUT_INCELL":     3,
	}
)

func (x Layout) Enum() *Layout {
	p := new(Layout)
	*p = x
	return p
}

func (x Layout) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Layout) Descriptor() protoreflect.EnumDescriptor {
	return file_tableau_protobuf_tableau_proto_enumTypes[0].Descriptor()
}

func (Layout) Type() protoreflect.EnumType {
	return &file_tableau_protobuf_tableau_proto_enumTypes[0]
}

func (x Layout) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Layout.Descriptor instead.
func (Layout) EnumDescriptor() ([]byte, []int) {
	return file_tableau_protobuf_tableau_proto_rawDescGZIP(), []int{0}
}

// Field data span of scalar and struct.
type Span int32

const (
	// Default:
	//  - inner cell for scalar type: bool, string, bytes, number, and enum.
	//  - cross cell for struct type: map-value, list-element, and struct-field.
	Span_SPAN_DEFAULT    Span = 0
	Span_SPAN_CROSS_CELL Span = 1 // The field data spans across multiple cells.
	Span_SPAN_INNER_CELL Span = 2 // The field data spans inside one cell.
)

// Enum value maps for Span.
var (
	Span_name = map[int32]string{
		0: "SPAN_DEFAULT",
		1: "SPAN_CROSS_CELL",
		2: "SPAN_INNER_CELL",
	}
	Span_value = map[string]int32{
		"SPAN_DEFAULT":    0,
		"SPAN_CROSS_CELL": 1,
		"SPAN_INNER_CELL": 2,
	}
)

func (x Span) Enum() *Span {
	p := new(Span)
	*p = x
	return p
}

func (x Span) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Span) Descriptor() protoreflect.EnumDescriptor {
	return file_tableau_protobuf_tableau_proto_enumTypes[1].Descriptor()
}

func (Span) Type() protoreflect.EnumType {
	return &file_tableau_protobuf_tableau_proto_enumTypes[1]
}

func (x Span) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Span.Descriptor instead.
func (Span) EnumDescriptor() ([]byte, []int) {
	return file_tableau_protobuf_tableau_proto_rawDescGZIP(), []int{1}
}

// Sheet mode.
type Mode int32

const (
	Mode_MODE_DEFAULT Mode = 0 // Default mode.
	// UE DataTable references:
	//  - https://docs.unrealengine.com/5.1/en-US/data-driven-gameplay-elements-in-unreal-engine/
	//  - https://docs.unrealengine.com/5.1/en-US/BlueprintAPI/EditorScripting/DataTable/
	Mode_MODE_UE_CSV     Mode = 1 // CSV format of UE DataTable.
	Mode_MODE_UE_JSON    Mode = 2 // JSON format of UE DataTable.
	Mode_MODE_ENUM_TYPE  Mode = 3 // Enum type definition in sheet.
	Mode_MODE_UNION_TYPE Mode = 4 // Union type definition in sheet.
)

// Enum value maps for Mode.
var (
	Mode_name = map[int32]string{
		0: "MODE_DEFAULT",
		1: "MODE_UE_CSV",
		2: "MODE_UE_JSON",
		3: "MODE_ENUM_TYPE",
		4: "MODE_UNION_TYPE",
	}
	Mode_value = map[string]int32{
		"MODE_DEFAULT":    0,
		"MODE_UE_CSV":     1,
		"MODE_UE_JSON":    2,
		"MODE_ENUM_TYPE":  3,
		"MODE_UNION_TYPE": 4,
	}
)

func (x Mode) Enum() *Mode {
	p := new(Mode)
	*p = x
	return p
}

func (x Mode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Mode) Descriptor() protoreflect.EnumDescriptor {
	return file_tableau_protobuf_tableau_proto_enumTypes[2].Descriptor()
}

func (Mode) Type() protoreflect.EnumType {
	return &file_tableau_protobuf_tableau_proto_enumTypes[2]
}

func (x Mode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Mode.Descriptor instead.
func (Mode) EnumDescriptor() ([]byte, []int) {
	return file_tableau_protobuf_tableau_proto_rawDescGZIP(), []int{2}
}

// Cell data form.
type Form int32

const (
	Form_FORM_DEFAULT Form = 0 // Default form which confgen parser defines.
	Form_FORM_TEXT    Form = 1 // Refer: https://developers.google.com/protocol-buffers/docs/text-format-spec
	Form_FORM_JSON    Form = 2 // Refer: https://developers.google.com/protocol-buffers/docs/proto3#json
)

// Enum value maps for Form.
var (
	Form_name = map[int32]string{
		0: "FORM_DEFAULT",
		1: "FORM_TEXT",
		2: "FORM_JSON",
	}
	Form_value = map[string]int32{
		"FORM_DEFAULT": 0,
		"FORM_TEXT":    1,
		"FORM_JSON":    2,
	}
)

func (x Form) Enum() *Form {
	p := new(Form)
	*p = x
	return p
}

func (x Form) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Form) Descriptor() protoreflect.EnumDescriptor {
	return file_tableau_protobuf_tableau_proto_enumTypes[3].Descriptor()
}

func (Form) Type() protoreflect.EnumType {
	return &file_tableau_protobuf_tableau_proto_enumTypes[3]
}

func (x Form) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Form.Descriptor instead.
func (Form) EnumDescriptor() ([]byte, []int) {
	return file_tableau_protobuf_tableau_proto_rawDescGZIP(), []int{3}
}

type WorkbookOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"` // Workbook name
}

func (x *WorkbookOptions) Reset() {
	*x = WorkbookOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tableau_protobuf_tableau_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkbookOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkbookOptions) ProtoMessage() {}

func (x *WorkbookOptions) ProtoReflect() protoreflect.Message {
	mi := &file_tableau_protobuf_tableau_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkbookOptions.ProtoReflect.Descriptor instead.
func (*WorkbookOptions) Descriptor() ([]byte, []int) {
	return file_tableau_protobuf_tableau_proto_rawDescGZIP(), []int{0}
}

func (x *WorkbookOptions) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type WorksheetOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Worksheet name
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Exact row number of column name definition at a worksheet.
	//
	// Default: 1.
	Namerow int32 `protobuf:"varint,2,opt,name=namerow,proto3" json:"namerow,omitempty"`
	// Exact row number of column type definition at a worksheet.
	//
	// Default: 2.
	Typerow int32 `protobuf:"varint,3,opt,name=typerow,proto3" json:"typerow,omitempty"`
	// Exact row number of column note definition at a worksheet.
	//
	// Default: 3.
	Noterow int32 `protobuf:"varint,4,opt,name=noterow,proto3" json:"noterow,omitempty"`
	// Start row number of data at a worksheet.
	//
	// Default: 4.
	Datarow int32 `protobuf:"varint,5,opt,name=datarow,proto3" json:"datarow,omitempty"`
	// Interchange the rows and columns of worksheet.
	Transpose bool `protobuf:"varint,6,opt,name=transpose,proto3" json:"transpose,omitempty"`
	// Tags for usage, e.g.: "1,2" specifying loading servers. Specially,
	// "*" means all servers.
	Tags string `protobuf:"bytes,7,opt,name=tags,proto3" json:"tags,omitempty"`
	// The line number of column name definition in a cell. 0 means
	// the whole cell.
	//
	// Default: 0.
	Nameline int32 `protobuf:"varint,8,opt,name=nameline,proto3" json:"nameline,omitempty"`
	// The line number of column type definition in a cell. 0 means
	// the whole cell.
	//
	// Default: 0.
	Typeline int32 `protobuf:"varint,9,opt,name=typeline,proto3" json:"typeline,omitempty"`
	// Nested naming of the namerow.
	Nested bool `protobuf:"varint,10,opt,name=nested,proto3" json:"nested,omitempty"`
	// Separator for:
	//    1. separating in-cell list elements.
	//    2. separating in-cell map items.
	//
	// Default: ",".
	Sep string `protobuf:"bytes,11,opt,name=sep,proto3" json:"sep,omitempty"`
	// Subseparator for separating in-cell map Key-Value pair.
	//
	// Default: ":".
	Subsep string `protobuf:"bytes,12,opt,name=subsep,proto3" json:"subsep,omitempty"`
	// Merger merge multiple workbook sheets (comma-separated) into one
	// with same schema. E.g.: Item1.xlsx,Item2.xlsx,ItemAward*.xlsx.
	Merger []string `protobuf:"bytes,13,rep,name=merger,proto3" json:"merger,omitempty"`
	// Merge adjacent rows with the same key. If the key cell is not set,
	// it will be treated the same as the nearest key above the same column.
	AdjacentKey bool `protobuf:"varint,14,opt,name=adjacent_key,json=adjacentKey,proto3" json:"adjacent_key,omitempty"`
	// In order to track field presence of basic types (numeric, string, bytes,
	// and enums), the generated field will be labeled "optional".
	FieldPresence bool `protobuf:"varint,15,opt,name=field_presence,json=fieldPresence,proto3" json:"field_presence,omitempty"`
	// Indicate this XML sheet is a template or not. Template sheet structure will
	// only be parsed based on metasheet "@TABLEAU" in comments.
	Template bool `protobuf:"varint,16,opt,name=template,proto3" json:"template,omitempty"`
	// Sheet mode.
	Mode Mode `protobuf:"varint,17,opt,name=mode,proto3,enum=tableau.Mode" json:"mode,omitempty"`
	// Scatter convert multiple workbook sheets (comma-separated) separately
	// with same schema. E.g.: Item1.xlsx,Item2.xlsx,ItemAward*.xlsx.
	Scatter []string `protobuf:"bytes,18,rep,name=scatter,proto3" json:"scatter,omitempty"`
	////////// Loader related options below //////////
	// Generate OrderedMap accessers or not.
	OrderedMap bool `protobuf:"varint,50,opt,name=ordered_map,json=orderedMap,proto3" json:"ordered_map,omitempty"`
	// Generate index accessers, and multiple index columns are comma-separated.
	// Format: <ColumnName>[@IndexName], if IndexName is not set, it will be this
	// column’s parent struct type name.
	//
	// Composite indexes (or multicolumn indexes) are in the form: ([column1, column2, column3,...])[@IndexName]
	//
	// Examples:
	//  - ID
	//  - ID@Item
	//  - (ID,Type)
	//  - (ID,Type)@Item
	//  - ID, (ID,Type)@Item
	Index []string `protobuf:"bytes,51,rep,name=index,proto3" json:"index,omitempty"`
}

func (x *WorksheetOptions) Reset() {
	*x = WorksheetOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tableau_protobuf_tableau_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorksheetOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorksheetOptions) ProtoMessage() {}

func (x *WorksheetOptions) ProtoReflect() protoreflect.Message {
	mi := &file_tableau_protobuf_tableau_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorksheetOptions.ProtoReflect.Descriptor instead.
func (*WorksheetOptions) Descriptor() ([]byte, []int) {
	return file_tableau_protobuf_tableau_proto_rawDescGZIP(), []int{1}
}

func (x *WorksheetOptions) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *WorksheetOptions) GetNamerow() int32 {
	if x != nil {
		return x.Namerow
	}
	return 0
}

func (x *WorksheetOptions) GetTyperow() int32 {
	if x != nil {
		return x.Typerow
	}
	return 0
}

func (x *WorksheetOptions) GetNoterow() int32 {
	if x != nil {
		return x.Noterow
	}
	return 0
}

func (x *WorksheetOptions) GetDatarow() int32 {
	if x != nil {
		return x.Datarow
	}
	return 0
}

func (x *WorksheetOptions) GetTranspose() bool {
	if x != nil {
		return x.Transpose
	}
	return false
}

func (x *WorksheetOptions) GetTags() string {
	if x != nil {
		return x.Tags
	}
	return ""
}

func (x *WorksheetOptions) GetNameline() int32 {
	if x != nil {
		return x.Nameline
	}
	return 0
}

func (x *WorksheetOptions) GetTypeline() int32 {
	if x != nil {
		return x.Typeline
	}
	return 0
}

func (x *WorksheetOptions) GetNested() bool {
	if x != nil {
		return x.Nested
	}
	return false
}

func (x *WorksheetOptions) GetSep() string {
	if x != nil {
		return x.Sep
	}
	return ""
}

func (x *WorksheetOptions) GetSubsep() string {
	if x != nil {
		return x.Subsep
	}
	return ""
}

func (x *WorksheetOptions) GetMerger() []string {
	if x != nil {
		return x.Merger
	}
	return nil
}

func (x *WorksheetOptions) GetAdjacentKey() bool {
	if x != nil {
		return x.AdjacentKey
	}
	return false
}

func (x *WorksheetOptions) GetFieldPresence() bool {
	if x != nil {
		return x.FieldPresence
	}
	return false
}

func (x *WorksheetOptions) GetTemplate() bool {
	if x != nil {
		return x.Template
	}
	return false
}

func (x *WorksheetOptions) GetMode() Mode {
	if x != nil {
		return x.Mode
	}
	return Mode_MODE_DEFAULT
}

func (x *WorksheetOptions) GetScatter() []string {
	if x != nil {
		return x.Scatter
	}
	return nil
}

func (x *WorksheetOptions) GetOrderedMap() bool {
	if x != nil {
		return x.OrderedMap
	}
	return false
}

func (x *WorksheetOptions) GetIndex() []string {
	if x != nil {
		return x.Index
	}
	return nil
}

type EnumOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"` // Alias.
}

func (x *EnumOptions) Reset() {
	*x = EnumOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tableau_protobuf_tableau_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnumOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnumOptions) ProtoMessage() {}

func (x *EnumOptions) ProtoReflect() protoreflect.Message {
	mi := &file_tableau_protobuf_tableau_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnumOptions.ProtoReflect.Descriptor instead.
func (*EnumOptions) Descriptor() ([]byte, []int) {
	return file_tableau_protobuf_tableau_proto_rawDescGZIP(), []int{2}
}

func (x *EnumOptions) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type EnumValueOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"` // Alias.
}

func (x *EnumValueOptions) Reset() {
	*x = EnumValueOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tableau_protobuf_tableau_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnumValueOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnumValueOptions) ProtoMessage() {}

func (x *EnumValueOptions) ProtoReflect() protoreflect.Message {
	mi := &file_tableau_protobuf_tableau_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnumValueOptions.ProtoReflect.Descriptor instead.
func (*EnumValueOptions) Descriptor() ([]byte, []int) {
	return file_tableau_protobuf_tableau_proto_rawDescGZIP(), []int{3}
}

func (x *EnumValueOptions) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type OneofOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`   // Alias. NOT USED currently.
	Field string `protobuf:"bytes,2,opt,name=field,proto3" json:"field,omitempty"` // Field name.
}

func (x *OneofOptions) Reset() {
	*x = OneofOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tableau_protobuf_tableau_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OneofOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OneofOptions) ProtoMessage() {}

func (x *OneofOptions) ProtoReflect() protoreflect.Message {
	mi := &file_tableau_protobuf_tableau_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OneofOptions.ProtoReflect.Descriptor instead.
func (*OneofOptions) Descriptor() ([]byte, []int) {
	return file_tableau_protobuf_tableau_proto_rawDescGZIP(), []int{4}
}

func (x *OneofOptions) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *OneofOptions) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

type FieldOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string     `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`                          // Scalar type's variable name or composite type's variable name (prefix).
	Note     string     `protobuf:"bytes,2,opt,name=note,proto3" json:"note,omitempty"`                          // Field note, maybe in another language (Chinese) other than variable name (English).
	Key      string     `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`                            // Only set when this field type is map or keyed-list.
	Layout   Layout     `protobuf:"varint,4,opt,name=layout,proto3,enum=tableau.Layout" json:"layout,omitempty"` // For map/list types with cardinality. Default: LAYOUT_DEFAULT.
	Span     Span       `protobuf:"varint,5,opt,name=span,proto3,enum=tableau.Span" json:"span,omitempty"`       // For list element or map value types. Default: SPAN_CROSS_CELL.
	Sep      string     `protobuf:"bytes,6,opt,name=sep,proto3" json:"sep,omitempty"`                            // NOT USED yet. Default: ",".
	Subsep   string     `protobuf:"bytes,7,opt,name=subsep,proto3" json:"subsep,omitempty"`                      // NOT USED yet. Default: ":".
	Optional bool       `protobuf:"varint,8,opt,name=optional,proto3" json:"optional,omitempty"`                 // Whether the field is optional.
	Prop     *FieldProp `protobuf:"bytes,15,opt,name=prop,proto3" json:"prop,omitempty"`                         // Property of field.
}

func (x *FieldOptions) Reset() {
	*x = FieldOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tableau_protobuf_tableau_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FieldOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldOptions) ProtoMessage() {}

func (x *FieldOptions) ProtoReflect() protoreflect.Message {
	mi := &file_tableau_protobuf_tableau_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FieldOptions.ProtoReflect.Descriptor instead.
func (*FieldOptions) Descriptor() ([]byte, []int) {
	return file_tableau_protobuf_tableau_proto_rawDescGZIP(), []int{5}
}

func (x *FieldOptions) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FieldOptions) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

func (x *FieldOptions) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *FieldOptions) GetLayout() Layout {
	if x != nil {
		return x.Layout
	}
	return Layout_LAYOUT_DEFAULT
}

func (x *FieldOptions) GetSpan() Span {
	if x != nil {
		return x.Span
	}
	return Span_SPAN_DEFAULT
}

func (x *FieldOptions) GetSep() string {
	if x != nil {
		return x.Sep
	}
	return ""
}

func (x *FieldOptions) GetSubsep() string {
	if x != nil {
		return x.Subsep
	}
	return ""
}

func (x *FieldOptions) GetOptional() bool {
	if x != nil {
		return x.Optional
	}
	return false
}

func (x *FieldOptions) GetProp() *FieldProp {
	if x != nil {
		return x.Prop
	}
	return nil
}

type FieldProp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Different interpretations of range:
	//   - number: value range
	//   - string: count of utf-8 code point
	//
	// Format: "1,10", "1,~", "~,10".
	Range string `protobuf:"bytes,1,opt,name=range,proto3" json:"range,omitempty"`
	// Whether the map key is unique in column.
	Unique bool `protobuf:"varint,2,opt,name=unique,proto3" json:"unique,omitempty"`
	// Ensure this field's value is in another sheet's
	// column value space (aka message's field value space).
	//
	// Format: "SheetName(SheetAlias).ColumnName"
	//
	// Example:
	//  - "Item.ID" : sheet name is unique.
	//  - "Item(ItemConf).ID" : different workbooks have the same sheet name,
	//    but sheet alias is unique inherently.
	Refer string `protobuf:"bytes,3,opt,name=refer,proto3" json:"refer,omitempty"`
	// Ensure this field's value is a sequence and begins with this value.
	// Mainly used for map key and list.
	Sequence *int64 `protobuf:"varint,4,opt,name=sequence,proto3,oneof" json:"sequence,omitempty"`
	// Specify custom default value of scalar field.
	Default string `protobuf:"bytes,5,opt,name=default,proto3" json:"default,omitempty"`
	// Auto detect fixed size of horizontal list or map.
	//  - list size is detected by size of the max present list elements in name row.
	//  - map size is detected by size of the max present map items in name row.
	Fixed bool `protobuf:"varint,6,opt,name=fixed,proto3" json:"fixed,omitempty"`
	// Specify fixed size of horizontal list or map.
	Size uint32 `protobuf:"varint,7,opt,name=size,proto3" json:"size,omitempty"`
	// Specify cell data form for parsing.
	Form Form `protobuf:"varint,8,opt,name=form,proto3,enum=tableau.Form" json:"form,omitempty"`
	// JSON name of this field. The value is set by protocol compiler. If the
	// user has set a "json_name" option on this field, that option's value
	// will be used. Otherwise, it's deduced from the field's name by converting
	// it to camelCase.
	JsonName string `protobuf:"bytes,9,opt,name=json_name,json=jsonName,proto3" json:"json_name,omitempty"`
}

func (x *FieldProp) Reset() {
	*x = FieldProp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tableau_protobuf_tableau_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FieldProp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldProp) ProtoMessage() {}

func (x *FieldProp) ProtoReflect() protoreflect.Message {
	mi := &file_tableau_protobuf_tableau_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FieldProp.ProtoReflect.Descriptor instead.
func (*FieldProp) Descriptor() ([]byte, []int) {
	return file_tableau_protobuf_tableau_proto_rawDescGZIP(), []int{6}
}

func (x *FieldProp) GetRange() string {
	if x != nil {
		return x.Range
	}
	return ""
}

func (x *FieldProp) GetUnique() bool {
	if x != nil {
		return x.Unique
	}
	return false
}

func (x *FieldProp) GetRefer() string {
	if x != nil {
		return x.Refer
	}
	return ""
}

func (x *FieldProp) GetSequence() int64 {
	if x != nil && x.Sequence != nil {
		return *x.Sequence
	}
	return 0
}

func (x *FieldProp) GetDefault() string {
	if x != nil {
		return x.Default
	}
	return ""
}

func (x *FieldProp) GetFixed() bool {
	if x != nil {
		return x.Fixed
	}
	return false
}

func (x *FieldProp) GetSize() uint32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *FieldProp) GetForm() Form {
	if x != nil {
		return x.Form
	}
	return Form_FORM_DEFAULT
}

func (x *FieldProp) GetJsonName() string {
	if x != nil {
		return x.JsonName
	}
	return ""
}

var file_tableau_protobuf_tableau_proto_extTypes = []protoimpl.ExtensionInfo{
	{
		ExtendedType:  (*descriptorpb.FileOptions)(nil),
		ExtensionType: (*WorkbookOptions)(nil),
		Field:         50000,
		Name:          "tableau.workbook",
		Tag:           "bytes,50000,opt,name=workbook",
		Filename:      "tableau/protobuf/tableau.proto",
	},
	{
		ExtendedType:  (*descriptorpb.MessageOptions)(nil),
		ExtensionType: (*WorksheetOptions)(nil),
		Field:         50000,
		Name:          "tableau.worksheet",
		Tag:           "bytes,50000,opt,name=worksheet",
		Filename:      "tableau/protobuf/tableau.proto",
	},
	{
		ExtendedType:  (*descriptorpb.MessageOptions)(nil),
		ExtensionType: (*bool)(nil),
		Field:         50001,
		Name:          "tableau.union",
		Tag:           "varint,50001,opt,name=union",
		Filename:      "tableau/protobuf/tableau.proto",
	},
	{
		ExtendedType:  (*descriptorpb.FieldOptions)(nil),
		ExtensionType: (*FieldOptions)(nil),
		Field:         50000,
		Name:          "tableau.field",
		Tag:           "bytes,50000,opt,name=field",
		Filename:      "tableau/protobuf/tableau.proto",
	},
	{
		ExtendedType:  (*descriptorpb.EnumOptions)(nil),
		ExtensionType: (*EnumOptions)(nil),
		Field:         50000,
		Name:          "tableau.etype",
		Tag:           "bytes,50000,opt,name=etype",
		Filename:      "tableau/protobuf/tableau.proto",
	},
	{
		ExtendedType:  (*descriptorpb.EnumValueOptions)(nil),
		ExtensionType: (*EnumValueOptions)(nil),
		Field:         50000,
		Name:          "tableau.evalue",
		Tag:           "bytes,50000,opt,name=evalue",
		Filename:      "tableau/protobuf/tableau.proto",
	},
	{
		ExtendedType:  (*descriptorpb.OneofOptions)(nil),
		ExtensionType: (*OneofOptions)(nil),
		Field:         50000,
		Name:          "tableau.oneof",
		Tag:           "bytes,50000,opt,name=oneof",
		Filename:      "tableau/protobuf/tableau.proto",
	},
}

// Extension fields to descriptorpb.FileOptions.
var (
	// optional tableau.WorkbookOptions workbook = 50000;
	E_Workbook = &file_tableau_protobuf_tableau_proto_extTypes[0]
)

// Extension fields to descriptorpb.MessageOptions.
var (
	// optional tableau.WorksheetOptions worksheet = 50000;
	E_Worksheet = &file_tableau_protobuf_tableau_proto_extTypes[1]
	// optional bool union = 50001;
	E_Union = &file_tableau_protobuf_tableau_proto_extTypes[2]
)

// Extension fields to descriptorpb.FieldOptions.
var (
	// optional tableau.FieldOptions field = 50000;
	E_Field = &file_tableau_protobuf_tableau_proto_extTypes[3]
)

// Extension fields to descriptorpb.EnumOptions.
var (
	// optional tableau.EnumOptions etype = 50000;
	E_Etype = &file_tableau_protobuf_tableau_proto_extTypes[4]
)

// Extension fields to descriptorpb.EnumValueOptions.
var (
	// optional tableau.EnumValueOptions evalue = 50000;
	E_Evalue = &file_tableau_protobuf_tableau_proto_extTypes[5]
)

// Extension fields to descriptorpb.OneofOptions.
var (
	// optional tableau.OneofOptions oneof = 50000;
	E_Oneof = &file_tableau_protobuf_tableau_proto_extTypes[6]
)

var File_tableau_protobuf_tableau_proto protoreflect.FileDescriptor

var file_tableau_protobuf_tableau_proto_rawDesc = []byte{
	0x0a, 0x1e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x61, 0x75, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x61, 0x75, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x61, 0x75, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x25, 0x0a, 0x0f, 0x57,
	0x6f, 0x72, 0x6b, 0x62, 0x6f, 0x6f, 0x6b, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x22, 0xac, 0x04, 0x0a, 0x10, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x68, 0x65, 0x65, 0x74,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6e,
	0x61, 0x6d, 0x65, 0x72, 0x6f, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6e, 0x61,
	0x6d, 0x65, 0x72, 0x6f, 0x77, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x79, 0x70, 0x65, 0x72, 0x6f, 0x77,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x74, 0x79, 0x70, 0x65, 0x72, 0x6f, 0x77, 0x12,
	0x18, 0x0a, 0x07, 0x6e, 0x6f, 0x74, 0x65, 0x72, 0x6f, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x6e, 0x6f, 0x74, 0x65, 0x72, 0x6f, 0x77, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x61, 0x74,
	0x61, 0x72, 0x6f, 0x77, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x64, 0x61, 0x74, 0x61,
	0x72, 0x6f, 0x77, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x73, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x73,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x61, 0x6d, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6e, 0x61, 0x6d, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x79, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x74, 0x79, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x6e,
	0x65, 0x73, 0x74, 0x65, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x65, 0x70, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x73, 0x65, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x75, 0x62, 0x73, 0x65,
	0x70, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x75, 0x62, 0x73, 0x65, 0x70, 0x12,
	0x16, 0x0a, 0x06, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x72, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x06, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x64, 0x6a, 0x61, 0x63,
	0x65, 0x6e, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x61,
	0x64, 0x6a, 0x61, 0x63, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x25, 0x0a, 0x0e, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0d, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a,
	0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x61, 0x75, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x63, 0x61, 0x74, 0x74, 0x65, 0x72, 0x18, 0x12, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x07, 0x73, 0x63, 0x61, 0x74, 0x74, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x32, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x65, 0x64, 0x4d, 0x61, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x33, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x22, 0x21, 0x0a, 0x0b, 0x45, 0x6e, 0x75, 0x6d, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x22, 0x26, 0x0a, 0x10, 0x45, 0x6e, 0x75, 0x6d, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x38, 0x0a, 0x0c,
	0x4f, 0x6e, 0x65, 0x6f, 0x66, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x22, 0x82, 0x02, 0x0a, 0x0c, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x6f, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x27, 0x0a, 0x06, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0f, 0x2e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x61, 0x75, 0x2e, 0x4c, 0x61, 0x79, 0x6f,
	0x75, 0x74, 0x52, 0x06, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x12, 0x21, 0x0a, 0x04, 0x73, 0x70,
	0x61, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x61, 0x75, 0x2e, 0x53, 0x70, 0x61, 0x6e, 0x52, 0x04, 0x73, 0x70, 0x61, 0x6e, 0x12, 0x10, 0x0a,
	0x03, 0x73, 0x65, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x65, 0x70, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x75, 0x62, 0x73, 0x65, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x75, 0x62, 0x73, 0x65, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x12, 0x26, 0x0a, 0x04, 0x70, 0x72, 0x6f, 0x70, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x61, 0x75, 0x2e, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x50, 0x72, 0x6f, 0x70, 0x52, 0x04, 0x70, 0x72, 0x6f, 0x70, 0x22, 0x81, 0x02, 0x0a, 0x09,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x50, 0x72, 0x6f, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x61, 0x6e,
	0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x65, 0x66, 0x65, 0x72, 0x12, 0x1f, 0x0a,
	0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x48,
	0x00, 0x52, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x18,
	0x0a, 0x07, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x78, 0x65,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x66, 0x69, 0x78, 0x65, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x73, 0x69,
	0x7a, 0x65, 0x12, 0x21, 0x0a, 0x04, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0d, 0x2e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x61, 0x75, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x52,
	0x04, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6a, 0x73, 0x6f, 0x6e, 0x4e, 0x61,
	0x6d, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x2a,
	0x5b, 0x0a, 0x06, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x12, 0x12, 0x0a, 0x0e, 0x4c, 0x41, 0x59,
	0x4f, 0x55, 0x54, 0x5f, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x00, 0x12, 0x13, 0x0a,
	0x0f, 0x4c, 0x41, 0x59, 0x4f, 0x55, 0x54, 0x5f, 0x56, 0x45, 0x52, 0x54, 0x49, 0x43, 0x41, 0x4c,
	0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x4c, 0x41, 0x59, 0x4f, 0x55, 0x54, 0x5f, 0x48, 0x4f, 0x52,
	0x49, 0x5a, 0x4f, 0x4e, 0x54, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x4c, 0x41, 0x59,
	0x4f, 0x55, 0x54, 0x5f, 0x49, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x10, 0x03, 0x2a, 0x42, 0x0a, 0x04,
	0x53, 0x70, 0x61, 0x6e, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x50, 0x41, 0x4e, 0x5f, 0x44, 0x45, 0x46,
	0x41, 0x55, 0x4c, 0x54, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x50, 0x41, 0x4e, 0x5f, 0x43,
	0x52, 0x4f, 0x53, 0x53, 0x5f, 0x43, 0x45, 0x4c, 0x4c, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x53,
	0x50, 0x41, 0x4e, 0x5f, 0x49, 0x4e, 0x4e, 0x45, 0x52, 0x5f, 0x43, 0x45, 0x4c, 0x4c, 0x10, 0x02,
	0x2a, 0x64, 0x0a, 0x04, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x4d, 0x4f, 0x44, 0x45,
	0x5f, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x4d, 0x4f,
	0x44, 0x45, 0x5f, 0x55, 0x45, 0x5f, 0x43, 0x53, 0x56, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x4d,
	0x4f, 0x44, 0x45, 0x5f, 0x55, 0x45, 0x5f, 0x4a, 0x53, 0x4f, 0x4e, 0x10, 0x02, 0x12, 0x12, 0x0a,
	0x0e, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10,
	0x03, 0x12, 0x13, 0x0a, 0x0f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x49, 0x4f, 0x4e, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x10, 0x04, 0x2a, 0x36, 0x0a, 0x04, 0x46, 0x6f, 0x72, 0x6d, 0x12, 0x10,
	0x0a, 0x0c, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x00,
	0x12, 0x0d, 0x0a, 0x09, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x54, 0x45, 0x58, 0x54, 0x10, 0x01, 0x12,
	0x0d, 0x0a, 0x09, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x4a, 0x53, 0x4f, 0x4e, 0x10, 0x02, 0x3a, 0x54,
	0x0a, 0x08, 0x77, 0x6f, 0x72, 0x6b, 0x62, 0x6f, 0x6f, 0x6b, 0x12, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x6c,
	0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xd0, 0x86, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x61, 0x75, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x62,
	0x6f, 0x6f, 0x6b, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x08, 0x77, 0x6f, 0x72, 0x6b,
	0x62, 0x6f, 0x6f, 0x6b, 0x3a, 0x5a, 0x0a, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x68, 0x65, 0x65,
	0x74, 0x12, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0xd0, 0x86, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x61, 0x75, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x68, 0x65, 0x65, 0x74, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x68, 0x65, 0x65, 0x74,
	0x3a, 0x37, 0x0a, 0x05, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xd1, 0x86, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x05, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x3a, 0x4c, 0x0a, 0x05, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x12, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0xd0, 0x86, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x61, 0x75, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x3a, 0x4a, 0x0a, 0x05, 0x65, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xd0,
	0x86, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x61, 0x75,
	0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x05, 0x65, 0x74,
	0x79, 0x70, 0x65, 0x3a, 0x56, 0x0a, 0x06, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x21, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6e, 0x75, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0xd0, 0x86, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x61, 0x75, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x06, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x4f, 0x0a, 0x05, 0x6f,
	0x6e, 0x65, 0x6f, 0x66, 0x12, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4f, 0x6e, 0x65, 0x6f, 0x66, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0xd0, 0x86, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x61, 0x75, 0x2e, 0x4f, 0x6e, 0x65, 0x6f, 0x66, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x05, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x88, 0x01, 0x01, 0x42, 0x75, 0x0a, 0x14,
	0x63, 0x6f, 0x6d, 0x2e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x61, 0x75, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x42, 0x0c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x61, 0x75, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x50, 0x01, 0x5a, 0x2c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x61, 0x75, 0x69, 0x6f, 0x2f, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x61, 0x75, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x61, 0x75,
	0x70, 0x62, 0xa2, 0x02, 0x03, 0x54, 0x50, 0x42, 0xaa, 0x02, 0x18, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x61, 0x75, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x61, 0x75, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_tableau_protobuf_tableau_proto_rawDescOnce sync.Once
	file_tableau_protobuf_tableau_proto_rawDescData = file_tableau_protobuf_tableau_proto_rawDesc
)

func file_tableau_protobuf_tableau_proto_rawDescGZIP() []byte {
	file_tableau_protobuf_tableau_proto_rawDescOnce.Do(func() {
		file_tableau_protobuf_tableau_proto_rawDescData = protoimpl.X.CompressGZIP(file_tableau_protobuf_tableau_proto_rawDescData)
	})
	return file_tableau_protobuf_tableau_proto_rawDescData
}

var file_tableau_protobuf_tableau_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_tableau_protobuf_tableau_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_tableau_protobuf_tableau_proto_goTypes = []interface{}{
	(Layout)(0),                           // 0: tableau.Layout
	(Span)(0),                             // 1: tableau.Span
	(Mode)(0),                             // 2: tableau.Mode
	(Form)(0),                             // 3: tableau.Form
	(*WorkbookOptions)(nil),               // 4: tableau.WorkbookOptions
	(*WorksheetOptions)(nil),              // 5: tableau.WorksheetOptions
	(*EnumOptions)(nil),                   // 6: tableau.EnumOptions
	(*EnumValueOptions)(nil),              // 7: tableau.EnumValueOptions
	(*OneofOptions)(nil),                  // 8: tableau.OneofOptions
	(*FieldOptions)(nil),                  // 9: tableau.FieldOptions
	(*FieldProp)(nil),                     // 10: tableau.FieldProp
	(*descriptorpb.FileOptions)(nil),      // 11: google.protobuf.FileOptions
	(*descriptorpb.MessageOptions)(nil),   // 12: google.protobuf.MessageOptions
	(*descriptorpb.FieldOptions)(nil),     // 13: google.protobuf.FieldOptions
	(*descriptorpb.EnumOptions)(nil),      // 14: google.protobuf.EnumOptions
	(*descriptorpb.EnumValueOptions)(nil), // 15: google.protobuf.EnumValueOptions
	(*descriptorpb.OneofOptions)(nil),     // 16: google.protobuf.OneofOptions
}
var file_tableau_protobuf_tableau_proto_depIdxs = []int32{
	2,  // 0: tableau.WorksheetOptions.mode:type_name -> tableau.Mode
	0,  // 1: tableau.FieldOptions.layout:type_name -> tableau.Layout
	1,  // 2: tableau.FieldOptions.span:type_name -> tableau.Span
	10, // 3: tableau.FieldOptions.prop:type_name -> tableau.FieldProp
	3,  // 4: tableau.FieldProp.form:type_name -> tableau.Form
	11, // 5: tableau.workbook:extendee -> google.protobuf.FileOptions
	12, // 6: tableau.worksheet:extendee -> google.protobuf.MessageOptions
	12, // 7: tableau.union:extendee -> google.protobuf.MessageOptions
	13, // 8: tableau.field:extendee -> google.protobuf.FieldOptions
	14, // 9: tableau.etype:extendee -> google.protobuf.EnumOptions
	15, // 10: tableau.evalue:extendee -> google.protobuf.EnumValueOptions
	16, // 11: tableau.oneof:extendee -> google.protobuf.OneofOptions
	4,  // 12: tableau.workbook:type_name -> tableau.WorkbookOptions
	5,  // 13: tableau.worksheet:type_name -> tableau.WorksheetOptions
	9,  // 14: tableau.field:type_name -> tableau.FieldOptions
	6,  // 15: tableau.etype:type_name -> tableau.EnumOptions
	7,  // 16: tableau.evalue:type_name -> tableau.EnumValueOptions
	8,  // 17: tableau.oneof:type_name -> tableau.OneofOptions
	18, // [18:18] is the sub-list for method output_type
	18, // [18:18] is the sub-list for method input_type
	12, // [12:18] is the sub-list for extension type_name
	5,  // [5:12] is the sub-list for extension extendee
	0,  // [0:5] is the sub-list for field type_name
}

func init() { file_tableau_protobuf_tableau_proto_init() }
func file_tableau_protobuf_tableau_proto_init() {
	if File_tableau_protobuf_tableau_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_tableau_protobuf_tableau_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkbookOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tableau_protobuf_tableau_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorksheetOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tableau_protobuf_tableau_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnumOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tableau_protobuf_tableau_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnumValueOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tableau_protobuf_tableau_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OneofOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tableau_protobuf_tableau_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FieldOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tableau_protobuf_tableau_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FieldProp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_tableau_protobuf_tableau_proto_msgTypes[6].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_tableau_protobuf_tableau_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   7,
			NumExtensions: 7,
			NumServices:   0,
		},
		GoTypes:           file_tableau_protobuf_tableau_proto_goTypes,
		DependencyIndexes: file_tableau_protobuf_tableau_proto_depIdxs,
		EnumInfos:         file_tableau_protobuf_tableau_proto_enumTypes,
		MessageInfos:      file_tableau_protobuf_tableau_proto_msgTypes,
		ExtensionInfos:    file_tableau_protobuf_tableau_proto_extTypes,
	}.Build()
	File_tableau_protobuf_tableau_proto = out.File
	file_tableau_protobuf_tableau_proto_rawDesc = nil
	file_tableau_protobuf_tableau_proto_goTypes = nil
	file_tableau_protobuf_tableau_proto_depIdxs = nil
}
