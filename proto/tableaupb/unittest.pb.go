// Protoconf - Tableau's data interchange format
// https://tableauio.github.io/
// A proto file we will use for unit testing.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.21.12
// source: tableau/protobuf/unittest.proto

package tableaupb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TestFruitType int32

const (
	TestFruitType_FRUIT_TYPE_UNKNOWN TestFruitType = 0
	TestFruitType_FRUIT_TYPE_APPLE   TestFruitType = 1
	TestFruitType_FRUIT_TYPE_ORANGE  TestFruitType = 3
	TestFruitType_FRUIT_TYPE_BANANA  TestFruitType = 4
)

// Enum value maps for TestFruitType.
var (
	TestFruitType_name = map[int32]string{
		0: "FRUIT_TYPE_UNKNOWN",
		1: "FRUIT_TYPE_APPLE",
		3: "FRUIT_TYPE_ORANGE",
		4: "FRUIT_TYPE_BANANA",
	}
	TestFruitType_value = map[string]int32{
		"FRUIT_TYPE_UNKNOWN": 0,
		"FRUIT_TYPE_APPLE":   1,
		"FRUIT_TYPE_ORANGE":  3,
		"FRUIT_TYPE_BANANA":  4,
	}
)

func (x TestFruitType) Enum() *TestFruitType {
	p := new(TestFruitType)
	*p = x
	return p
}

func (x TestFruitType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TestFruitType) Descriptor() protoreflect.EnumDescriptor {
	return file_tableau_protobuf_unittest_proto_enumTypes[0].Descriptor()
}

func (TestFruitType) Type() protoreflect.EnumType {
	return &file_tableau_protobuf_unittest_proto_enumTypes[0]
}

func (x TestFruitType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TestFruitType.Descriptor instead.
func (TestFruitType) EnumDescriptor() ([]byte, []int) {
	return file_tableau_protobuf_unittest_proto_rawDescGZIP(), []int{0}
}

type TestFruitFlavor int32

const (
	TestFruitFlavor_FRUIT_FLAVOR_UNKNOWN  TestFruitFlavor = 0
	TestFruitFlavor_FRUIT_FLAVOR_FRAGRANT TestFruitFlavor = 1
	TestFruitFlavor_FRUIT_FLAVOR_SOUR     TestFruitFlavor = 2
	TestFruitFlavor_FRUIT_FLAVOR_SWEET    TestFruitFlavor = 3
)

// Enum value maps for TestFruitFlavor.
var (
	TestFruitFlavor_name = map[int32]string{
		0: "FRUIT_FLAVOR_UNKNOWN",
		1: "FRUIT_FLAVOR_FRAGRANT",
		2: "FRUIT_FLAVOR_SOUR",
		3: "FRUIT_FLAVOR_SWEET",
	}
	TestFruitFlavor_value = map[string]int32{
		"FRUIT_FLAVOR_UNKNOWN":  0,
		"FRUIT_FLAVOR_FRAGRANT": 1,
		"FRUIT_FLAVOR_SOUR":     2,
		"FRUIT_FLAVOR_SWEET":    3,
	}
)

func (x TestFruitFlavor) Enum() *TestFruitFlavor {
	p := new(TestFruitFlavor)
	*p = x
	return p
}

func (x TestFruitFlavor) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TestFruitFlavor) Descriptor() protoreflect.EnumDescriptor {
	return file_tableau_protobuf_unittest_proto_enumTypes[1].Descriptor()
}

func (TestFruitFlavor) Type() protoreflect.EnumType {
	return &file_tableau_protobuf_unittest_proto_enumTypes[1]
}

func (x TestFruitFlavor) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TestFruitFlavor.Descriptor instead.
func (TestFruitFlavor) EnumDescriptor() ([]byte, []int) {
	return file_tableau_protobuf_unittest_proto_rawDescGZIP(), []int{1}
}

type TestTarget_Type int32

const (
	TestTarget_TYPE_NIL TestTarget_Type = 0
	TestTarget_TYPE_PVP TestTarget_Type = 1
	TestTarget_TYPE_PVE TestTarget_Type = 2
)

// Enum value maps for TestTarget_Type.
var (
	TestTarget_Type_name = map[int32]string{
		0: "TYPE_NIL",
		1: "TYPE_PVP",
		2: "TYPE_PVE",
	}
	TestTarget_Type_value = map[string]int32{
		"TYPE_NIL": 0,
		"TYPE_PVP": 1,
		"TYPE_PVE": 2,
	}
)

func (x TestTarget_Type) Enum() *TestTarget_Type {
	p := new(TestTarget_Type)
	*p = x
	return p
}

func (x TestTarget_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TestTarget_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_tableau_protobuf_unittest_proto_enumTypes[2].Descriptor()
}

func (TestTarget_Type) Type() protoreflect.EnumType {
	return &file_tableau_protobuf_unittest_proto_enumTypes[2]
}

func (x TestTarget_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TestTarget_Type.Descriptor instead.
func (TestTarget_Type) EnumDescriptor() ([]byte, []int) {
	return file_tableau_protobuf_unittest_proto_rawDescGZIP(), []int{2, 0}
}

type TestItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id  int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Num int32 `protobuf:"varint,2,opt,name=num,proto3" json:"num,omitempty"`
}

func (x *TestItem) Reset() {
	*x = TestItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tableau_protobuf_unittest_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestItem) ProtoMessage() {}

func (x *TestItem) ProtoReflect() protoreflect.Message {
	mi := &file_tableau_protobuf_unittest_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestItem.ProtoReflect.Descriptor instead.
func (*TestItem) Descriptor() ([]byte, []int) {
	return file_tableau_protobuf_unittest_proto_rawDescGZIP(), []int{0}
}

func (x *TestItem) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TestItem) GetNum() int32 {
	if x != nil {
		return x.Num
	}
	return 0
}

type TestItemConf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemMap map[uint32]*TestItem `protobuf:"bytes,1,rep,name=item_map,json=itemMap,proto3" json:"item_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *TestItemConf) Reset() {
	*x = TestItemConf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tableau_protobuf_unittest_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestItemConf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestItemConf) ProtoMessage() {}

func (x *TestItemConf) ProtoReflect() protoreflect.Message {
	mi := &file_tableau_protobuf_unittest_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestItemConf.ProtoReflect.Descriptor instead.
func (*TestItemConf) Descriptor() ([]byte, []int) {
	return file_tableau_protobuf_unittest_proto_rawDescGZIP(), []int{1}
}

func (x *TestItemConf) GetItemMap() map[uint32]*TestItem {
	if x != nil {
		return x.ItemMap
	}
	return nil
}

type TestTarget struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type TestTarget_Type `protobuf:"varint,9999,opt,name=type,proto3,enum=tableau.TestTarget_Type" json:"type,omitempty"`
	// Types that are assignable to Value:
	//	*TestTarget_Pvp_
	//	*TestTarget_Pve_
	Value isTestTarget_Value `protobuf_oneof:"value"`
}

func (x *TestTarget) Reset() {
	*x = TestTarget{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tableau_protobuf_unittest_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestTarget) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestTarget) ProtoMessage() {}

func (x *TestTarget) ProtoReflect() protoreflect.Message {
	mi := &file_tableau_protobuf_unittest_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestTarget.ProtoReflect.Descriptor instead.
func (*TestTarget) Descriptor() ([]byte, []int) {
	return file_tableau_protobuf_unittest_proto_rawDescGZIP(), []int{2}
}

func (x *TestTarget) GetType() TestTarget_Type {
	if x != nil {
		return x.Type
	}
	return TestTarget_TYPE_NIL
}

func (m *TestTarget) GetValue() isTestTarget_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *TestTarget) GetPvp() *TestTarget_Pvp {
	if x, ok := x.GetValue().(*TestTarget_Pvp_); ok {
		return x.Pvp
	}
	return nil
}

func (x *TestTarget) GetPve() *TestTarget_Pve {
	if x, ok := x.GetValue().(*TestTarget_Pve_); ok {
		return x.Pve
	}
	return nil
}

type isTestTarget_Value interface {
	isTestTarget_Value()
}

type TestTarget_Pvp_ struct {
	Pvp *TestTarget_Pvp `protobuf:"bytes,1,opt,name=pvp,proto3,oneof"` // Bound to enum value: TYPE_PVP.
}

type TestTarget_Pve_ struct {
	Pve *TestTarget_Pve `protobuf:"bytes,2,opt,name=pve,proto3,oneof"` // Bound to enum value: TYPE_PVP.
}

func (*TestTarget_Pvp_) isTestTarget_Value() {}

func (*TestTarget_Pve_) isTestTarget_Value() {}

type TestTarget_Pvp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type   int32  `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	Health uint32 `protobuf:"varint,2,opt,name=health,proto3" json:"health,omitempty"`
	Damage int64  `protobuf:"varint,3,opt,name=damage,proto3" json:"damage,omitempty"`
}

func (x *TestTarget_Pvp) Reset() {
	*x = TestTarget_Pvp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tableau_protobuf_unittest_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestTarget_Pvp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestTarget_Pvp) ProtoMessage() {}

func (x *TestTarget_Pvp) ProtoReflect() protoreflect.Message {
	mi := &file_tableau_protobuf_unittest_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestTarget_Pvp.ProtoReflect.Descriptor instead.
func (*TestTarget_Pvp) Descriptor() ([]byte, []int) {
	return file_tableau_protobuf_unittest_proto_rawDescGZIP(), []int{2, 0}
}

func (x *TestTarget_Pvp) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *TestTarget_Pvp) GetHealth() uint32 {
	if x != nil {
		return x.Health
	}
	return 0
}

func (x *TestTarget_Pvp) GetDamage() int64 {
	if x != nil {
		return x.Damage
	}
	return 0
}

type TestTarget_Pve struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mission  *TestTarget_Pve_Mission `protobuf:"bytes,1,opt,name=mission,proto3" json:"mission,omitempty"`                                                                                             // incell struct
	Heros    []int32                 `protobuf:"varint,2,rep,packed,name=heros,proto3" json:"heros,omitempty"`                                                                                         // incell list
	Dungeons map[int32]int64         `protobuf:"bytes,3,rep,name=dungeons,proto3" json:"dungeons,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"` // incell map
}

func (x *TestTarget_Pve) Reset() {
	*x = TestTarget_Pve{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tableau_protobuf_unittest_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestTarget_Pve) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestTarget_Pve) ProtoMessage() {}

func (x *TestTarget_Pve) ProtoReflect() protoreflect.Message {
	mi := &file_tableau_protobuf_unittest_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestTarget_Pve.ProtoReflect.Descriptor instead.
func (*TestTarget_Pve) Descriptor() ([]byte, []int) {
	return file_tableau_protobuf_unittest_proto_rawDescGZIP(), []int{2, 1}
}

func (x *TestTarget_Pve) GetMission() *TestTarget_Pve_Mission {
	if x != nil {
		return x.Mission
	}
	return nil
}

func (x *TestTarget_Pve) GetHeros() []int32 {
	if x != nil {
		return x.Heros
	}
	return nil
}

func (x *TestTarget_Pve) GetDungeons() map[int32]int64 {
	if x != nil {
		return x.Dungeons
	}
	return nil
}

type TestTarget_Pve_Mission struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Level  uint32 `protobuf:"varint,2,opt,name=level,proto3" json:"level,omitempty"`
	Damage int64  `protobuf:"varint,3,opt,name=damage,proto3" json:"damage,omitempty"`
}

func (x *TestTarget_Pve_Mission) Reset() {
	*x = TestTarget_Pve_Mission{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tableau_protobuf_unittest_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestTarget_Pve_Mission) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestTarget_Pve_Mission) ProtoMessage() {}

func (x *TestTarget_Pve_Mission) ProtoReflect() protoreflect.Message {
	mi := &file_tableau_protobuf_unittest_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestTarget_Pve_Mission.ProtoReflect.Descriptor instead.
func (*TestTarget_Pve_Mission) Descriptor() ([]byte, []int) {
	return file_tableau_protobuf_unittest_proto_rawDescGZIP(), []int{2, 1, 1}
}

func (x *TestTarget_Pve_Mission) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TestTarget_Pve_Mission) GetLevel() uint32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *TestTarget_Pve_Mission) GetDamage() int64 {
	if x != nil {
		return x.Damage
	}
	return 0
}

var File_tableau_protobuf_unittest_proto protoreflect.FileDescriptor

var file_tableau_protobuf_unittest_proto_rawDesc = []byte{
	0x0a, 0x1f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x61, 0x75, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x75, 0x6e, 0x69, 0x74, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x61, 0x75, 0x1a, 0x1e, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x61, 0x75, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x61, 0x75, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x41, 0x0a, 0x08, 0x54, 0x65,
	0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x18, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x42, 0x08, 0x82, 0xb5, 0x18, 0x04, 0x0a, 0x02, 0x49, 0x44, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x1b, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x09, 0x82,
	0xb5, 0x18, 0x05, 0x0a, 0x03, 0x4e, 0x75, 0x6d, 0x52, 0x03, 0x6e, 0x75, 0x6d, 0x22, 0xc0, 0x01,
	0x0a, 0x0c, 0x54, 0x65, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x12, 0x49,
	0x0a, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x61, 0x75, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x49,
	0x74, 0x65, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x4d, 0x61, 0x70, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x42, 0x0a, 0x82, 0xb5, 0x18, 0x06, 0x1a, 0x02, 0x49, 0x44, 0x20, 0x01,
	0x52, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x4d, 0x61, 0x70, 0x1a, 0x4d, 0x0a, 0x0c, 0x49, 0x74, 0x65,
	0x6d, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x27, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x61, 0x75, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x3a, 0x16, 0x82, 0xb5, 0x18, 0x12, 0x0a, 0x08,
	0x49, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x10, 0x01, 0x18, 0x02, 0x20, 0x03, 0x28, 0x04,
	0x22, 0x81, 0x05, 0x0a, 0x0a, 0x54, 0x65, 0x73, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12,
	0x39, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x8f, 0x4e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18,
	0x2e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x61, 0x75, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0a, 0x82, 0xb5, 0x18, 0x06, 0x0a, 0x04,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2b, 0x0a, 0x03, 0x70, 0x76,
	0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x61,
	0x75, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x2e, 0x50, 0x76, 0x70,
	0x48, 0x00, 0x52, 0x03, 0x70, 0x76, 0x70, 0x12, 0x2b, 0x0a, 0x03, 0x70, 0x76, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x61, 0x75, 0x2e, 0x54,
	0x65, 0x73, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x2e, 0x50, 0x76, 0x65, 0x48, 0x00, 0x52,
	0x03, 0x70, 0x76, 0x65, 0x1a, 0x49, 0x0a, 0x03, 0x50, 0x76, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x61, 0x6d, 0x61, 0x67,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x1a,
	0xae, 0x02, 0x0a, 0x03, 0x50, 0x76, 0x65, 0x12, 0x48, 0x0a, 0x07, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x61, 0x75, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x2e, 0x50, 0x76,
	0x65, 0x2e, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x0d, 0x82, 0xb5, 0x18, 0x09, 0x0a,
	0x07, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x14, 0x0a, 0x05, 0x68, 0x65, 0x72, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05,
	0x52, 0x05, 0x68, 0x65, 0x72, 0x6f, 0x73, 0x12, 0x41, 0x0a, 0x08, 0x64, 0x75, 0x6e, 0x67, 0x65,
	0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x61, 0x75, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x2e, 0x50,
	0x76, 0x65, 0x2e, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x08, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x73, 0x1a, 0x3b, 0x0a, 0x0d, 0x44, 0x75,
	0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x47, 0x0a, 0x07, 0x4d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x61, 0x6d, 0x61,
	0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65,
	0x22, 0x46, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x4e, 0x49, 0x4c, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x08, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50,
	0x56, 0x50, 0x10, 0x01, 0x1a, 0x09, 0x82, 0xb5, 0x18, 0x05, 0x0a, 0x03, 0x50, 0x56, 0x50, 0x12,
	0x17, 0x0a, 0x08, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x56, 0x45, 0x10, 0x02, 0x1a, 0x09, 0x82,
	0xb5, 0x18, 0x05, 0x0a, 0x03, 0x50, 0x56, 0x45, 0x3a, 0x04, 0x88, 0xb5, 0x18, 0x01, 0x42, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x0b, 0x82, 0xb5, 0x18, 0x07, 0x12, 0x05, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x2a, 0xa3, 0x01, 0x0a, 0x0d, 0x54, 0x65, 0x73, 0x74, 0x46, 0x72, 0x75,
	0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x12, 0x46, 0x52, 0x55, 0x49, 0x54, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x1a, 0x0d,
	0x82, 0xb5, 0x18, 0x09, 0x0a, 0x07, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x12, 0x21, 0x0a,
	0x10, 0x46, 0x52, 0x55, 0x49, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x50, 0x50, 0x4c,
	0x45, 0x10, 0x01, 0x1a, 0x0b, 0x82, 0xb5, 0x18, 0x07, 0x0a, 0x05, 0x41, 0x70, 0x70, 0x6c, 0x65,
	0x12, 0x23, 0x0a, 0x11, 0x46, 0x52, 0x55, 0x49, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f,
	0x52, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x03, 0x1a, 0x0c, 0x82, 0xb5, 0x18, 0x08, 0x0a, 0x06, 0x4f,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x23, 0x0a, 0x11, 0x46, 0x52, 0x55, 0x49, 0x54, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x42, 0x41, 0x4e, 0x41, 0x4e, 0x41, 0x10, 0x04, 0x1a, 0x0c, 0x82, 0xb5,
	0x18, 0x08, 0x0a, 0x06, 0x42, 0x61, 0x6e, 0x61, 0x6e, 0x61, 0x2a, 0xad, 0x01, 0x0a, 0x0f, 0x54,
	0x65, 0x73, 0x74, 0x46, 0x72, 0x75, 0x69, 0x74, 0x46, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x12, 0x27,
	0x0a, 0x14, 0x46, 0x52, 0x55, 0x49, 0x54, 0x5f, 0x46, 0x4c, 0x41, 0x56, 0x4f, 0x52, 0x5f, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x1a, 0x0d, 0x82, 0xb5, 0x18, 0x09, 0x0a, 0x07,
	0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x12, 0x29, 0x0a, 0x15, 0x46, 0x52, 0x55, 0x49, 0x54,
	0x5f, 0x46, 0x4c, 0x41, 0x56, 0x4f, 0x52, 0x5f, 0x46, 0x52, 0x41, 0x47, 0x52, 0x41, 0x4e, 0x54,
	0x10, 0x01, 0x1a, 0x0e, 0x82, 0xb5, 0x18, 0x0a, 0x0a, 0x08, 0x46, 0x72, 0x61, 0x67, 0x72, 0x61,
	0x6e, 0x74, 0x12, 0x21, 0x0a, 0x11, 0x46, 0x52, 0x55, 0x49, 0x54, 0x5f, 0x46, 0x4c, 0x41, 0x56,
	0x4f, 0x52, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x10, 0x02, 0x1a, 0x0a, 0x82, 0xb5, 0x18, 0x06, 0x0a,
	0x04, 0x53, 0x6f, 0x75, 0x72, 0x12, 0x23, 0x0a, 0x12, 0x46, 0x52, 0x55, 0x49, 0x54, 0x5f, 0x46,
	0x4c, 0x41, 0x56, 0x4f, 0x52, 0x5f, 0x53, 0x57, 0x45, 0x45, 0x54, 0x10, 0x03, 0x1a, 0x0b, 0x82,
	0xb5, 0x18, 0x07, 0x0a, 0x05, 0x53, 0x77, 0x65, 0x65, 0x74, 0x42, 0x4b, 0x5a, 0x2c, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x61, 0x75,
	0x69, 0x6f, 0x2f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x61, 0x75, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x61, 0x75, 0x70, 0x62, 0x82, 0xb5, 0x18, 0x19, 0x0a, 0x17,
	0x75, 0x6e, 0x69, 0x74, 0x74, 0x65, 0x73, 0x74, 0x2f, 0x55, 0x6e, 0x69, 0x74, 0x74, 0x65, 0x73,
	0x74, 0x23, 0x2a, 0x2e, 0x63, 0x73, 0x76, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_tableau_protobuf_unittest_proto_rawDescOnce sync.Once
	file_tableau_protobuf_unittest_proto_rawDescData = file_tableau_protobuf_unittest_proto_rawDesc
)

func file_tableau_protobuf_unittest_proto_rawDescGZIP() []byte {
	file_tableau_protobuf_unittest_proto_rawDescOnce.Do(func() {
		file_tableau_protobuf_unittest_proto_rawDescData = protoimpl.X.CompressGZIP(file_tableau_protobuf_unittest_proto_rawDescData)
	})
	return file_tableau_protobuf_unittest_proto_rawDescData
}

var file_tableau_protobuf_unittest_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_tableau_protobuf_unittest_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_tableau_protobuf_unittest_proto_goTypes = []interface{}{
	(TestFruitType)(0),             // 0: tableau.TestFruitType
	(TestFruitFlavor)(0),           // 1: tableau.TestFruitFlavor
	(TestTarget_Type)(0),           // 2: tableau.TestTarget.Type
	(*TestItem)(nil),               // 3: tableau.TestItem
	(*TestItemConf)(nil),           // 4: tableau.TestItemConf
	(*TestTarget)(nil),             // 5: tableau.TestTarget
	nil,                            // 6: tableau.TestItemConf.ItemMapEntry
	(*TestTarget_Pvp)(nil),         // 7: tableau.TestTarget.Pvp
	(*TestTarget_Pve)(nil),         // 8: tableau.TestTarget.Pve
	nil,                            // 9: tableau.TestTarget.Pve.DungeonsEntry
	(*TestTarget_Pve_Mission)(nil), // 10: tableau.TestTarget.Pve.Mission
}
var file_tableau_protobuf_unittest_proto_depIdxs = []int32{
	6,  // 0: tableau.TestItemConf.item_map:type_name -> tableau.TestItemConf.ItemMapEntry
	2,  // 1: tableau.TestTarget.type:type_name -> tableau.TestTarget.Type
	7,  // 2: tableau.TestTarget.pvp:type_name -> tableau.TestTarget.Pvp
	8,  // 3: tableau.TestTarget.pve:type_name -> tableau.TestTarget.Pve
	3,  // 4: tableau.TestItemConf.ItemMapEntry.value:type_name -> tableau.TestItem
	10, // 5: tableau.TestTarget.Pve.mission:type_name -> tableau.TestTarget.Pve.Mission
	9,  // 6: tableau.TestTarget.Pve.dungeons:type_name -> tableau.TestTarget.Pve.DungeonsEntry
	7,  // [7:7] is the sub-list for method output_type
	7,  // [7:7] is the sub-list for method input_type
	7,  // [7:7] is the sub-list for extension type_name
	7,  // [7:7] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() { file_tableau_protobuf_unittest_proto_init() }
func file_tableau_protobuf_unittest_proto_init() {
	if File_tableau_protobuf_unittest_proto != nil {
		return
	}
	file_tableau_protobuf_tableau_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_tableau_protobuf_unittest_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tableau_protobuf_unittest_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestItemConf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tableau_protobuf_unittest_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestTarget); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tableau_protobuf_unittest_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestTarget_Pvp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tableau_protobuf_unittest_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestTarget_Pve); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tableau_protobuf_unittest_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestTarget_Pve_Mission); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_tableau_protobuf_unittest_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*TestTarget_Pvp_)(nil),
		(*TestTarget_Pve_)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_tableau_protobuf_unittest_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_tableau_protobuf_unittest_proto_goTypes,
		DependencyIndexes: file_tableau_protobuf_unittest_proto_depIdxs,
		EnumInfos:         file_tableau_protobuf_unittest_proto_enumTypes,
		MessageInfos:      file_tableau_protobuf_unittest_proto_msgTypes,
	}.Build()
	File_tableau_protobuf_unittest_proto = out.File
	file_tableau_protobuf_unittest_proto_rawDesc = nil
	file_tableau_protobuf_unittest_proto_goTypes = nil
	file_tableau_protobuf_unittest_proto_depIdxs = nil
}
