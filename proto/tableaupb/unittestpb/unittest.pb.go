// clang-format off

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.21.12
// source: tableau/protobuf/unittest/unittest.proto

package unittestpb

import (
	_ "github.com/tableauio/tableau/proto/tableaupb"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// clang-format off
type IncellMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FruitMap  map[int32]*IncellMap_Fruit `protobuf:"bytes,1,rep,name=fruit_map,json=fruitMap,proto3" json:"fruit_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	FlavorMap map[int64]FruitFlavor      `protobuf:"bytes,2,rep,name=flavor_map,json=flavorMap,proto3" json:"flavor_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3,enum=unittest.FruitFlavor"`
	ItemMap   map[int32]*IncellMap_Item  `protobuf:"bytes,3,rep,name=item_map,json=itemMap,proto3" json:"item_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *IncellMap) Reset() {
	*x = IncellMap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tableau_protobuf_unittest_unittest_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IncellMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IncellMap) ProtoMessage() {}

func (x *IncellMap) ProtoReflect() protoreflect.Message {
	mi := &file_tableau_protobuf_unittest_unittest_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IncellMap.ProtoReflect.Descriptor instead.
func (*IncellMap) Descriptor() ([]byte, []int) {
	return file_tableau_protobuf_unittest_unittest_proto_rawDescGZIP(), []int{0}
}

func (x *IncellMap) GetFruitMap() map[int32]*IncellMap_Fruit {
	if x != nil {
		return x.FruitMap
	}
	return nil
}

func (x *IncellMap) GetFlavorMap() map[int64]FruitFlavor {
	if x != nil {
		return x.FlavorMap
	}
	return nil
}

func (x *IncellMap) GetItemMap() map[int32]*IncellMap_Item {
	if x != nil {
		return x.ItemMap
	}
	return nil
}

type ItemConf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemMap map[uint32]*Item `protobuf:"bytes,1,rep,name=item_map,json=itemMap,proto3" json:"item_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ItemConf) Reset() {
	*x = ItemConf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tableau_protobuf_unittest_unittest_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ItemConf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ItemConf) ProtoMessage() {}

func (x *ItemConf) ProtoReflect() protoreflect.Message {
	mi := &file_tableau_protobuf_unittest_unittest_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ItemConf.ProtoReflect.Descriptor instead.
func (*ItemConf) Descriptor() ([]byte, []int) {
	return file_tableau_protobuf_unittest_unittest_proto_rawDescGZIP(), []int{1}
}

func (x *ItemConf) GetItemMap() map[uint32]*Item {
	if x != nil {
		return x.ItemMap
	}
	return nil
}

type IncellMap_Fruit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   FruitType `protobuf:"varint,1,opt,name=key,proto3,enum=unittest.FruitType" json:"key,omitempty"`
	Value int64     `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *IncellMap_Fruit) Reset() {
	*x = IncellMap_Fruit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tableau_protobuf_unittest_unittest_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IncellMap_Fruit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IncellMap_Fruit) ProtoMessage() {}

func (x *IncellMap_Fruit) ProtoReflect() protoreflect.Message {
	mi := &file_tableau_protobuf_unittest_unittest_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IncellMap_Fruit.ProtoReflect.Descriptor instead.
func (*IncellMap_Fruit) Descriptor() ([]byte, []int) {
	return file_tableau_protobuf_unittest_unittest_proto_rawDescGZIP(), []int{0, 1}
}

func (x *IncellMap_Fruit) GetKey() FruitType {
	if x != nil {
		return x.Key
	}
	return FruitType_FRUIT_TYPE_UNKNOWN
}

func (x *IncellMap_Fruit) GetValue() int64 {
	if x != nil {
		return x.Value
	}
	return 0
}

type IncellMap_Item struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   FruitType   `protobuf:"varint,1,opt,name=key,proto3,enum=unittest.FruitType" json:"key,omitempty"`
	Value FruitFlavor `protobuf:"varint,2,opt,name=value,proto3,enum=unittest.FruitFlavor" json:"value,omitempty"`
}

func (x *IncellMap_Item) Reset() {
	*x = IncellMap_Item{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tableau_protobuf_unittest_unittest_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IncellMap_Item) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IncellMap_Item) ProtoMessage() {}

func (x *IncellMap_Item) ProtoReflect() protoreflect.Message {
	mi := &file_tableau_protobuf_unittest_unittest_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IncellMap_Item.ProtoReflect.Descriptor instead.
func (*IncellMap_Item) Descriptor() ([]byte, []int) {
	return file_tableau_protobuf_unittest_unittest_proto_rawDescGZIP(), []int{0, 4}
}

func (x *IncellMap_Item) GetKey() FruitType {
	if x != nil {
		return x.Key
	}
	return FruitType_FRUIT_TYPE_UNKNOWN
}

func (x *IncellMap_Item) GetValue() FruitFlavor {
	if x != nil {
		return x.Value
	}
	return FruitFlavor_FRUIT_FLAVOR_UNKNOWN
}

var File_tableau_protobuf_unittest_unittest_proto protoreflect.FileDescriptor

var file_tableau_protobuf_unittest_unittest_proto_rawDesc = []byte{
	0x0a, 0x28, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x61, 0x75, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x75, 0x6e, 0x69, 0x74, 0x74, 0x65, 0x73, 0x74, 0x2f, 0x75, 0x6e, 0x69, 0x74,
	0x74, 0x65, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x75, 0x6e, 0x69, 0x74,
	0x74, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x61, 0x75, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x61, 0x75, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x26, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x61, 0x75, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x75, 0x6e, 0x69, 0x74, 0x74, 0x65, 0x73, 0x74, 0x2f,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf0, 0x05, 0x0a,
	0x09, 0x49, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x4d, 0x61, 0x70, 0x12, 0x52, 0x0a, 0x09, 0x66, 0x72,
	0x75, 0x69, 0x74, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x75, 0x6e, 0x69, 0x74, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x49, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x4d,
	0x61, 0x70, 0x2e, 0x46, 0x72, 0x75, 0x69, 0x74, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x42, 0x12, 0x82, 0xb5, 0x18, 0x0e, 0x0a, 0x05, 0x46, 0x72, 0x75, 0x69, 0x74, 0x1a, 0x03, 0x4b,
	0x65, 0x79, 0x20, 0x03, 0x52, 0x08, 0x66, 0x72, 0x75, 0x69, 0x74, 0x4d, 0x61, 0x70, 0x12, 0x51,
	0x0a, 0x0a, 0x66, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x75, 0x6e, 0x69, 0x74, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x49, 0x6e,
	0x63, 0x65, 0x6c, 0x6c, 0x4d, 0x61, 0x70, 0x2e, 0x46, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x4d, 0x61,
	0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x0e, 0x82, 0xb5, 0x18, 0x0a, 0x0a, 0x06, 0x46, 0x6c,
	0x61, 0x76, 0x6f, 0x72, 0x20, 0x03, 0x52, 0x09, 0x66, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x4d, 0x61,
	0x70, 0x12, 0x4e, 0x0a, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x75, 0x6e, 0x69, 0x74, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x49,
	0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x4d, 0x61, 0x70, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x4d, 0x61, 0x70,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x11, 0x82, 0xb5, 0x18, 0x0d, 0x0a, 0x04, 0x49, 0x74, 0x65,
	0x6d, 0x1a, 0x03, 0x4b, 0x65, 0x79, 0x20, 0x03, 0x52, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x4d, 0x61,
	0x70, 0x1a, 0x56, 0x0a, 0x0d, 0x46, 0x72, 0x75, 0x69, 0x74, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x2f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x75, 0x6e, 0x69, 0x74, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x49,
	0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x4d, 0x61, 0x70, 0x2e, 0x46, 0x72, 0x75, 0x69, 0x74, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x5c, 0x0a, 0x05, 0x46, 0x72, 0x75,
	0x69, 0x74, 0x12, 0x30, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x13, 0x2e, 0x75, 0x6e, 0x69, 0x74, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x46, 0x72, 0x75, 0x69, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x42, 0x09, 0x82, 0xb5, 0x18, 0x05, 0x0a, 0x03, 0x4b, 0x65, 0x79, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x21, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x42, 0x0b, 0x82, 0xb5, 0x18, 0x07, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x53, 0x0a, 0x0e, 0x46, 0x6c, 0x61, 0x76, 0x6f,
	0x72, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2b, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x75, 0x6e, 0x69,
	0x74, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x46, 0x72, 0x75, 0x69, 0x74, 0x46, 0x6c, 0x61, 0x76, 0x6f,
	0x72, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x54, 0x0a, 0x0c,
	0x49, 0x74, 0x65, 0x6d, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2e,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x75, 0x6e, 0x69, 0x74, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x49, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x4d,
	0x61, 0x70, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x72, 0x0a, 0x04, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x30, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x75, 0x6e, 0x69, 0x74, 0x74, 0x65,
	0x73, 0x74, 0x2e, 0x46, 0x72, 0x75, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x42, 0x09, 0x82, 0xb5,
	0x18, 0x05, 0x0a, 0x03, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x38, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x75, 0x6e,
	0x69, 0x74, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x46, 0x72, 0x75, 0x69, 0x74, 0x46, 0x6c, 0x61, 0x76,
	0x6f, 0x72, 0x42, 0x0b, 0x82, 0xb5, 0x18, 0x07, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x17, 0x82, 0xb5, 0x18, 0x13, 0x0a, 0x09, 0x49, 0x6e,
	0x63, 0x65, 0x6c, 0x6c, 0x4d, 0x61, 0x70, 0x10, 0x01, 0x18, 0x02, 0x20, 0x03, 0x28, 0x04, 0x22,
	0xba, 0x01, 0x0a, 0x08, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x12, 0x4a, 0x0a, 0x08,
	0x69, 0x74, 0x65, 0x6d, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x75, 0x6e, 0x69, 0x74, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x6f,
	0x6e, 0x66, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42,
	0x0e, 0x82, 0xb5, 0x18, 0x0a, 0x1a, 0x02, 0x49, 0x44, 0x20, 0x01, 0x7a, 0x02, 0x20, 0x01, 0x52,
	0x07, 0x69, 0x74, 0x65, 0x6d, 0x4d, 0x61, 0x70, 0x1a, 0x4a, 0x0a, 0x0c, 0x49, 0x74, 0x65, 0x6d,
	0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x24, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x75, 0x6e, 0x69, 0x74,
	0x74, 0x65, 0x73, 0x74, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x3a, 0x16, 0x82, 0xb5, 0x18, 0x12, 0x0a, 0x08, 0x49, 0x74, 0x65, 0x6d,
	0x43, 0x6f, 0x6e, 0x66, 0x10, 0x01, 0x18, 0x02, 0x20, 0x03, 0x28, 0x04, 0x42, 0x56, 0x5a, 0x37,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x61, 0x75, 0x69, 0x6f, 0x2f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x61, 0x75, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x61, 0x75, 0x70, 0x62, 0x2f, 0x75, 0x6e, 0x69,
	0x74, 0x74, 0x65, 0x73, 0x74, 0x70, 0x62, 0x82, 0xb5, 0x18, 0x19, 0x0a, 0x17, 0x75, 0x6e, 0x69,
	0x74, 0x74, 0x65, 0x73, 0x74, 0x2f, 0x55, 0x6e, 0x69, 0x74, 0x74, 0x65, 0x73, 0x74, 0x23, 0x2a,
	0x2e, 0x63, 0x73, 0x76, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_tableau_protobuf_unittest_unittest_proto_rawDescOnce sync.Once
	file_tableau_protobuf_unittest_unittest_proto_rawDescData = file_tableau_protobuf_unittest_unittest_proto_rawDesc
)

func file_tableau_protobuf_unittest_unittest_proto_rawDescGZIP() []byte {
	file_tableau_protobuf_unittest_unittest_proto_rawDescOnce.Do(func() {
		file_tableau_protobuf_unittest_unittest_proto_rawDescData = protoimpl.X.CompressGZIP(file_tableau_protobuf_unittest_unittest_proto_rawDescData)
	})
	return file_tableau_protobuf_unittest_unittest_proto_rawDescData
}

var file_tableau_protobuf_unittest_unittest_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_tableau_protobuf_unittest_unittest_proto_goTypes = []interface{}{
	(*IncellMap)(nil),       // 0: unittest.IncellMap
	(*ItemConf)(nil),        // 1: unittest.ItemConf
	nil,                     // 2: unittest.IncellMap.FruitMapEntry
	(*IncellMap_Fruit)(nil), // 3: unittest.IncellMap.Fruit
	nil,                     // 4: unittest.IncellMap.FlavorMapEntry
	nil,                     // 5: unittest.IncellMap.ItemMapEntry
	(*IncellMap_Item)(nil),  // 6: unittest.IncellMap.Item
	nil,                     // 7: unittest.ItemConf.ItemMapEntry
	(FruitType)(0),          // 8: unittest.FruitType
	(FruitFlavor)(0),        // 9: unittest.FruitFlavor
	(*Item)(nil),            // 10: unittest.Item
}
var file_tableau_protobuf_unittest_unittest_proto_depIdxs = []int32{
	2,  // 0: unittest.IncellMap.fruit_map:type_name -> unittest.IncellMap.FruitMapEntry
	4,  // 1: unittest.IncellMap.flavor_map:type_name -> unittest.IncellMap.FlavorMapEntry
	5,  // 2: unittest.IncellMap.item_map:type_name -> unittest.IncellMap.ItemMapEntry
	7,  // 3: unittest.ItemConf.item_map:type_name -> unittest.ItemConf.ItemMapEntry
	3,  // 4: unittest.IncellMap.FruitMapEntry.value:type_name -> unittest.IncellMap.Fruit
	8,  // 5: unittest.IncellMap.Fruit.key:type_name -> unittest.FruitType
	9,  // 6: unittest.IncellMap.FlavorMapEntry.value:type_name -> unittest.FruitFlavor
	6,  // 7: unittest.IncellMap.ItemMapEntry.value:type_name -> unittest.IncellMap.Item
	8,  // 8: unittest.IncellMap.Item.key:type_name -> unittest.FruitType
	9,  // 9: unittest.IncellMap.Item.value:type_name -> unittest.FruitFlavor
	10, // 10: unittest.ItemConf.ItemMapEntry.value:type_name -> unittest.Item
	11, // [11:11] is the sub-list for method output_type
	11, // [11:11] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_tableau_protobuf_unittest_unittest_proto_init() }
func file_tableau_protobuf_unittest_unittest_proto_init() {
	if File_tableau_protobuf_unittest_unittest_proto != nil {
		return
	}
	file_tableau_protobuf_unittest_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_tableau_protobuf_unittest_unittest_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IncellMap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tableau_protobuf_unittest_unittest_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ItemConf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tableau_protobuf_unittest_unittest_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IncellMap_Fruit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tableau_protobuf_unittest_unittest_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IncellMap_Item); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_tableau_protobuf_unittest_unittest_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_tableau_protobuf_unittest_unittest_proto_goTypes,
		DependencyIndexes: file_tableau_protobuf_unittest_unittest_proto_depIdxs,
		MessageInfos:      file_tableau_protobuf_unittest_unittest_proto_msgTypes,
	}.Build()
	File_tableau_protobuf_unittest_unittest_proto = out.File
	file_tableau_protobuf_unittest_unittest_proto_rawDesc = nil
	file_tableau_protobuf_unittest_unittest_proto_goTypes = nil
	file_tableau_protobuf_unittest_unittest_proto_depIdxs = nil
}
