// clang-format off

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v3.21.12
// source: tableau/protobuf/unittest/unittest.proto

package unittestpb

import (
	_ "github.com/tableauio/tableau/proto/tableaupb"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SimpleIncellMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemMap map[int32]int32 `protobuf:"bytes,1,rep,name=item_map,json=itemMap,proto3" json:"item_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *SimpleIncellMap) Reset() {
	*x = SimpleIncellMap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tableau_protobuf_unittest_unittest_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SimpleIncellMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SimpleIncellMap) ProtoMessage() {}

func (x *SimpleIncellMap) ProtoReflect() protoreflect.Message {
	mi := &file_tableau_protobuf_unittest_unittest_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SimpleIncellMap.ProtoReflect.Descriptor instead.
func (*SimpleIncellMap) Descriptor() ([]byte, []int) {
	return file_tableau_protobuf_unittest_unittest_proto_rawDescGZIP(), []int{0}
}

func (x *SimpleIncellMap) GetItemMap() map[int32]int32 {
	if x != nil {
		return x.ItemMap
	}
	return nil
}

type IncellMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FruitMap  map[int32]*IncellMap_Fruit `protobuf:"bytes,1,rep,name=fruit_map,json=fruitMap,proto3" json:"fruit_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	FlavorMap map[int64]FruitFlavor      `protobuf:"bytes,2,rep,name=flavor_map,json=flavorMap,proto3" json:"flavor_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3,enum=unittest.FruitFlavor"`
	ItemMap   map[int32]*IncellMap_Item  `protobuf:"bytes,3,rep,name=item_map,json=itemMap,proto3" json:"item_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *IncellMap) Reset() {
	*x = IncellMap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tableau_protobuf_unittest_unittest_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IncellMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IncellMap) ProtoMessage() {}

func (x *IncellMap) ProtoReflect() protoreflect.Message {
	mi := &file_tableau_protobuf_unittest_unittest_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IncellMap.ProtoReflect.Descriptor instead.
func (*IncellMap) Descriptor() ([]byte, []int) {
	return file_tableau_protobuf_unittest_unittest_proto_rawDescGZIP(), []int{1}
}

func (x *IncellMap) GetFruitMap() map[int32]*IncellMap_Fruit {
	if x != nil {
		return x.FruitMap
	}
	return nil
}

func (x *IncellMap) GetFlavorMap() map[int64]FruitFlavor {
	if x != nil {
		return x.FlavorMap
	}
	return nil
}

func (x *IncellMap) GetItemMap() map[int32]*IncellMap_Item {
	if x != nil {
		return x.ItemMap
	}
	return nil
}

type IncellStructList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemList []*Item `protobuf:"bytes,1,rep,name=item_list,json=itemList,proto3" json:"item_list,omitempty"`
}

func (x *IncellStructList) Reset() {
	*x = IncellStructList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tableau_protobuf_unittest_unittest_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IncellStructList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IncellStructList) ProtoMessage() {}

func (x *IncellStructList) ProtoReflect() protoreflect.Message {
	mi := &file_tableau_protobuf_unittest_unittest_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IncellStructList.ProtoReflect.Descriptor instead.
func (*IncellStructList) Descriptor() ([]byte, []int) {
	return file_tableau_protobuf_unittest_unittest_proto_rawDescGZIP(), []int{2}
}

func (x *IncellStructList) GetItemList() []*Item {
	if x != nil {
		return x.ItemList
	}
	return nil
}

type IncellList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ValueList  []int32       `protobuf:"varint,1,rep,packed,name=value_list,json=valueList,proto3" json:"value_list,omitempty"`
	FlavorList []FruitFlavor `protobuf:"varint,2,rep,packed,name=flavor_list,json=flavorList,proto3,enum=unittest.FruitFlavor" json:"flavor_list,omitempty"`
	ItemList   []*Item       `protobuf:"bytes,3,rep,name=item_list,json=itemList,proto3" json:"item_list,omitempty"`
}

func (x *IncellList) Reset() {
	*x = IncellList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tableau_protobuf_unittest_unittest_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IncellList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IncellList) ProtoMessage() {}

func (x *IncellList) ProtoReflect() protoreflect.Message {
	mi := &file_tableau_protobuf_unittest_unittest_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IncellList.ProtoReflect.Descriptor instead.
func (*IncellList) Descriptor() ([]byte, []int) {
	return file_tableau_protobuf_unittest_unittest_proto_rawDescGZIP(), []int{3}
}

func (x *IncellList) GetValueList() []int32 {
	if x != nil {
		return x.ValueList
	}
	return nil
}

func (x *IncellList) GetFlavorList() []FruitFlavor {
	if x != nil {
		return x.FlavorList
	}
	return nil
}

func (x *IncellList) GetItemList() []*Item {
	if x != nil {
		return x.ItemList
	}
	return nil
}

type ItemConf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemMap map[uint32]*Item `protobuf:"bytes,1,rep,name=item_map,json=itemMap,proto3" json:"item_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ItemConf) Reset() {
	*x = ItemConf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tableau_protobuf_unittest_unittest_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ItemConf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ItemConf) ProtoMessage() {}

func (x *ItemConf) ProtoReflect() protoreflect.Message {
	mi := &file_tableau_protobuf_unittest_unittest_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ItemConf.ProtoReflect.Descriptor instead.
func (*ItemConf) Descriptor() ([]byte, []int) {
	return file_tableau_protobuf_unittest_unittest_proto_rawDescGZIP(), []int{4}
}

func (x *ItemConf) GetItemMap() map[uint32]*Item {
	if x != nil {
		return x.ItemMap
	}
	return nil
}

type MallConf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShopMap map[uint32]*MallConf_Shop `protobuf:"bytes,1,rep,name=shop_map,json=shopMap,proto3" json:"shop_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *MallConf) Reset() {
	*x = MallConf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tableau_protobuf_unittest_unittest_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MallConf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MallConf) ProtoMessage() {}

func (x *MallConf) ProtoReflect() protoreflect.Message {
	mi := &file_tableau_protobuf_unittest_unittest_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MallConf.ProtoReflect.Descriptor instead.
func (*MallConf) Descriptor() ([]byte, []int) {
	return file_tableau_protobuf_unittest_unittest_proto_rawDescGZIP(), []int{5}
}

func (x *MallConf) GetShopMap() map[uint32]*MallConf_Shop {
	if x != nil {
		return x.ShopMap
	}
	return nil
}

type RewardConf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RewardMap map[uint32]*RewardConf_Reward `protobuf:"bytes,1,rep,name=reward_map,json=rewardMap,proto3" json:"reward_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *RewardConf) Reset() {
	*x = RewardConf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tableau_protobuf_unittest_unittest_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RewardConf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RewardConf) ProtoMessage() {}

func (x *RewardConf) ProtoReflect() protoreflect.Message {
	mi := &file_tableau_protobuf_unittest_unittest_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RewardConf.ProtoReflect.Descriptor instead.
func (*RewardConf) Descriptor() ([]byte, []int) {
	return file_tableau_protobuf_unittest_unittest_proto_rawDescGZIP(), []int{6}
}

func (x *RewardConf) GetRewardMap() map[uint32]*RewardConf_Reward {
	if x != nil {
		return x.RewardMap
	}
	return nil
}

type YamlScalarConf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         uint32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Num        int32   `protobuf:"varint,2,opt,name=num,proto3" json:"num,omitempty"`
	Value      uint64  `protobuf:"varint,3,opt,name=value,proto3" json:"value,omitempty"`
	Weight     int64   `protobuf:"varint,4,opt,name=weight,proto3" json:"weight,omitempty"`
	Percentage float32 `protobuf:"fixed32,5,opt,name=percentage,proto3" json:"percentage,omitempty"`
	Ratio      float64 `protobuf:"fixed64,6,opt,name=ratio,proto3" json:"ratio,omitempty"`
	Name       string  `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty"`
	Blob       []byte  `protobuf:"bytes,8,opt,name=blob,proto3" json:"blob,omitempty"`
	Ok         bool    `protobuf:"varint,9,opt,name=ok,proto3" json:"ok,omitempty"`
}

func (x *YamlScalarConf) Reset() {
	*x = YamlScalarConf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tableau_protobuf_unittest_unittest_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *YamlScalarConf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YamlScalarConf) ProtoMessage() {}

func (x *YamlScalarConf) ProtoReflect() protoreflect.Message {
	mi := &file_tableau_protobuf_unittest_unittest_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use YamlScalarConf.ProtoReflect.Descriptor instead.
func (*YamlScalarConf) Descriptor() ([]byte, []int) {
	return file_tableau_protobuf_unittest_unittest_proto_rawDescGZIP(), []int{7}
}

func (x *YamlScalarConf) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *YamlScalarConf) GetNum() int32 {
	if x != nil {
		return x.Num
	}
	return 0
}

func (x *YamlScalarConf) GetValue() uint64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *YamlScalarConf) GetWeight() int64 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *YamlScalarConf) GetPercentage() float32 {
	if x != nil {
		return x.Percentage
	}
	return 0
}

func (x *YamlScalarConf) GetRatio() float64 {
	if x != nil {
		return x.Ratio
	}
	return 0
}

func (x *YamlScalarConf) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *YamlScalarConf) GetBlob() []byte {
	if x != nil {
		return x.Blob
	}
	return nil
}

func (x *YamlScalarConf) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

type PatchReplaceConf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	PriceList []int32 `protobuf:"varint,2,rep,packed,name=price_list,json=priceList,proto3" json:"price_list,omitempty"`
}

func (x *PatchReplaceConf) Reset() {
	*x = PatchReplaceConf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tableau_protobuf_unittest_unittest_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatchReplaceConf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatchReplaceConf) ProtoMessage() {}

func (x *PatchReplaceConf) ProtoReflect() protoreflect.Message {
	mi := &file_tableau_protobuf_unittest_unittest_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatchReplaceConf.ProtoReflect.Descriptor instead.
func (*PatchReplaceConf) Descriptor() ([]byte, []int) {
	return file_tableau_protobuf_unittest_unittest_proto_rawDescGZIP(), []int{8}
}

func (x *PatchReplaceConf) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PatchReplaceConf) GetPriceList() []int32 {
	if x != nil {
		return x.PriceList
	}
	return nil
}

type PatchMergeConf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name             string               `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Name2            string               `protobuf:"bytes,2,opt,name=name2,proto3" json:"name2,omitempty"`
	Name3            *string              `protobuf:"bytes,3,opt,name=name3,proto3,oneof" json:"name3,omitempty"`
	Time             *PatchMergeConf_Time `protobuf:"bytes,4,opt,name=time,proto3" json:"time,omitempty"`
	PriceList        []int32              `protobuf:"varint,5,rep,packed,name=price_list,json=priceList,proto3" json:"price_list,omitempty"`
	ReplacePriceList []int32              `protobuf:"varint,6,rep,packed,name=replace_price_list,json=replacePriceList,proto3" json:"replace_price_list,omitempty"`
	ItemMap          map[uint32]*Item     `protobuf:"bytes,7,rep,name=item_map,json=itemMap,proto3" json:"item_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ReplaceItemMap   map[uint32]*Item     `protobuf:"bytes,8,rep,name=replace_item_map,json=replaceItemMap,proto3" json:"replace_item_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *PatchMergeConf) Reset() {
	*x = PatchMergeConf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tableau_protobuf_unittest_unittest_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatchMergeConf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatchMergeConf) ProtoMessage() {}

func (x *PatchMergeConf) ProtoReflect() protoreflect.Message {
	mi := &file_tableau_protobuf_unittest_unittest_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatchMergeConf.ProtoReflect.Descriptor instead.
func (*PatchMergeConf) Descriptor() ([]byte, []int) {
	return file_tableau_protobuf_unittest_unittest_proto_rawDescGZIP(), []int{9}
}

func (x *PatchMergeConf) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PatchMergeConf) GetName2() string {
	if x != nil {
		return x.Name2
	}
	return ""
}

func (x *PatchMergeConf) GetName3() string {
	if x != nil && x.Name3 != nil {
		return *x.Name3
	}
	return ""
}

func (x *PatchMergeConf) GetTime() *PatchMergeConf_Time {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *PatchMergeConf) GetPriceList() []int32 {
	if x != nil {
		return x.PriceList
	}
	return nil
}

func (x *PatchMergeConf) GetReplacePriceList() []int32 {
	if x != nil {
		return x.ReplacePriceList
	}
	return nil
}

func (x *PatchMergeConf) GetItemMap() map[uint32]*Item {
	if x != nil {
		return x.ItemMap
	}
	return nil
}

func (x *PatchMergeConf) GetReplaceItemMap() map[uint32]*Item {
	if x != nil {
		return x.ReplaceItemMap
	}
	return nil
}

type RecursivePatchConf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShopMap map[uint32]*RecursivePatchConf_Shop `protobuf:"bytes,1,rep,name=shop_map,json=shopMap,proto3" json:"shop_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *RecursivePatchConf) Reset() {
	*x = RecursivePatchConf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tableau_protobuf_unittest_unittest_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecursivePatchConf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecursivePatchConf) ProtoMessage() {}

func (x *RecursivePatchConf) ProtoReflect() protoreflect.Message {
	mi := &file_tableau_protobuf_unittest_unittest_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecursivePatchConf.ProtoReflect.Descriptor instead.
func (*RecursivePatchConf) Descriptor() ([]byte, []int) {
	return file_tableau_protobuf_unittest_unittest_proto_rawDescGZIP(), []int{10}
}

func (x *RecursivePatchConf) GetShopMap() map[uint32]*RecursivePatchConf_Shop {
	if x != nil {
		return x.ShopMap
	}
	return nil
}

type JsonUtilTestData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NormalField *PatchMergeConf           `protobuf:"bytes,1,opt,name=normal_field,json=normalField,proto3" json:"normal_field,omitempty"`
	ListField   []*PatchMergeConf         `protobuf:"bytes,2,rep,name=list_field,json=listField,proto3" json:"list_field,omitempty"`
	MapField    map[int32]*PatchMergeConf `protobuf:"bytes,3,rep,name=map_field,json=mapField,proto3" json:"map_field,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *JsonUtilTestData) Reset() {
	*x = JsonUtilTestData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tableau_protobuf_unittest_unittest_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JsonUtilTestData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JsonUtilTestData) ProtoMessage() {}

func (x *JsonUtilTestData) ProtoReflect() protoreflect.Message {
	mi := &file_tableau_protobuf_unittest_unittest_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JsonUtilTestData.ProtoReflect.Descriptor instead.
func (*JsonUtilTestData) Descriptor() ([]byte, []int) {
	return file_tableau_protobuf_unittest_unittest_proto_rawDescGZIP(), []int{11}
}

func (x *JsonUtilTestData) GetNormalField() *PatchMergeConf {
	if x != nil {
		return x.NormalField
	}
	return nil
}

func (x *JsonUtilTestData) GetListField() []*PatchMergeConf {
	if x != nil {
		return x.ListField
	}
	return nil
}

func (x *JsonUtilTestData) GetMapField() map[int32]*PatchMergeConf {
	if x != nil {
		return x.MapField
	}
	return nil
}

type UniqueFieldInVerticalStructList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemList []*UniqueFieldInVerticalStructList_Item `protobuf:"bytes,1,rep,name=item_list,json=itemList,proto3" json:"item_list,omitempty"`
}

func (x *UniqueFieldInVerticalStructList) Reset() {
	*x = UniqueFieldInVerticalStructList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tableau_protobuf_unittest_unittest_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UniqueFieldInVerticalStructList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UniqueFieldInVerticalStructList) ProtoMessage() {}

func (x *UniqueFieldInVerticalStructList) ProtoReflect() protoreflect.Message {
	mi := &file_tableau_protobuf_unittest_unittest_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UniqueFieldInVerticalStructList.ProtoReflect.Descriptor instead.
func (*UniqueFieldInVerticalStructList) Descriptor() ([]byte, []int) {
	return file_tableau_protobuf_unittest_unittest_proto_rawDescGZIP(), []int{12}
}

func (x *UniqueFieldInVerticalStructList) GetItemList() []*UniqueFieldInVerticalStructList_Item {
	if x != nil {
		return x.ItemList
	}
	return nil
}

type VerticalUniqueFieldStructMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MainMap map[uint32]*VerticalUniqueFieldStructMap_Main `protobuf:"bytes,1,rep,name=main_map,json=mainMap,proto3" json:"main_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *VerticalUniqueFieldStructMap) Reset() {
	*x = VerticalUniqueFieldStructMap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tableau_protobuf_unittest_unittest_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerticalUniqueFieldStructMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerticalUniqueFieldStructMap) ProtoMessage() {}

func (x *VerticalUniqueFieldStructMap) ProtoReflect() protoreflect.Message {
	mi := &file_tableau_protobuf_unittest_unittest_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerticalUniqueFieldStructMap.ProtoReflect.Descriptor instead.
func (*VerticalUniqueFieldStructMap) Descriptor() ([]byte, []int) {
	return file_tableau_protobuf_unittest_unittest_proto_rawDescGZIP(), []int{13}
}

func (x *VerticalUniqueFieldStructMap) GetMainMap() map[uint32]*VerticalUniqueFieldStructMap_Main {
	if x != nil {
		return x.MainMap
	}
	return nil
}

type DocumentUniqueFieldStructList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemList []*DocumentUniqueFieldStructList_Item `protobuf:"bytes,1,rep,name=item_list,json=itemList,proto3" json:"item_list,omitempty"`
}

func (x *DocumentUniqueFieldStructList) Reset() {
	*x = DocumentUniqueFieldStructList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tableau_protobuf_unittest_unittest_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DocumentUniqueFieldStructList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DocumentUniqueFieldStructList) ProtoMessage() {}

func (x *DocumentUniqueFieldStructList) ProtoReflect() protoreflect.Message {
	mi := &file_tableau_protobuf_unittest_unittest_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DocumentUniqueFieldStructList.ProtoReflect.Descriptor instead.
func (*DocumentUniqueFieldStructList) Descriptor() ([]byte, []int) {
	return file_tableau_protobuf_unittest_unittest_proto_rawDescGZIP(), []int{14}
}

func (x *DocumentUniqueFieldStructList) GetItemList() []*DocumentUniqueFieldStructList_Item {
	if x != nil {
		return x.ItemList
	}
	return nil
}

type DocumentUniqueFieldStructMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Chapter   map[string]*DocumentUniqueFieldStructMap_Chapter `protobuf:"bytes,1,rep,name=chapter,proto3" json:"chapter,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ScalarMap map[uint32]string                                `protobuf:"bytes,2,rep,name=scalar_map,json=scalarMap,proto3" json:"scalar_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	IncellMap map[uint32]string                                `protobuf:"bytes,5,rep,name=incell_map,json=incellMap,proto3" json:"incell_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// for card prefix tests
	ChapterInfo map[string]*DocumentUniqueFieldStructMap_ChapterInfo `protobuf:"bytes,13,rep,name=chapter_info,json=chapterInfo,proto3" json:"chapter_info,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *DocumentUniqueFieldStructMap) Reset() {
	*x = DocumentUniqueFieldStructMap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tableau_protobuf_unittest_unittest_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DocumentUniqueFieldStructMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DocumentUniqueFieldStructMap) ProtoMessage() {}

func (x *DocumentUniqueFieldStructMap) ProtoReflect() protoreflect.Message {
	mi := &file_tableau_protobuf_unittest_unittest_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DocumentUniqueFieldStructMap.ProtoReflect.Descriptor instead.
func (*DocumentUniqueFieldStructMap) Descriptor() ([]byte, []int) {
	return file_tableau_protobuf_unittest_unittest_proto_rawDescGZIP(), []int{15}
}

func (x *DocumentUniqueFieldStructMap) GetChapter() map[string]*DocumentUniqueFieldStructMap_Chapter {
	if x != nil {
		return x.Chapter
	}
	return nil
}

func (x *DocumentUniqueFieldStructMap) GetScalarMap() map[uint32]string {
	if x != nil {
		return x.ScalarMap
	}
	return nil
}

func (x *DocumentUniqueFieldStructMap) GetIncellMap() map[uint32]string {
	if x != nil {
		return x.IncellMap
	}
	return nil
}

func (x *DocumentUniqueFieldStructMap) GetChapterInfo() map[string]*DocumentUniqueFieldStructMap_ChapterInfo {
	if x != nil {
		return x.ChapterInfo
	}
	return nil
}

type IncellMap_Fruit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   FruitType `protobuf:"varint,1,opt,name=key,proto3,enum=unittest.FruitType" json:"key,omitempty"`
	Value int64     `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *IncellMap_Fruit) Reset() {
	*x = IncellMap_Fruit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tableau_protobuf_unittest_unittest_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IncellMap_Fruit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IncellMap_Fruit) ProtoMessage() {}

func (x *IncellMap_Fruit) ProtoReflect() protoreflect.Message {
	mi := &file_tableau_protobuf_unittest_unittest_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IncellMap_Fruit.ProtoReflect.Descriptor instead.
func (*IncellMap_Fruit) Descriptor() ([]byte, []int) {
	return file_tableau_protobuf_unittest_unittest_proto_rawDescGZIP(), []int{1, 1}
}

func (x *IncellMap_Fruit) GetKey() FruitType {
	if x != nil {
		return x.Key
	}
	return FruitType_FRUIT_TYPE_UNKNOWN
}

func (x *IncellMap_Fruit) GetValue() int64 {
	if x != nil {
		return x.Value
	}
	return 0
}

type IncellMap_Item struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   FruitType   `protobuf:"varint,1,opt,name=key,proto3,enum=unittest.FruitType" json:"key,omitempty"`
	Value FruitFlavor `protobuf:"varint,2,opt,name=value,proto3,enum=unittest.FruitFlavor" json:"value,omitempty"`
}

func (x *IncellMap_Item) Reset() {
	*x = IncellMap_Item{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tableau_protobuf_unittest_unittest_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IncellMap_Item) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IncellMap_Item) ProtoMessage() {}

func (x *IncellMap_Item) ProtoReflect() protoreflect.Message {
	mi := &file_tableau_protobuf_unittest_unittest_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IncellMap_Item.ProtoReflect.Descriptor instead.
func (*IncellMap_Item) Descriptor() ([]byte, []int) {
	return file_tableau_protobuf_unittest_unittest_proto_rawDescGZIP(), []int{1, 4}
}

func (x *IncellMap_Item) GetKey() FruitType {
	if x != nil {
		return x.Key
	}
	return FruitType_FRUIT_TYPE_UNKNOWN
}

func (x *IncellMap_Item) GetValue() FruitFlavor {
	if x != nil {
		return x.Value
	}
	return FruitFlavor_FRUIT_FLAVOR_UNKNOWN
}

type MallConf_Shop struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShopId   uint32                          `protobuf:"varint,1,opt,name=shop_id,json=shopId,proto3" json:"shop_id,omitempty"`
	GoodsMap map[uint32]*MallConf_Shop_Goods `protobuf:"bytes,2,rep,name=goods_map,json=goodsMap,proto3" json:"goods_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *MallConf_Shop) Reset() {
	*x = MallConf_Shop{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tableau_protobuf_unittest_unittest_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MallConf_Shop) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MallConf_Shop) ProtoMessage() {}

func (x *MallConf_Shop) ProtoReflect() protoreflect.Message {
	mi := &file_tableau_protobuf_unittest_unittest_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MallConf_Shop.ProtoReflect.Descriptor instead.
func (*MallConf_Shop) Descriptor() ([]byte, []int) {
	return file_tableau_protobuf_unittest_unittest_proto_rawDescGZIP(), []int{5, 1}
}

func (x *MallConf_Shop) GetShopId() uint32 {
	if x != nil {
		return x.ShopId
	}
	return 0
}

func (x *MallConf_Shop) GetGoodsMap() map[uint32]*MallConf_Shop_Goods {
	if x != nil {
		return x.GoodsMap
	}
	return nil
}

type MallConf_Shop_Goods struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GoodsId uint32 `protobuf:"varint,1,opt,name=goods_id,json=goodsId,proto3" json:"goods_id,omitempty"`
	Price   int32  `protobuf:"varint,2,opt,name=price,proto3" json:"price,omitempty"`
}

func (x *MallConf_Shop_Goods) Reset() {
	*x = MallConf_Shop_Goods{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tableau_protobuf_unittest_unittest_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MallConf_Shop_Goods) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MallConf_Shop_Goods) ProtoMessage() {}

func (x *MallConf_Shop_Goods) ProtoReflect() protoreflect.Message {
	mi := &file_tableau_protobuf_unittest_unittest_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MallConf_Shop_Goods.ProtoReflect.Descriptor instead.
func (*MallConf_Shop_Goods) Descriptor() ([]byte, []int) {
	return file_tableau_protobuf_unittest_unittest_proto_rawDescGZIP(), []int{5, 1, 1}
}

func (x *MallConf_Shop_Goods) GetGoodsId() uint32 {
	if x != nil {
		return x.GoodsId
	}
	return 0
}

func (x *MallConf_Shop_Goods) GetPrice() int32 {
	if x != nil {
		return x.Price
	}
	return 0
}

type RewardConf_Reward struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RewardId uint32           `protobuf:"varint,1,opt,name=reward_id,json=rewardId,proto3" json:"reward_id,omitempty"`
	ItemMap  map[uint32]*Item `protobuf:"bytes,2,rep,name=item_map,json=itemMap,proto3" json:"item_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *RewardConf_Reward) Reset() {
	*x = RewardConf_Reward{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tableau_protobuf_unittest_unittest_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RewardConf_Reward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RewardConf_Reward) ProtoMessage() {}

func (x *RewardConf_Reward) ProtoReflect() protoreflect.Message {
	mi := &file_tableau_protobuf_unittest_unittest_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RewardConf_Reward.ProtoReflect.Descriptor instead.
func (*RewardConf_Reward) Descriptor() ([]byte, []int) {
	return file_tableau_protobuf_unittest_unittest_proto_rawDescGZIP(), []int{6, 1}
}

func (x *RewardConf_Reward) GetRewardId() uint32 {
	if x != nil {
		return x.RewardId
	}
	return 0
}

func (x *RewardConf_Reward) GetItemMap() map[uint32]*Item {
	if x != nil {
		return x.ItemMap
	}
	return nil
}

type PatchMergeConf_Time struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Start  *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=start,proto3" json:"start,omitempty"`
	Expiry *durationpb.Duration   `protobuf:"bytes,2,opt,name=expiry,proto3" json:"expiry,omitempty"`
}

func (x *PatchMergeConf_Time) Reset() {
	*x = PatchMergeConf_Time{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tableau_protobuf_unittest_unittest_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatchMergeConf_Time) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatchMergeConf_Time) ProtoMessage() {}

func (x *PatchMergeConf_Time) ProtoReflect() protoreflect.Message {
	mi := &file_tableau_protobuf_unittest_unittest_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatchMergeConf_Time.ProtoReflect.Descriptor instead.
func (*PatchMergeConf_Time) Descriptor() ([]byte, []int) {
	return file_tableau_protobuf_unittest_unittest_proto_rawDescGZIP(), []int{9, 0}
}

func (x *PatchMergeConf_Time) GetStart() *timestamppb.Timestamp {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *PatchMergeConf_Time) GetExpiry() *durationpb.Duration {
	if x != nil {
		return x.Expiry
	}
	return nil
}

type RecursivePatchConf_Shop struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShopId   uint32                                    `protobuf:"varint,1,opt,name=shop_id,json=shopId,proto3" json:"shop_id,omitempty"`
	GoodsMap map[uint32]*RecursivePatchConf_Shop_Goods `protobuf:"bytes,2,rep,name=goods_map,json=goodsMap,proto3" json:"goods_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *RecursivePatchConf_Shop) Reset() {
	*x = RecursivePatchConf_Shop{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tableau_protobuf_unittest_unittest_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecursivePatchConf_Shop) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecursivePatchConf_Shop) ProtoMessage() {}

func (x *RecursivePatchConf_Shop) ProtoReflect() protoreflect.Message {
	mi := &file_tableau_protobuf_unittest_unittest_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecursivePatchConf_Shop.ProtoReflect.Descriptor instead.
func (*RecursivePatchConf_Shop) Descriptor() ([]byte, []int) {
	return file_tableau_protobuf_unittest_unittest_proto_rawDescGZIP(), []int{10, 1}
}

func (x *RecursivePatchConf_Shop) GetShopId() uint32 {
	if x != nil {
		return x.ShopId
	}
	return 0
}

func (x *RecursivePatchConf_Shop) GetGoodsMap() map[uint32]*RecursivePatchConf_Shop_Goods {
	if x != nil {
		return x.GoodsMap
	}
	return nil
}

type RecursivePatchConf_Shop_Goods struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GoodsId     uint32                                             `protobuf:"varint,1,opt,name=goods_id,json=goodsId,proto3" json:"goods_id,omitempty"`
	Desc        []byte                                             `protobuf:"bytes,2,opt,name=desc,proto3" json:"desc,omitempty"`
	CurrencyMap map[uint32]*RecursivePatchConf_Shop_Goods_Currency `protobuf:"bytes,3,rep,name=currency_map,json=currencyMap,proto3" json:"currency_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	TagList     [][]byte                                           `protobuf:"bytes,4,rep,name=tag_list,json=tagList,proto3" json:"tag_list,omitempty"`
	AwardList   []*RecursivePatchConf_Shop_Goods_Award             `protobuf:"bytes,5,rep,name=award_list,json=awardList,proto3" json:"award_list,omitempty"`
}

func (x *RecursivePatchConf_Shop_Goods) Reset() {
	*x = RecursivePatchConf_Shop_Goods{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tableau_protobuf_unittest_unittest_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecursivePatchConf_Shop_Goods) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecursivePatchConf_Shop_Goods) ProtoMessage() {}

func (x *RecursivePatchConf_Shop_Goods) ProtoReflect() protoreflect.Message {
	mi := &file_tableau_protobuf_unittest_unittest_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecursivePatchConf_Shop_Goods.ProtoReflect.Descriptor instead.
func (*RecursivePatchConf_Shop_Goods) Descriptor() ([]byte, []int) {
	return file_tableau_protobuf_unittest_unittest_proto_rawDescGZIP(), []int{10, 1, 1}
}

func (x *RecursivePatchConf_Shop_Goods) GetGoodsId() uint32 {
	if x != nil {
		return x.GoodsId
	}
	return 0
}

func (x *RecursivePatchConf_Shop_Goods) GetDesc() []byte {
	if x != nil {
		return x.Desc
	}
	return nil
}

func (x *RecursivePatchConf_Shop_Goods) GetCurrencyMap() map[uint32]*RecursivePatchConf_Shop_Goods_Currency {
	if x != nil {
		return x.CurrencyMap
	}
	return nil
}

func (x *RecursivePatchConf_Shop_Goods) GetTagList() [][]byte {
	if x != nil {
		return x.TagList
	}
	return nil
}

func (x *RecursivePatchConf_Shop_Goods) GetAwardList() []*RecursivePatchConf_Shop_Goods_Award {
	if x != nil {
		return x.AwardList
	}
	return nil
}

type RecursivePatchConf_Shop_Goods_Currency struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type        uint32           `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	PriceList   []int32          `protobuf:"varint,2,rep,packed,name=price_list,json=priceList,proto3" json:"price_list,omitempty"`
	ValueList   map[int32]int32  `protobuf:"bytes,3,rep,name=value_list,json=valueList,proto3" json:"value_list,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	MessageList map[int32][]byte `protobuf:"bytes,4,rep,name=message_list,json=messageList,proto3" json:"message_list,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *RecursivePatchConf_Shop_Goods_Currency) Reset() {
	*x = RecursivePatchConf_Shop_Goods_Currency{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tableau_protobuf_unittest_unittest_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecursivePatchConf_Shop_Goods_Currency) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecursivePatchConf_Shop_Goods_Currency) ProtoMessage() {}

func (x *RecursivePatchConf_Shop_Goods_Currency) ProtoReflect() protoreflect.Message {
	mi := &file_tableau_protobuf_unittest_unittest_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecursivePatchConf_Shop_Goods_Currency.ProtoReflect.Descriptor instead.
func (*RecursivePatchConf_Shop_Goods_Currency) Descriptor() ([]byte, []int) {
	return file_tableau_protobuf_unittest_unittest_proto_rawDescGZIP(), []int{10, 1, 1, 1}
}

func (x *RecursivePatchConf_Shop_Goods_Currency) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *RecursivePatchConf_Shop_Goods_Currency) GetPriceList() []int32 {
	if x != nil {
		return x.PriceList
	}
	return nil
}

func (x *RecursivePatchConf_Shop_Goods_Currency) GetValueList() map[int32]int32 {
	if x != nil {
		return x.ValueList
	}
	return nil
}

func (x *RecursivePatchConf_Shop_Goods_Currency) GetMessageList() map[int32][]byte {
	if x != nil {
		return x.MessageList
	}
	return nil
}

type RecursivePatchConf_Shop_Goods_Award struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id  uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Num int32  `protobuf:"varint,2,opt,name=num,proto3" json:"num,omitempty"`
}

func (x *RecursivePatchConf_Shop_Goods_Award) Reset() {
	*x = RecursivePatchConf_Shop_Goods_Award{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tableau_protobuf_unittest_unittest_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecursivePatchConf_Shop_Goods_Award) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecursivePatchConf_Shop_Goods_Award) ProtoMessage() {}

func (x *RecursivePatchConf_Shop_Goods_Award) ProtoReflect() protoreflect.Message {
	mi := &file_tableau_protobuf_unittest_unittest_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecursivePatchConf_Shop_Goods_Award.ProtoReflect.Descriptor instead.
func (*RecursivePatchConf_Shop_Goods_Award) Descriptor() ([]byte, []int) {
	return file_tableau_protobuf_unittest_unittest_proto_rawDescGZIP(), []int{10, 1, 1, 2}
}

func (x *RecursivePatchConf_Shop_Goods_Award) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *RecursivePatchConf_Shop_Goods_Award) GetNum() int32 {
	if x != nil {
		return x.Num
	}
	return 0
}

type UniqueFieldInVerticalStructList_Item struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Desc string `protobuf:"bytes,3,opt,name=desc,proto3" json:"desc,omitempty"`
}

func (x *UniqueFieldInVerticalStructList_Item) Reset() {
	*x = UniqueFieldInVerticalStructList_Item{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tableau_protobuf_unittest_unittest_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UniqueFieldInVerticalStructList_Item) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UniqueFieldInVerticalStructList_Item) ProtoMessage() {}

func (x *UniqueFieldInVerticalStructList_Item) ProtoReflect() protoreflect.Message {
	mi := &file_tableau_protobuf_unittest_unittest_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UniqueFieldInVerticalStructList_Item.ProtoReflect.Descriptor instead.
func (*UniqueFieldInVerticalStructList_Item) Descriptor() ([]byte, []int) {
	return file_tableau_protobuf_unittest_unittest_proto_rawDescGZIP(), []int{12, 0}
}

func (x *UniqueFieldInVerticalStructList_Item) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UniqueFieldInVerticalStructList_Item) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UniqueFieldInVerticalStructList_Item) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

type VerticalUniqueFieldStructMap_Main struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MainId    uint32                                            `protobuf:"varint,1,opt,name=main_id,json=mainId,proto3" json:"main_id,omitempty"`
	MainName  string                                            `protobuf:"bytes,2,opt,name=main_name,json=mainName,proto3" json:"main_name,omitempty"`
	MainKvMap map[int32]int32                                   `protobuf:"bytes,3,rep,name=main_kv_map,json=mainKvMap,proto3" json:"main_kv_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	SubMap    map[uint32]*VerticalUniqueFieldStructMap_Main_Sub `protobuf:"bytes,4,rep,name=sub_map,json=subMap,proto3" json:"sub_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *VerticalUniqueFieldStructMap_Main) Reset() {
	*x = VerticalUniqueFieldStructMap_Main{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tableau_protobuf_unittest_unittest_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerticalUniqueFieldStructMap_Main) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerticalUniqueFieldStructMap_Main) ProtoMessage() {}

func (x *VerticalUniqueFieldStructMap_Main) ProtoReflect() protoreflect.Message {
	mi := &file_tableau_protobuf_unittest_unittest_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerticalUniqueFieldStructMap_Main.ProtoReflect.Descriptor instead.
func (*VerticalUniqueFieldStructMap_Main) Descriptor() ([]byte, []int) {
	return file_tableau_protobuf_unittest_unittest_proto_rawDescGZIP(), []int{13, 1}
}

func (x *VerticalUniqueFieldStructMap_Main) GetMainId() uint32 {
	if x != nil {
		return x.MainId
	}
	return 0
}

func (x *VerticalUniqueFieldStructMap_Main) GetMainName() string {
	if x != nil {
		return x.MainName
	}
	return ""
}

func (x *VerticalUniqueFieldStructMap_Main) GetMainKvMap() map[int32]int32 {
	if x != nil {
		return x.MainKvMap
	}
	return nil
}

func (x *VerticalUniqueFieldStructMap_Main) GetSubMap() map[uint32]*VerticalUniqueFieldStructMap_Main_Sub {
	if x != nil {
		return x.SubMap
	}
	return nil
}

type VerticalUniqueFieldStructMap_Main_Sub struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubId   uint32 `protobuf:"varint,1,opt,name=sub_id,json=subId,proto3" json:"sub_id,omitempty"`
	SubName string `protobuf:"bytes,2,opt,name=sub_name,json=subName,proto3" json:"sub_name,omitempty"`
}

func (x *VerticalUniqueFieldStructMap_Main_Sub) Reset() {
	*x = VerticalUniqueFieldStructMap_Main_Sub{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tableau_protobuf_unittest_unittest_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerticalUniqueFieldStructMap_Main_Sub) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerticalUniqueFieldStructMap_Main_Sub) ProtoMessage() {}

func (x *VerticalUniqueFieldStructMap_Main_Sub) ProtoReflect() protoreflect.Message {
	mi := &file_tableau_protobuf_unittest_unittest_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerticalUniqueFieldStructMap_Main_Sub.ProtoReflect.Descriptor instead.
func (*VerticalUniqueFieldStructMap_Main_Sub) Descriptor() ([]byte, []int) {
	return file_tableau_protobuf_unittest_unittest_proto_rawDescGZIP(), []int{13, 1, 2}
}

func (x *VerticalUniqueFieldStructMap_Main_Sub) GetSubId() uint32 {
	if x != nil {
		return x.SubId
	}
	return 0
}

func (x *VerticalUniqueFieldStructMap_Main_Sub) GetSubName() string {
	if x != nil {
		return x.SubName
	}
	return ""
}

type DocumentUniqueFieldStructList_Item struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Num  int32  `protobuf:"varint,3,opt,name=num,proto3" json:"num,omitempty"`
}

func (x *DocumentUniqueFieldStructList_Item) Reset() {
	*x = DocumentUniqueFieldStructList_Item{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tableau_protobuf_unittest_unittest_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DocumentUniqueFieldStructList_Item) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DocumentUniqueFieldStructList_Item) ProtoMessage() {}

func (x *DocumentUniqueFieldStructList_Item) ProtoReflect() protoreflect.Message {
	mi := &file_tableau_protobuf_unittest_unittest_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DocumentUniqueFieldStructList_Item.ProtoReflect.Descriptor instead.
func (*DocumentUniqueFieldStructList_Item) Descriptor() ([]byte, []int) {
	return file_tableau_protobuf_unittest_unittest_proto_rawDescGZIP(), []int{14, 0}
}

func (x *DocumentUniqueFieldStructList_Item) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DocumentUniqueFieldStructList_Item) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DocumentUniqueFieldStructList_Item) GetNum() int32 {
	if x != nil {
		return x.Num
	}
	return 0
}

type DocumentUniqueFieldStructMap_Chapter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key     string                                                   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Name    string                                                   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Section map[string]*DocumentUniqueFieldStructMap_Chapter_Section `protobuf:"bytes,3,rep,name=section,proto3" json:"section,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *DocumentUniqueFieldStructMap_Chapter) Reset() {
	*x = DocumentUniqueFieldStructMap_Chapter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tableau_protobuf_unittest_unittest_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DocumentUniqueFieldStructMap_Chapter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DocumentUniqueFieldStructMap_Chapter) ProtoMessage() {}

func (x *DocumentUniqueFieldStructMap_Chapter) ProtoReflect() protoreflect.Message {
	mi := &file_tableau_protobuf_unittest_unittest_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DocumentUniqueFieldStructMap_Chapter.ProtoReflect.Descriptor instead.
func (*DocumentUniqueFieldStructMap_Chapter) Descriptor() ([]byte, []int) {
	return file_tableau_protobuf_unittest_unittest_proto_rawDescGZIP(), []int{15, 1}
}

func (x *DocumentUniqueFieldStructMap_Chapter) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *DocumentUniqueFieldStructMap_Chapter) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DocumentUniqueFieldStructMap_Chapter) GetSection() map[string]*DocumentUniqueFieldStructMap_Chapter_Section {
	if x != nil {
		return x.Section
	}
	return nil
}

type DocumentUniqueFieldStructMap_ChapterInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key     string                                                       `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Name    string                                                       `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Section map[string]*DocumentUniqueFieldStructMap_ChapterInfo_Section `protobuf:"bytes,3,rep,name=section,proto3" json:"section,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *DocumentUniqueFieldStructMap_ChapterInfo) Reset() {
	*x = DocumentUniqueFieldStructMap_ChapterInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tableau_protobuf_unittest_unittest_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DocumentUniqueFieldStructMap_ChapterInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DocumentUniqueFieldStructMap_ChapterInfo) ProtoMessage() {}

func (x *DocumentUniqueFieldStructMap_ChapterInfo) ProtoReflect() protoreflect.Message {
	mi := &file_tableau_protobuf_unittest_unittest_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DocumentUniqueFieldStructMap_ChapterInfo.ProtoReflect.Descriptor instead.
func (*DocumentUniqueFieldStructMap_ChapterInfo) Descriptor() ([]byte, []int) {
	return file_tableau_protobuf_unittest_unittest_proto_rawDescGZIP(), []int{15, 5}
}

func (x *DocumentUniqueFieldStructMap_ChapterInfo) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *DocumentUniqueFieldStructMap_ChapterInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DocumentUniqueFieldStructMap_ChapterInfo) GetSection() map[string]*DocumentUniqueFieldStructMap_ChapterInfo_Section {
	if x != nil {
		return x.Section
	}
	return nil
}

type DocumentUniqueFieldStructMap_Chapter_Section struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key  string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DocumentUniqueFieldStructMap_Chapter_Section) Reset() {
	*x = DocumentUniqueFieldStructMap_Chapter_Section{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tableau_protobuf_unittest_unittest_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DocumentUniqueFieldStructMap_Chapter_Section) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DocumentUniqueFieldStructMap_Chapter_Section) ProtoMessage() {}

func (x *DocumentUniqueFieldStructMap_Chapter_Section) ProtoReflect() protoreflect.Message {
	mi := &file_tableau_protobuf_unittest_unittest_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DocumentUniqueFieldStructMap_Chapter_Section.ProtoReflect.Descriptor instead.
func (*DocumentUniqueFieldStructMap_Chapter_Section) Descriptor() ([]byte, []int) {
	return file_tableau_protobuf_unittest_unittest_proto_rawDescGZIP(), []int{15, 1, 1}
}

func (x *DocumentUniqueFieldStructMap_Chapter_Section) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *DocumentUniqueFieldStructMap_Chapter_Section) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type DocumentUniqueFieldStructMap_ChapterInfo_Section struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key     string                                                               `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Name    string                                                               `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Section map[string]*DocumentUniqueFieldStructMap_ChapterInfo_Section_Section `protobuf:"bytes,3,rep,name=section,proto3" json:"section,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *DocumentUniqueFieldStructMap_ChapterInfo_Section) Reset() {
	*x = DocumentUniqueFieldStructMap_ChapterInfo_Section{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tableau_protobuf_unittest_unittest_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DocumentUniqueFieldStructMap_ChapterInfo_Section) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DocumentUniqueFieldStructMap_ChapterInfo_Section) ProtoMessage() {}

func (x *DocumentUniqueFieldStructMap_ChapterInfo_Section) ProtoReflect() protoreflect.Message {
	mi := &file_tableau_protobuf_unittest_unittest_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DocumentUniqueFieldStructMap_ChapterInfo_Section.ProtoReflect.Descriptor instead.
func (*DocumentUniqueFieldStructMap_ChapterInfo_Section) Descriptor() ([]byte, []int) {
	return file_tableau_protobuf_unittest_unittest_proto_rawDescGZIP(), []int{15, 5, 1}
}

func (x *DocumentUniqueFieldStructMap_ChapterInfo_Section) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *DocumentUniqueFieldStructMap_ChapterInfo_Section) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DocumentUniqueFieldStructMap_ChapterInfo_Section) GetSection() map[string]*DocumentUniqueFieldStructMap_ChapterInfo_Section_Section {
	if x != nil {
		return x.Section
	}
	return nil
}

type DocumentUniqueFieldStructMap_ChapterInfo_Section_Section struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key     string                                                                       `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Name    string                                                                       `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Section map[string]*DocumentUniqueFieldStructMap_ChapterInfo_Section_Section_Section `protobuf:"bytes,3,rep,name=section,proto3" json:"section,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *DocumentUniqueFieldStructMap_ChapterInfo_Section_Section) Reset() {
	*x = DocumentUniqueFieldStructMap_ChapterInfo_Section_Section{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tableau_protobuf_unittest_unittest_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DocumentUniqueFieldStructMap_ChapterInfo_Section_Section) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DocumentUniqueFieldStructMap_ChapterInfo_Section_Section) ProtoMessage() {}

func (x *DocumentUniqueFieldStructMap_ChapterInfo_Section_Section) ProtoReflect() protoreflect.Message {
	mi := &file_tableau_protobuf_unittest_unittest_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DocumentUniqueFieldStructMap_ChapterInfo_Section_Section.ProtoReflect.Descriptor instead.
func (*DocumentUniqueFieldStructMap_ChapterInfo_Section_Section) Descriptor() ([]byte, []int) {
	return file_tableau_protobuf_unittest_unittest_proto_rawDescGZIP(), []int{15, 5, 1, 1}
}

func (x *DocumentUniqueFieldStructMap_ChapterInfo_Section_Section) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *DocumentUniqueFieldStructMap_ChapterInfo_Section_Section) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DocumentUniqueFieldStructMap_ChapterInfo_Section_Section) GetSection() map[string]*DocumentUniqueFieldStructMap_ChapterInfo_Section_Section_Section {
	if x != nil {
		return x.Section
	}
	return nil
}

type DocumentUniqueFieldStructMap_ChapterInfo_Section_Section_Section struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key  string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DocumentUniqueFieldStructMap_ChapterInfo_Section_Section_Section) Reset() {
	*x = DocumentUniqueFieldStructMap_ChapterInfo_Section_Section_Section{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tableau_protobuf_unittest_unittest_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DocumentUniqueFieldStructMap_ChapterInfo_Section_Section_Section) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DocumentUniqueFieldStructMap_ChapterInfo_Section_Section_Section) ProtoMessage() {}

func (x *DocumentUniqueFieldStructMap_ChapterInfo_Section_Section_Section) ProtoReflect() protoreflect.Message {
	mi := &file_tableau_protobuf_unittest_unittest_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DocumentUniqueFieldStructMap_ChapterInfo_Section_Section_Section.ProtoReflect.Descriptor instead.
func (*DocumentUniqueFieldStructMap_ChapterInfo_Section_Section_Section) Descriptor() ([]byte, []int) {
	return file_tableau_protobuf_unittest_unittest_proto_rawDescGZIP(), []int{15, 5, 1, 1, 1}
}

func (x *DocumentUniqueFieldStructMap_ChapterInfo_Section_Section_Section) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *DocumentUniqueFieldStructMap_ChapterInfo_Section_Section_Section) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

var File_tableau_protobuf_unittest_unittest_proto protoreflect.FileDescriptor

var file_tableau_protobuf_unittest_unittest_proto_rawDesc = []byte{
	0x0a, 0x28, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x61, 0x75, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x75, 0x6e, 0x69, 0x74, 0x74, 0x65, 0x73, 0x74, 0x2f, 0x75, 0x6e, 0x69, 0x74,
	0x74, 0x65, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x75, 0x6e, 0x69, 0x74,
	0x74, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x61, 0x75, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x61, 0x75, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x26, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x61, 0x75, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x75, 0x6e, 0x69, 0x74, 0x74, 0x65, 0x73, 0x74,
	0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xbd, 0x01,
	0x0a, 0x0f, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x49, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x4d, 0x61,
	0x70, 0x12, 0x4f, 0x0a, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x75, 0x6e, 0x69, 0x74, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x53,
	0x69, 0x6d, 0x70, 0x6c, 0x65, 0x49, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x4d, 0x61, 0x70, 0x2e, 0x49,
	0x74, 0x65, 0x6d, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x0c, 0x82, 0xb5, 0x18,
	0x08, 0x0a, 0x04, 0x49, 0x74, 0x65, 0x6d, 0x20, 0x03, 0x52, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x4d,
	0x61, 0x70, 0x1a, 0x3a, 0x0a, 0x0c, 0x49, 0x74, 0x65, 0x6d, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x3a, 0x1d,
	0x82, 0xb5, 0x18, 0x19, 0x0a, 0x0f, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x49, 0x6e, 0x63, 0x65,
	0x6c, 0x6c, 0x4d, 0x61, 0x70, 0x10, 0x01, 0x18, 0x02, 0x20, 0x03, 0x28, 0x04, 0x22, 0xf0, 0x05,
	0x0a, 0x09, 0x49, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x4d, 0x61, 0x70, 0x12, 0x52, 0x0a, 0x09, 0x66,
	0x72, 0x75, 0x69, 0x74, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x75, 0x6e, 0x69, 0x74, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x49, 0x6e, 0x63, 0x65, 0x6c, 0x6c,
	0x4d, 0x61, 0x70, 0x2e, 0x46, 0x72, 0x75, 0x69, 0x74, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x42, 0x12, 0x82, 0xb5, 0x18, 0x0e, 0x0a, 0x05, 0x46, 0x72, 0x75, 0x69, 0x74, 0x1a, 0x03,
	0x4b, 0x65, 0x79, 0x20, 0x03, 0x52, 0x08, 0x66, 0x72, 0x75, 0x69, 0x74, 0x4d, 0x61, 0x70, 0x12,
	0x51, 0x0a, 0x0a, 0x66, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x75, 0x6e, 0x69, 0x74, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x49,
	0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x4d, 0x61, 0x70, 0x2e, 0x46, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x4d,
	0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x0e, 0x82, 0xb5, 0x18, 0x0a, 0x0a, 0x06, 0x46,
	0x6c, 0x61, 0x76, 0x6f, 0x72, 0x20, 0x03, 0x52, 0x09, 0x66, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x4d,
	0x61, 0x70, 0x12, 0x4e, 0x0a, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x75, 0x6e, 0x69, 0x74, 0x74, 0x65, 0x73, 0x74, 0x2e,
	0x49, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x4d, 0x61, 0x70, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x4d, 0x61,
	0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x11, 0x82, 0xb5, 0x18, 0x0d, 0x0a, 0x04, 0x49, 0x74,
	0x65, 0x6d, 0x1a, 0x03, 0x4b, 0x65, 0x79, 0x20, 0x03, 0x52, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x4d,
	0x61, 0x70, 0x1a, 0x56, 0x0a, 0x0d, 0x46, 0x72, 0x75, 0x69, 0x74, 0x4d, 0x61, 0x70, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x75, 0x6e, 0x69, 0x74, 0x74, 0x65, 0x73, 0x74, 0x2e,
	0x49, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x4d, 0x61, 0x70, 0x2e, 0x46, 0x72, 0x75, 0x69, 0x74, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x5c, 0x0a, 0x05, 0x46, 0x72,
	0x75, 0x69, 0x74, 0x12, 0x30, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x13, 0x2e, 0x75, 0x6e, 0x69, 0x74, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x46, 0x72, 0x75, 0x69,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x42, 0x09, 0x82, 0xb5, 0x18, 0x05, 0x0a, 0x03, 0x4b, 0x65, 0x79,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x21, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x42, 0x0b, 0x82, 0xb5, 0x18, 0x07, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x53, 0x0a, 0x0e, 0x46, 0x6c, 0x61, 0x76,
	0x6f, 0x72, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2b, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x75, 0x6e,
	0x69, 0x74, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x46, 0x72, 0x75, 0x69, 0x74, 0x46, 0x6c, 0x61, 0x76,
	0x6f, 0x72, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x54, 0x0a,
	0x0c, 0x49, 0x74, 0x65, 0x6d, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x2e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x75, 0x6e, 0x69, 0x74, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x49, 0x6e, 0x63, 0x65, 0x6c, 0x6c,
	0x4d, 0x61, 0x70, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x72, 0x0a, 0x04, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x30, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x75, 0x6e, 0x69, 0x74, 0x74,
	0x65, 0x73, 0x74, 0x2e, 0x46, 0x72, 0x75, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x42, 0x09, 0x82,
	0xb5, 0x18, 0x05, 0x0a, 0x03, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x38, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x75,
	0x6e, 0x69, 0x74, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x46, 0x72, 0x75, 0x69, 0x74, 0x46, 0x6c, 0x61,
	0x76, 0x6f, 0x72, 0x42, 0x0b, 0x82, 0xb5, 0x18, 0x07, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x17, 0x82, 0xb5, 0x18, 0x13, 0x0a, 0x09, 0x49,
	0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x4d, 0x61, 0x70, 0x10, 0x01, 0x18, 0x02, 0x20, 0x03, 0x28, 0x04,
	0x22, 0x6d, 0x0a, 0x10, 0x49, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x09, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x75, 0x6e, 0x69, 0x74, 0x74, 0x65,
	0x73, 0x74, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x0c, 0x82, 0xb5, 0x18, 0x08, 0x0a, 0x04, 0x49,
	0x74, 0x65, 0x6d, 0x20, 0x03, 0x52, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x3a,
	0x1e, 0x82, 0xb5, 0x18, 0x1a, 0x0a, 0x10, 0x49, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x10, 0x01, 0x18, 0x02, 0x20, 0x03, 0x28, 0x04, 0x22,
	0xd7, 0x01, 0x0a, 0x0a, 0x49, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2c,
	0x0a, 0x0a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x05, 0x42, 0x0d, 0x82, 0xb5, 0x18, 0x09, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x20,
	0x03, 0x52, 0x09, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x46, 0x0a, 0x0b,
	0x66, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0e, 0x32, 0x15, 0x2e, 0x75, 0x6e, 0x69, 0x74, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x46, 0x72, 0x75,
	0x69, 0x74, 0x46, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x42, 0x0e, 0x82, 0xb5, 0x18, 0x0a, 0x0a, 0x06,
	0x46, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x20, 0x03, 0x52, 0x0a, 0x66, 0x6c, 0x61, 0x76, 0x6f, 0x72,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x09, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x75, 0x6e, 0x69, 0x74, 0x74, 0x65,
	0x73, 0x74, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x0c, 0x82, 0xb5, 0x18, 0x08, 0x0a, 0x04, 0x49,
	0x74, 0x65, 0x6d, 0x20, 0x03, 0x52, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x3a,
	0x18, 0x82, 0xb5, 0x18, 0x14, 0x0a, 0x0a, 0x49, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x4c, 0x69, 0x73,
	0x74, 0x10, 0x01, 0x18, 0x02, 0x20, 0x03, 0x28, 0x04, 0x22, 0xba, 0x01, 0x0a, 0x08, 0x49, 0x74,
	0x65, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x12, 0x4a, 0x0a, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x6d,
	0x61, 0x70, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x75, 0x6e, 0x69, 0x74, 0x74,
	0x65, 0x73, 0x74, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x2e, 0x49, 0x74, 0x65,
	0x6d, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x0e, 0x82, 0xb5, 0x18, 0x0a, 0x1a,
	0x02, 0x49, 0x44, 0x20, 0x01, 0x7a, 0x02, 0x20, 0x01, 0x52, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x4d,
	0x61, 0x70, 0x1a, 0x4a, 0x0a, 0x0c, 0x49, 0x74, 0x65, 0x6d, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x24, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x75, 0x6e, 0x69, 0x74, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x49,
	0x74, 0x65, 0x6d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x3a, 0x16,
	0x82, 0xb5, 0x18, 0x12, 0x0a, 0x08, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x10, 0x01,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x04, 0x22, 0xfa, 0x03, 0x0a, 0x08, 0x4d, 0x61, 0x6c, 0x6c, 0x43,
	0x6f, 0x6e, 0x66, 0x12, 0x4a, 0x0a, 0x08, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x6d, 0x61, 0x70, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x75, 0x6e, 0x69, 0x74, 0x74, 0x65, 0x73, 0x74,
	0x2e, 0x4d, 0x61, 0x6c, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x2e, 0x53, 0x68, 0x6f, 0x70, 0x4d, 0x61,
	0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x0e, 0x82, 0xb5, 0x18, 0x0a, 0x1a, 0x06, 0x53, 0x68,
	0x6f, 0x70, 0x49, 0x44, 0x20, 0x01, 0x52, 0x07, 0x73, 0x68, 0x6f, 0x70, 0x4d, 0x61, 0x70, 0x1a,
	0x53, 0x0a, 0x0c, 0x53, 0x68, 0x6f, 0x70, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x2d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x75, 0x6e, 0x69, 0x74, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x61, 0x6c, 0x6c,
	0x43, 0x6f, 0x6e, 0x66, 0x2e, 0x53, 0x68, 0x6f, 0x70, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0xb4, 0x02, 0x0a, 0x04, 0x53, 0x68, 0x6f, 0x70, 0x12, 0x25, 0x0a,
	0x07, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0c,
	0x82, 0xb5, 0x18, 0x08, 0x0a, 0x06, 0x53, 0x68, 0x6f, 0x70, 0x49, 0x44, 0x52, 0x06, 0x73, 0x68,
	0x6f, 0x70, 0x49, 0x64, 0x12, 0x53, 0x0a, 0x09, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6d, 0x61,
	0x70, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x75, 0x6e, 0x69, 0x74, 0x74, 0x65,
	0x73, 0x74, 0x2e, 0x4d, 0x61, 0x6c, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x2e, 0x53, 0x68, 0x6f, 0x70,
	0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x0f,
	0x82, 0xb5, 0x18, 0x0b, 0x1a, 0x07, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x49, 0x44, 0x20, 0x01, 0x52,
	0x08, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x4d, 0x61, 0x70, 0x1a, 0x5a, 0x0a, 0x0d, 0x47, 0x6f, 0x6f,
	0x64, 0x73, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x33, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x75, 0x6e,
	0x69, 0x74, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x61, 0x6c, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x2e,
	0x53, 0x68, 0x6f, 0x70, 0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x54, 0x0a, 0x05, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x12, 0x28,
	0x0a, 0x08, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x0d, 0x82, 0xb5, 0x18, 0x09, 0x0a, 0x07, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x49, 0x44, 0x52,
	0x07, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0b, 0x82, 0xb5, 0x18, 0x07, 0x0a, 0x05, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x3a, 0x16, 0x82, 0xb5, 0x18,
	0x12, 0x0a, 0x08, 0x4d, 0x61, 0x6c, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x10, 0x01, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x04, 0x22, 0xb2, 0x03, 0x0a, 0x0a, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x43, 0x6f,
	0x6e, 0x66, 0x12, 0x54, 0x0a, 0x0a, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x6d, 0x61, 0x70,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x75, 0x6e, 0x69, 0x74, 0x74, 0x65, 0x73,
	0x74, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x2e, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x10, 0x82, 0xb5, 0x18,
	0x0c, 0x1a, 0x08, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x49, 0x44, 0x20, 0x01, 0x52, 0x09, 0x72,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x4d, 0x61, 0x70, 0x1a, 0x59, 0x0a, 0x0e, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x31, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x75, 0x6e,
	0x69, 0x74, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e,
	0x66, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0xd8, 0x01, 0x0a, 0x06, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x2b,
	0x0a, 0x09, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x0e, 0x82, 0xb5, 0x18, 0x0a, 0x0a, 0x08, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x49,
	0x44, 0x52, 0x08, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x55, 0x0a, 0x08, 0x69,
	0x74, 0x65, 0x6d, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x75, 0x6e, 0x69, 0x74, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x43,
	0x6f, 0x6e, 0x66, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x4d,
	0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x10, 0x82, 0xb5, 0x18, 0x0c, 0x0a, 0x04, 0x49,
	0x74, 0x65, 0x6d, 0x1a, 0x02, 0x49, 0x44, 0x20, 0x02, 0x52, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x4d,
	0x61, 0x70, 0x1a, 0x4a, 0x0a, 0x0c, 0x49, 0x74, 0x65, 0x6d, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x24, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x75, 0x6e, 0x69, 0x74, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x49,
	0x74, 0x65, 0x6d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x3a, 0x18,
	0x82, 0xb5, 0x18, 0x14, 0x0a, 0x0a, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x66,
	0x10, 0x01, 0x18, 0x02, 0x20, 0x03, 0x28, 0x04, 0x22, 0xd5, 0x02, 0x0a, 0x0e, 0x59, 0x61, 0x6d,
	0x6c, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x12, 0x18, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x08, 0x82, 0xb5, 0x18, 0x04, 0x0a, 0x02, 0x49,
	0x44, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x42, 0x09, 0x82, 0xb5, 0x18, 0x05, 0x0a, 0x03, 0x4e, 0x75, 0x6d, 0x52, 0x03, 0x6e,
	0x75, 0x6d, 0x12, 0x21, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x42, 0x0b, 0x82, 0xb5, 0x18, 0x07, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x24, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x42, 0x0c, 0x82, 0xb5, 0x18, 0x08, 0x0a, 0x06, 0x57, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x30, 0x0a, 0x0a, 0x70,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x42,
	0x10, 0x82, 0xb5, 0x18, 0x0c, 0x0a, 0x0a, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67,
	0x65, 0x52, 0x0a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x21, 0x0a,
	0x05, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x42, 0x0b, 0x82, 0xb5,
	0x18, 0x07, 0x0a, 0x05, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x52, 0x05, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x12, 0x1e, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a,
	0x82, 0xb5, 0x18, 0x06, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x1e, 0x0a, 0x04, 0x62, 0x6c, 0x6f, 0x62, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x0a,
	0x82, 0xb5, 0x18, 0x06, 0x0a, 0x04, 0x42, 0x6c, 0x6f, 0x62, 0x52, 0x04, 0x62, 0x6c, 0x6f, 0x62,
	0x12, 0x18, 0x0a, 0x02, 0x6f, 0x6b, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x42, 0x08, 0x82, 0xb5,
	0x18, 0x04, 0x0a, 0x02, 0x4f, 0x4b, 0x52, 0x02, 0x6f, 0x6b, 0x3a, 0x14, 0x82, 0xb5, 0x18, 0x10,
	0x0a, 0x0e, 0x59, 0x61, 0x6d, 0x6c, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x43, 0x6f, 0x6e, 0x66,
	0x22, 0x83, 0x01, 0x0a, 0x10, 0x50, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x12, 0x1e, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0a, 0x82, 0xb5, 0x18, 0x06, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x0a, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x42, 0x0d, 0x82, 0xb5, 0x18, 0x09, 0x0a,
	0x05, 0x50, 0x72, 0x69, 0x63, 0x65, 0x20, 0x03, 0x52, 0x09, 0x70, 0x72, 0x69, 0x63, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x3a, 0x21, 0x82, 0xb5, 0x18, 0x1d, 0x0a, 0x10, 0x50, 0x61, 0x74, 0x63, 0x68,
	0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x10, 0x01, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x04, 0xa0, 0x01, 0x01, 0x22, 0xcc, 0x06, 0x0a, 0x0e, 0x50, 0x61, 0x74, 0x63, 0x68,
	0x4d, 0x65, 0x72, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x12, 0x1e, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x82, 0xb5, 0x18, 0x06, 0x0a, 0x04, 0x4e,
	0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x05, 0x6e, 0x61, 0x6d,
	0x65, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0x82, 0xb5, 0x18, 0x07, 0x0a, 0x05,
	0x4e, 0x61, 0x6d, 0x65, 0x32, 0x52, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x32, 0x12, 0x26, 0x0a, 0x05,
	0x6e, 0x61, 0x6d, 0x65, 0x33, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0x82, 0xb5, 0x18,
	0x07, 0x0a, 0x05, 0x4e, 0x61, 0x6d, 0x65, 0x33, 0x48, 0x00, 0x52, 0x05, 0x6e, 0x61, 0x6d, 0x65,
	0x33, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x75, 0x6e, 0x69, 0x74, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x61,
	0x74, 0x63, 0x68, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x42, 0x0a, 0x82, 0xb5, 0x18, 0x06, 0x0a, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x04, 0x74,
	0x69, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x0a, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x05, 0x42, 0x0d, 0x82, 0xb5, 0x18, 0x09, 0x0a, 0x05, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x20, 0x03, 0x52, 0x09, 0x70, 0x72, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x46, 0x0a, 0x12, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x05, 0x42, 0x18, 0x82,
	0xb5, 0x18, 0x14, 0x0a, 0x0c, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x20, 0x03, 0x7a, 0x02, 0x60, 0x01, 0x52, 0x10, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x52, 0x0a, 0x08, 0x69, 0x74, 0x65,
	0x6d, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x75, 0x6e,
	0x69, 0x74, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x65, 0x72, 0x67,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x42, 0x10, 0x82, 0xb5, 0x18, 0x0c, 0x0a, 0x04, 0x49, 0x74, 0x65, 0x6d, 0x1a, 0x02,
	0x49, 0x44, 0x20, 0x02, 0x52, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x4d, 0x61, 0x70, 0x12, 0x73, 0x0a,
	0x10, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x6d, 0x61,
	0x70, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x75, 0x6e, 0x69, 0x74, 0x74, 0x65,
	0x73, 0x74, 0x2e, 0x50, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x4d, 0x61, 0x70,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x1b, 0x82, 0xb5, 0x18, 0x17, 0x0a, 0x0b, 0x52, 0x65, 0x70,
	0x6c, 0x61, 0x63, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x1a, 0x02, 0x49, 0x44, 0x20, 0x02, 0x7a, 0x02,
	0x60, 0x01, 0x52, 0x0e, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x4d,
	0x61, 0x70, 0x1a, 0x86, 0x01, 0x0a, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0b, 0x82, 0xb5, 0x18, 0x07, 0x0a, 0x05, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x3f, 0x0a, 0x06, 0x65, 0x78,
	0x70, 0x69, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0c, 0x82, 0xb5, 0x18, 0x08, 0x0a, 0x06, 0x45, 0x78, 0x70,
	0x69, 0x72, 0x79, 0x52, 0x06, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x1a, 0x4a, 0x0a, 0x0c, 0x49,
	0x74, 0x65, 0x6d, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x24, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x75,
	0x6e, 0x69, 0x74, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x51, 0x0a, 0x13, 0x52, 0x65, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x24, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x75, 0x6e, 0x69, 0x74, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x3a, 0x1f, 0x82, 0xb5, 0x18, 0x1b,
	0x0a, 0x0e, 0x50, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x10, 0x01, 0x18, 0x02, 0x20, 0x03, 0x28, 0x04, 0xa0, 0x01, 0x02, 0x42, 0x08, 0x0a, 0x06, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x33, 0x22, 0xaa, 0x0b, 0x0a, 0x12, 0x52, 0x65, 0x63, 0x75, 0x72, 0x73,
	0x69, 0x76, 0x65, 0x50, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x12, 0x54, 0x0a, 0x08,
	0x73, 0x68, 0x6f, 0x70, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x75, 0x6e, 0x69, 0x74, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x63, 0x75, 0x72, 0x73,
	0x69, 0x76, 0x65, 0x50, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x2e, 0x53, 0x68, 0x6f,
	0x70, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x0e, 0x82, 0xb5, 0x18, 0x0a, 0x1a,
	0x06, 0x53, 0x68, 0x6f, 0x70, 0x49, 0x44, 0x20, 0x01, 0x52, 0x07, 0x73, 0x68, 0x6f, 0x70, 0x4d,
	0x61, 0x70, 0x1a, 0x5d, 0x0a, 0x0c, 0x53, 0x68, 0x6f, 0x70, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x37, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x75, 0x6e, 0x69, 0x74, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x52,
	0x65, 0x63, 0x75, 0x72, 0x73, 0x69, 0x76, 0x65, 0x50, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6e,
	0x66, 0x2e, 0x53, 0x68, 0x6f, 0x70, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0xb9, 0x09, 0x0a, 0x04, 0x53, 0x68, 0x6f, 0x70, 0x12, 0x25, 0x0a, 0x07, 0x73, 0x68,
	0x6f, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0c, 0x82, 0xb5, 0x18,
	0x08, 0x0a, 0x06, 0x53, 0x68, 0x6f, 0x70, 0x49, 0x44, 0x52, 0x06, 0x73, 0x68, 0x6f, 0x70, 0x49,
	0x64, 0x12, 0x5d, 0x0a, 0x09, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x75, 0x6e, 0x69, 0x74, 0x74, 0x65, 0x73, 0x74, 0x2e,
	0x52, 0x65, 0x63, 0x75, 0x72, 0x73, 0x69, 0x76, 0x65, 0x50, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f,
	0x6e, 0x66, 0x2e, 0x53, 0x68, 0x6f, 0x70, 0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x4d, 0x61, 0x70,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x0f, 0x82, 0xb5, 0x18, 0x0b, 0x1a, 0x07, 0x47, 0x6f, 0x6f,
	0x64, 0x73, 0x49, 0x44, 0x20, 0x01, 0x52, 0x08, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x4d, 0x61, 0x70,
	0x1a, 0x64, 0x0a, 0x0d, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x3d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x75, 0x6e, 0x69, 0x74, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x65,
	0x63, 0x75, 0x72, 0x73, 0x69, 0x76, 0x65, 0x50, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x66,
	0x2e, 0x53, 0x68, 0x6f, 0x70, 0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0xc4, 0x07, 0x0a, 0x05, 0x47, 0x6f, 0x6f, 0x64, 0x73,
	0x12, 0x28, 0x0a, 0x08, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x0d, 0x82, 0xb5, 0x18, 0x09, 0x0a, 0x07, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x49,
	0x44, 0x52, 0x07, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x04, 0x64, 0x65,
	0x73, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x0a, 0x82, 0xb5, 0x18, 0x06, 0x0a, 0x04,
	0x44, 0x65, 0x73, 0x63, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x73, 0x0a, 0x0c, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x38, 0x2e, 0x75, 0x6e, 0x69, 0x74, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x63, 0x75,
	0x72, 0x73, 0x69, 0x76, 0x65, 0x50, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x2e, 0x53,
	0x68, 0x6f, 0x70, 0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x16, 0x82, 0xb5, 0x18, 0x12,
	0x0a, 0x08, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x1a, 0x04, 0x54, 0x79, 0x70, 0x65,
	0x20, 0x02, 0x52, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x4d, 0x61, 0x70, 0x12,
	0x2a, 0x0a, 0x08, 0x74, 0x61, 0x67, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0c, 0x42, 0x0f, 0x82, 0xb5, 0x18, 0x0b, 0x0a, 0x03, 0x54, 0x61, 0x67, 0x20, 0x02, 0x7a, 0x02,
	0x60, 0x01, 0x52, 0x07, 0x74, 0x61, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x5b, 0x0a, 0x0a, 0x61,
	0x77, 0x61, 0x72, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2d, 0x2e, 0x75, 0x6e, 0x69, 0x74, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x63, 0x75, 0x72,
	0x73, 0x69, 0x76, 0x65, 0x50, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x2e, 0x53, 0x68,
	0x6f, 0x70, 0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x2e, 0x41, 0x77, 0x61, 0x72, 0x64, 0x42, 0x0d,
	0x82, 0xb5, 0x18, 0x09, 0x0a, 0x05, 0x41, 0x77, 0x61, 0x72, 0x64, 0x20, 0x02, 0x52, 0x09, 0x61,
	0x77, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x1a, 0x70, 0x0a, 0x10, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x46,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e,
	0x75, 0x6e, 0x69, 0x74, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x63, 0x75, 0x72, 0x73, 0x69,
	0x76, 0x65, 0x50, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x2e, 0x53, 0x68, 0x6f, 0x70,
	0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0xc0, 0x03, 0x0a, 0x08, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x1e, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0a, 0x82, 0xb5, 0x18, 0x06, 0x0a, 0x04, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x30, 0x0a, 0x0a, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x42, 0x11, 0x82, 0xb5, 0x18,
	0x0d, 0x0a, 0x05, 0x50, 0x72, 0x69, 0x63, 0x65, 0x20, 0x03, 0x7a, 0x02, 0x60, 0x01, 0x52, 0x09,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x6d, 0x0a, 0x0a, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e,
	0x75, 0x6e, 0x69, 0x74, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x63, 0x75, 0x72, 0x73, 0x69,
	0x76, 0x65, 0x50, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x2e, 0x53, 0x68, 0x6f, 0x70,
	0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x0d,
	0x82, 0xb5, 0x18, 0x09, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x03, 0x52, 0x09, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x75, 0x0a, 0x0c, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x41,
	0x2e, 0x75, 0x6e, 0x69, 0x74, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x63, 0x75, 0x72, 0x73,
	0x69, 0x76, 0x65, 0x50, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x2e, 0x53, 0x68, 0x6f,
	0x70, 0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x42, 0x0f, 0x82, 0xb5, 0x18, 0x0b, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x20, 0x03, 0x52, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x1a,
	0x3c, 0x0a, 0x0e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3e, 0x0a,
	0x10, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3e, 0x0a,
	0x05, 0x41, 0x77, 0x61, 0x72, 0x64, 0x12, 0x18, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x08, 0x82, 0xb5, 0x18, 0x04, 0x0a, 0x02, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x1b, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x09, 0x82,
	0xb5, 0x18, 0x05, 0x0a, 0x03, 0x4e, 0x75, 0x6d, 0x52, 0x03, 0x6e, 0x75, 0x6d, 0x3a, 0x23, 0x82,
	0xb5, 0x18, 0x1f, 0x0a, 0x12, 0x52, 0x65, 0x63, 0x75, 0x72, 0x73, 0x69, 0x76, 0x65, 0x50, 0x61,
	0x74, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x10, 0x01, 0x18, 0x02, 0x20, 0x03, 0x28, 0x04, 0xa0,
	0x01, 0x02, 0x22, 0xa6, 0x02, 0x0a, 0x10, 0x4a, 0x73, 0x6f, 0x6e, 0x55, 0x74, 0x69, 0x6c, 0x54,
	0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3b, 0x0a, 0x0c, 0x6e, 0x6f, 0x72, 0x6d, 0x61,
	0x6c, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x75, 0x6e, 0x69, 0x74, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x65,
	0x72, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x52, 0x0b, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x12, 0x37, 0x0a, 0x0a, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x75, 0x6e, 0x69, 0x74, 0x74,
	0x65, 0x73, 0x74, 0x2e, 0x50, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x52, 0x09, 0x6c, 0x69, 0x73, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x45, 0x0a,
	0x09, 0x6d, 0x61, 0x70, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x75, 0x6e, 0x69, 0x74, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x4a, 0x73, 0x6f, 0x6e,
	0x55, 0x74, 0x69, 0x6c, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x61, 0x70,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x61, 0x70, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x1a, 0x55, 0x0a, 0x0d, 0x4d, 0x61, 0x70, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x75, 0x6e, 0x69, 0x74, 0x74, 0x65, 0x73,
	0x74, 0x2e, 0x50, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x87, 0x02, 0x0a, 0x1f,
	0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x6e, 0x56, 0x65, 0x72,
	0x74, 0x69, 0x63, 0x61, 0x6c, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x53, 0x0a, 0x09, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x75, 0x6e, 0x69, 0x74, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x55, 0x6e,
	0x69, 0x71, 0x75, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x6e, 0x56, 0x65, 0x72, 0x74, 0x69,
	0x63, 0x61, 0x6c, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x2e, 0x49, 0x74,
	0x65, 0x6d, 0x42, 0x06, 0x82, 0xb5, 0x18, 0x02, 0x20, 0x01, 0x52, 0x08, 0x69, 0x74, 0x65, 0x6d,
	0x4c, 0x69, 0x73, 0x74, 0x1a, 0x68, 0x0a, 0x04, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x1c, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0c, 0x82, 0xb5, 0x18, 0x08, 0x0a, 0x02,
	0x49, 0x44, 0x7a, 0x02, 0x10, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0e, 0x82, 0xb5, 0x18, 0x0a, 0x0a, 0x04,
	0x4e, 0x61, 0x6d, 0x65, 0x7a, 0x02, 0x10, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e,
	0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x82, 0xb5,
	0x18, 0x06, 0x0a, 0x04, 0x44, 0x65, 0x73, 0x63, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x3a, 0x25,
	0x82, 0xb5, 0x18, 0x21, 0x0a, 0x1f, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x49, 0x6e, 0x56, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xc0, 0x06, 0x0a, 0x1c, 0x56, 0x65, 0x72, 0x74, 0x69, 0x63,
	0x61, 0x6c, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x4d, 0x61, 0x70, 0x12, 0x5e, 0x0a, 0x08, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x6d,
	0x61, 0x70, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x75, 0x6e, 0x69, 0x74, 0x74,
	0x65, 0x73, 0x74, 0x2e, 0x56, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x55, 0x6e, 0x69, 0x71,
	0x75, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x4d, 0x61, 0x70,
	0x2e, 0x4d, 0x61, 0x69, 0x6e, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x0e, 0x82,
	0xb5, 0x18, 0x0a, 0x1a, 0x06, 0x4d, 0x61, 0x69, 0x6e, 0x49, 0x44, 0x20, 0x01, 0x52, 0x07, 0x6d,
	0x61, 0x69, 0x6e, 0x4d, 0x61, 0x70, 0x1a, 0x67, 0x0a, 0x0c, 0x4d, 0x61, 0x69, 0x6e, 0x4d, 0x61,
	0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x41, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x75, 0x6e, 0x69, 0x74, 0x74, 0x65,
	0x73, 0x74, 0x2e, 0x56, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x55, 0x6e, 0x69, 0x71, 0x75,
	0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x4d, 0x61, 0x70, 0x2e,
	0x4d, 0x61, 0x69, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0xb2, 0x04, 0x0a, 0x04, 0x4d, 0x61, 0x69, 0x6e, 0x12, 0x25, 0x0a, 0x07, 0x6d, 0x61, 0x69, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0c, 0x82, 0xb5, 0x18, 0x08, 0x0a,
	0x06, 0x4d, 0x61, 0x69, 0x6e, 0x49, 0x44, 0x52, 0x06, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12,
	0x2f, 0x0a, 0x09, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x12, 0x82, 0xb5, 0x18, 0x0e, 0x0a, 0x08, 0x4d, 0x61, 0x69, 0x6e, 0x4e, 0x61,
	0x6d, 0x65, 0x7a, 0x02, 0x10, 0x01, 0x52, 0x08, 0x6d, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x6e, 0x0a, 0x0b, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x6b, 0x76, 0x5f, 0x6d, 0x61, 0x70, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x75, 0x6e, 0x69, 0x74, 0x74, 0x65, 0x73, 0x74,
	0x2e, 0x56, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x4d, 0x61, 0x70, 0x2e, 0x4d, 0x61,
	0x69, 0x6e, 0x2e, 0x4d, 0x61, 0x69, 0x6e, 0x4b, 0x76, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x42, 0x12, 0x82, 0xb5, 0x18, 0x0e, 0x0a, 0x06, 0x4d, 0x61, 0x69, 0x6e, 0x4b, 0x56, 0x20,
	0x03, 0x7a, 0x02, 0x58, 0x01, 0x52, 0x09, 0x6d, 0x61, 0x69, 0x6e, 0x4b, 0x76, 0x4d, 0x61, 0x70,
	0x12, 0x5f, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x37, 0x2e, 0x75, 0x6e, 0x69, 0x74, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x56, 0x65, 0x72,
	0x74, 0x69, 0x63, 0x61, 0x6c, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x4d, 0x61, 0x70, 0x2e, 0x4d, 0x61, 0x69, 0x6e, 0x2e, 0x53,
	0x75, 0x62, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x0d, 0x82, 0xb5, 0x18, 0x09,
	0x1a, 0x05, 0x53, 0x75, 0x62, 0x49, 0x44, 0x20, 0x01, 0x52, 0x06, 0x73, 0x75, 0x62, 0x4d, 0x61,
	0x70, 0x1a, 0x3c, 0x0a, 0x0e, 0x4d, 0x61, 0x69, 0x6e, 0x4b, 0x76, 0x4d, 0x61, 0x70, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x6a, 0x0a, 0x0b, 0x53, 0x75, 0x62, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x45, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2f, 0x2e, 0x75, 0x6e, 0x69, 0x74, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x56, 0x65, 0x72, 0x74, 0x69,
	0x63, 0x61, 0x6c, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x4d, 0x61, 0x70, 0x2e, 0x4d, 0x61, 0x69, 0x6e, 0x2e, 0x53, 0x75, 0x62,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x57, 0x0a, 0x03, 0x53,
	0x75, 0x62, 0x12, 0x22, 0x0a, 0x06, 0x73, 0x75, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x0b, 0x82, 0xb5, 0x18, 0x07, 0x0a, 0x05, 0x53, 0x75, 0x62, 0x49, 0x44, 0x52,
	0x05, 0x73, 0x75, 0x62, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x08, 0x73, 0x75, 0x62, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0x82, 0xb5, 0x18, 0x0d, 0x0a, 0x07,
	0x53, 0x75, 0x62, 0x4e, 0x61, 0x6d, 0x65, 0x7a, 0x02, 0x10, 0x01, 0x52, 0x07, 0x73, 0x75, 0x62,
	0x4e, 0x61, 0x6d, 0x65, 0x3a, 0x22, 0x82, 0xb5, 0x18, 0x1e, 0x0a, 0x1c, 0x56, 0x65, 0x72, 0x74,
	0x69, 0x63, 0x61, 0x6c, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x4d, 0x61, 0x70, 0x22, 0x83, 0x02, 0x0a, 0x1d, 0x44, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x56, 0x0a, 0x09, 0x69, 0x74,
	0x65, 0x6d, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e,
	0x75, 0x6e, 0x69, 0x74, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x0b, 0x82, 0xb5, 0x18,
	0x07, 0x0a, 0x05, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x52, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x4c, 0x69,
	0x73, 0x74, 0x1a, 0x65, 0x0a, 0x04, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x1c, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0c, 0x82, 0xb5, 0x18, 0x08, 0x0a, 0x02, 0x49, 0x44,
	0x7a, 0x02, 0x10, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0e, 0x82, 0xb5, 0x18, 0x0a, 0x0a, 0x04, 0x4e, 0x61,
	0x6d, 0x65, 0x7a, 0x02, 0x10, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x03,
	0x6e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x09, 0x82, 0xb5, 0x18, 0x05, 0x0a,
	0x03, 0x4e, 0x75, 0x6d, 0x52, 0x03, 0x6e, 0x75, 0x6d, 0x3a, 0x23, 0x82, 0xb5, 0x18, 0x1f, 0x0a,
	0x1d, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x9b,
	0x12, 0x0a, 0x1c, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x71, 0x75,
	0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x4d, 0x61, 0x70, 0x12,
	0x66, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x33, 0x2e, 0x75, 0x6e, 0x69, 0x74, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x44, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x4d, 0x61, 0x70, 0x2e, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x17, 0x82, 0xb5, 0x18, 0x13, 0x0a, 0x07, 0x43, 0x68, 0x61,
	0x70, 0x74, 0x65, 0x72, 0x1a, 0x04, 0x40, 0x6b, 0x65, 0x79, 0x7a, 0x02, 0x58, 0x01, 0x52, 0x07,
	0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x12, 0x69, 0x0a, 0x0a, 0x73, 0x63, 0x61, 0x6c, 0x61,
	0x72, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x75, 0x6e,
	0x69, 0x74, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x55,
	0x6e, 0x69, 0x71, 0x75, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x4d, 0x61, 0x70, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x42, 0x13, 0x82, 0xb5, 0x18, 0x0f, 0x0a, 0x09, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72,
	0x4d, 0x61, 0x70, 0x7a, 0x02, 0x58, 0x01, 0x52, 0x09, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x4d,
	0x61, 0x70, 0x12, 0x6b, 0x0a, 0x0a, 0x69, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x6d, 0x61, 0x70,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x75, 0x6e, 0x69, 0x74, 0x74, 0x65, 0x73,
	0x74, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x4d, 0x61, 0x70, 0x2e, 0x49,
	0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x15, 0x82,
	0xb5, 0x18, 0x11, 0x0a, 0x09, 0x49, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x4d, 0x61, 0x70, 0x20, 0x03,
	0x7a, 0x02, 0x58, 0x01, 0x52, 0x09, 0x69, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x4d, 0x61, 0x70, 0x12,
	0x77, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x75, 0x6e, 0x69, 0x74, 0x74, 0x65, 0x73, 0x74,
	0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x4d, 0x61, 0x70, 0x2e, 0x43, 0x68,
	0x61, 0x70, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x1b,
	0x82, 0xb5, 0x18, 0x17, 0x0a, 0x0b, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x1a, 0x04, 0x40, 0x6b, 0x65, 0x79, 0x7a, 0x02, 0x58, 0x01, 0x52, 0x0b, 0x63, 0x68, 0x61,
	0x70, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x6a, 0x0a, 0x0c, 0x43, 0x68, 0x61, 0x70,
	0x74, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x44, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x75, 0x6e, 0x69, 0x74,
	0x74, 0x65, 0x73, 0x74, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69,
	0x71, 0x75, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x4d, 0x61,
	0x70, 0x2e, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x80, 0x03, 0x0a, 0x07, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72,
	0x12, 0x20, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0e, 0x82,
	0xb5, 0x18, 0x0a, 0x0a, 0x04, 0x40, 0x6b, 0x65, 0x79, 0x7a, 0x02, 0x10, 0x01, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x22, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0e, 0x82, 0xb5, 0x18, 0x0a, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x7a, 0x02, 0x10, 0x01,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x6a, 0x0a, 0x07, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x75, 0x6e, 0x69, 0x74, 0x74, 0x65,
	0x73, 0x74, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x71, 0x75,
	0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x4d, 0x61, 0x70, 0x2e,
	0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x42, 0x13, 0x82, 0xb5, 0x18, 0x0f, 0x0a, 0x07, 0x53, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x1a, 0x04, 0x40, 0x6b, 0x65, 0x79, 0x52, 0x07, 0x73, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x1a, 0x72, 0x0a, 0x0c, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x4c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x75, 0x6e, 0x69, 0x74, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x44,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x4d, 0x61, 0x70, 0x2e, 0x43, 0x68, 0x61, 0x70,
	0x74, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x4f, 0x0a, 0x07, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x20, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0e,
	0x82, 0xb5, 0x18, 0x0a, 0x0a, 0x04, 0x40, 0x6b, 0x65, 0x79, 0x7a, 0x02, 0x10, 0x01, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x22, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0e, 0x82, 0xb5, 0x18, 0x0a, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x7a, 0x02, 0x10,
	0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0x3c, 0x0a, 0x0e, 0x53, 0x63, 0x61, 0x6c, 0x61,
	0x72, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3c, 0x0a, 0x0e, 0x49, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x4d,
	0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x72, 0x0a, 0x10, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x48, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x75, 0x6e, 0x69, 0x74, 0x74,
	0x65, 0x73, 0x74, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x71,
	0x75, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x4d, 0x61, 0x70,
	0x2e, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0xbe, 0x08, 0x0a, 0x0b, 0x43, 0x68, 0x61, 0x70,
	0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x20, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0e, 0x82, 0xb5, 0x18, 0x0a, 0x0a, 0x04, 0x40, 0x6b, 0x65, 0x79,
	0x7a, 0x02, 0x10, 0x01, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x22, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0e, 0x82, 0xb5, 0x18, 0x0a, 0x0a, 0x04, 0x4e,
	0x61, 0x6d, 0x65, 0x7a, 0x02, 0x10, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x72, 0x0a,
	0x07, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3f,
	0x2e, 0x75, 0x6e, 0x69, 0x74, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x4d, 0x61, 0x70, 0x2e, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x2e, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42,
	0x17, 0x82, 0xb5, 0x18, 0x13, 0x0a, 0x07, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x04,
	0x40, 0x6b, 0x65, 0x79, 0x7a, 0x02, 0x58, 0x01, 0x52, 0x07, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x1a, 0x76, 0x0a, 0x0c, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x50, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x75, 0x6e, 0x69, 0x74, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x4d, 0x61, 0x70, 0x2e, 0x43, 0x68, 0x61, 0x70, 0x74,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0xfc, 0x05, 0x0a, 0x07, 0x53, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0e, 0x82, 0xb5, 0x18, 0x0a, 0x0a, 0x04, 0x40, 0x6b, 0x65, 0x79, 0x7a, 0x02,
	0x10, 0x01, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x22, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0e, 0x82, 0xb5, 0x18, 0x0a, 0x0a, 0x04, 0x4e, 0x61, 0x6d,
	0x65, 0x7a, 0x02, 0x10, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x7a, 0x0a, 0x07, 0x73,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x75,
	0x6e, 0x69, 0x74, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x4d, 0x61, 0x70, 0x2e, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x2e, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x17, 0x82, 0xb5, 0x18, 0x13, 0x0a, 0x07, 0x53, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x04, 0x40, 0x6b, 0x65, 0x79, 0x7a, 0x02, 0x58, 0x01, 0x52, 0x07,
	0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x7e, 0x0a, 0x0c, 0x53, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x58, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x75, 0x6e, 0x69, 0x74, 0x74,
	0x65, 0x73, 0x74, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x71,
	0x75, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x4d, 0x61, 0x70,
	0x2e, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x53, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0xae, 0x03, 0x0a, 0x07, 0x53, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0e, 0x82, 0xb5, 0x18, 0x0a, 0x0a, 0x04, 0x40, 0x6b, 0x65, 0x79, 0x7a, 0x02, 0x10, 0x01,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x22, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0e, 0x82, 0xb5, 0x18, 0x0a, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x7a,
	0x02, 0x10, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x82, 0x01, 0x0a, 0x07, 0x73, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4f, 0x2e, 0x75, 0x6e,
	0x69, 0x74, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x55,
	0x6e, 0x69, 0x71, 0x75, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x4d, 0x61, 0x70, 0x2e, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x2e,
	0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x17, 0x82, 0xb5,
	0x18, 0x13, 0x0a, 0x07, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x04, 0x40, 0x6b, 0x65,
	0x79, 0x7a, 0x02, 0x58, 0x01, 0x52, 0x07, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x86,
	0x01, 0x0a, 0x0c, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x60, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x4a, 0x2e, 0x75, 0x6e, 0x69, 0x74, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x44, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x4d, 0x61, 0x70, 0x2e, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x4f, 0x0a, 0x07, 0x53, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0e, 0x82, 0xb5, 0x18, 0x0a, 0x0a, 0x04, 0x40, 0x6b, 0x65, 0x79, 0x7a, 0x02, 0x10, 0x01, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x22, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0e, 0x82, 0xb5, 0x18, 0x0a, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x7a, 0x02,
	0x10, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x3a, 0x22, 0x82, 0xb5, 0x18, 0x1e, 0x0a, 0x1c,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x4d, 0x61, 0x70, 0x42, 0x56, 0x82, 0xb5,
	0x18, 0x19, 0x0a, 0x17, 0x75, 0x6e, 0x69, 0x74, 0x74, 0x65, 0x73, 0x74, 0x2f, 0x55, 0x6e, 0x69,
	0x74, 0x74, 0x65, 0x73, 0x74, 0x23, 0x2a, 0x2e, 0x63, 0x73, 0x76, 0x5a, 0x37, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x61, 0x75, 0x69,
	0x6f, 0x2f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x61, 0x75, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x61, 0x75, 0x70, 0x62, 0x2f, 0x75, 0x6e, 0x69, 0x74, 0x74, 0x65,
	0x73, 0x74, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_tableau_protobuf_unittest_unittest_proto_rawDescOnce sync.Once
	file_tableau_protobuf_unittest_unittest_proto_rawDescData = file_tableau_protobuf_unittest_unittest_proto_rawDesc
)

func file_tableau_protobuf_unittest_unittest_proto_rawDescGZIP() []byte {
	file_tableau_protobuf_unittest_unittest_proto_rawDescOnce.Do(func() {
		file_tableau_protobuf_unittest_unittest_proto_rawDescData = protoimpl.X.CompressGZIP(file_tableau_protobuf_unittest_unittest_proto_rawDescData)
	})
	return file_tableau_protobuf_unittest_unittest_proto_rawDescData
}

var file_tableau_protobuf_unittest_unittest_proto_msgTypes = make([]protoimpl.MessageInfo, 64)
var file_tableau_protobuf_unittest_unittest_proto_goTypes = []interface{}{
	(*SimpleIncellMap)(nil),                 // 0: unittest.SimpleIncellMap
	(*IncellMap)(nil),                       // 1: unittest.IncellMap
	(*IncellStructList)(nil),                // 2: unittest.IncellStructList
	(*IncellList)(nil),                      // 3: unittest.IncellList
	(*ItemConf)(nil),                        // 4: unittest.ItemConf
	(*MallConf)(nil),                        // 5: unittest.MallConf
	(*RewardConf)(nil),                      // 6: unittest.RewardConf
	(*YamlScalarConf)(nil),                  // 7: unittest.YamlScalarConf
	(*PatchReplaceConf)(nil),                // 8: unittest.PatchReplaceConf
	(*PatchMergeConf)(nil),                  // 9: unittest.PatchMergeConf
	(*RecursivePatchConf)(nil),              // 10: unittest.RecursivePatchConf
	(*JsonUtilTestData)(nil),                // 11: unittest.JsonUtilTestData
	(*UniqueFieldInVerticalStructList)(nil), // 12: unittest.UniqueFieldInVerticalStructList
	(*VerticalUniqueFieldStructMap)(nil),    // 13: unittest.VerticalUniqueFieldStructMap
	(*DocumentUniqueFieldStructList)(nil),   // 14: unittest.DocumentUniqueFieldStructList
	(*DocumentUniqueFieldStructMap)(nil),    // 15: unittest.DocumentUniqueFieldStructMap
	nil,                                     // 16: unittest.SimpleIncellMap.ItemMapEntry
	nil,                                     // 17: unittest.IncellMap.FruitMapEntry
	(*IncellMap_Fruit)(nil),                 // 18: unittest.IncellMap.Fruit
	nil,                                     // 19: unittest.IncellMap.FlavorMapEntry
	nil,                                     // 20: unittest.IncellMap.ItemMapEntry
	(*IncellMap_Item)(nil),                  // 21: unittest.IncellMap.Item
	nil,                                     // 22: unittest.ItemConf.ItemMapEntry
	nil,                                     // 23: unittest.MallConf.ShopMapEntry
	(*MallConf_Shop)(nil),                   // 24: unittest.MallConf.Shop
	nil,                                     // 25: unittest.MallConf.Shop.GoodsMapEntry
	(*MallConf_Shop_Goods)(nil),             // 26: unittest.MallConf.Shop.Goods
	nil,                                     // 27: unittest.RewardConf.RewardMapEntry
	(*RewardConf_Reward)(nil),               // 28: unittest.RewardConf.Reward
	nil,                                     // 29: unittest.RewardConf.Reward.ItemMapEntry
	(*PatchMergeConf_Time)(nil),             // 30: unittest.PatchMergeConf.Time
	nil,                                     // 31: unittest.PatchMergeConf.ItemMapEntry
	nil,                                     // 32: unittest.PatchMergeConf.ReplaceItemMapEntry
	nil,                                     // 33: unittest.RecursivePatchConf.ShopMapEntry
	(*RecursivePatchConf_Shop)(nil),         // 34: unittest.RecursivePatchConf.Shop
	nil,                                     // 35: unittest.RecursivePatchConf.Shop.GoodsMapEntry
	(*RecursivePatchConf_Shop_Goods)(nil),   // 36: unittest.RecursivePatchConf.Shop.Goods
	nil,                                     // 37: unittest.RecursivePatchConf.Shop.Goods.CurrencyMapEntry
	(*RecursivePatchConf_Shop_Goods_Currency)(nil), // 38: unittest.RecursivePatchConf.Shop.Goods.Currency
	(*RecursivePatchConf_Shop_Goods_Award)(nil),    // 39: unittest.RecursivePatchConf.Shop.Goods.Award
	nil, // 40: unittest.RecursivePatchConf.Shop.Goods.Currency.ValueListEntry
	nil, // 41: unittest.RecursivePatchConf.Shop.Goods.Currency.MessageListEntry
	nil, // 42: unittest.JsonUtilTestData.MapFieldEntry
	(*UniqueFieldInVerticalStructList_Item)(nil), // 43: unittest.UniqueFieldInVerticalStructList.Item
	nil, // 44: unittest.VerticalUniqueFieldStructMap.MainMapEntry
	(*VerticalUniqueFieldStructMap_Main)(nil), // 45: unittest.VerticalUniqueFieldStructMap.Main
	nil, // 46: unittest.VerticalUniqueFieldStructMap.Main.MainKvMapEntry
	nil, // 47: unittest.VerticalUniqueFieldStructMap.Main.SubMapEntry
	(*VerticalUniqueFieldStructMap_Main_Sub)(nil), // 48: unittest.VerticalUniqueFieldStructMap.Main.Sub
	(*DocumentUniqueFieldStructList_Item)(nil),    // 49: unittest.DocumentUniqueFieldStructList.Item
	nil, // 50: unittest.DocumentUniqueFieldStructMap.ChapterEntry
	(*DocumentUniqueFieldStructMap_Chapter)(nil), // 51: unittest.DocumentUniqueFieldStructMap.Chapter
	nil, // 52: unittest.DocumentUniqueFieldStructMap.ScalarMapEntry
	nil, // 53: unittest.DocumentUniqueFieldStructMap.IncellMapEntry
	nil, // 54: unittest.DocumentUniqueFieldStructMap.ChapterInfoEntry
	(*DocumentUniqueFieldStructMap_ChapterInfo)(nil), // 55: unittest.DocumentUniqueFieldStructMap.ChapterInfo
	nil, // 56: unittest.DocumentUniqueFieldStructMap.Chapter.SectionEntry
	(*DocumentUniqueFieldStructMap_Chapter_Section)(nil), // 57: unittest.DocumentUniqueFieldStructMap.Chapter.Section
	nil, // 58: unittest.DocumentUniqueFieldStructMap.ChapterInfo.SectionEntry
	(*DocumentUniqueFieldStructMap_ChapterInfo_Section)(nil), // 59: unittest.DocumentUniqueFieldStructMap.ChapterInfo.Section
	nil, // 60: unittest.DocumentUniqueFieldStructMap.ChapterInfo.Section.SectionEntry
	(*DocumentUniqueFieldStructMap_ChapterInfo_Section_Section)(nil), // 61: unittest.DocumentUniqueFieldStructMap.ChapterInfo.Section.Section
	nil, // 62: unittest.DocumentUniqueFieldStructMap.ChapterInfo.Section.Section.SectionEntry
	(*DocumentUniqueFieldStructMap_ChapterInfo_Section_Section_Section)(nil), // 63: unittest.DocumentUniqueFieldStructMap.ChapterInfo.Section.Section.Section
	(*Item)(nil),                  // 64: unittest.Item
	(FruitFlavor)(0),              // 65: unittest.FruitFlavor
	(FruitType)(0),                // 66: unittest.FruitType
	(*timestamppb.Timestamp)(nil), // 67: google.protobuf.Timestamp
	(*durationpb.Duration)(nil),   // 68: google.protobuf.Duration
}
var file_tableau_protobuf_unittest_unittest_proto_depIdxs = []int32{
	16, // 0: unittest.SimpleIncellMap.item_map:type_name -> unittest.SimpleIncellMap.ItemMapEntry
	17, // 1: unittest.IncellMap.fruit_map:type_name -> unittest.IncellMap.FruitMapEntry
	19, // 2: unittest.IncellMap.flavor_map:type_name -> unittest.IncellMap.FlavorMapEntry
	20, // 3: unittest.IncellMap.item_map:type_name -> unittest.IncellMap.ItemMapEntry
	64, // 4: unittest.IncellStructList.item_list:type_name -> unittest.Item
	65, // 5: unittest.IncellList.flavor_list:type_name -> unittest.FruitFlavor
	64, // 6: unittest.IncellList.item_list:type_name -> unittest.Item
	22, // 7: unittest.ItemConf.item_map:type_name -> unittest.ItemConf.ItemMapEntry
	23, // 8: unittest.MallConf.shop_map:type_name -> unittest.MallConf.ShopMapEntry
	27, // 9: unittest.RewardConf.reward_map:type_name -> unittest.RewardConf.RewardMapEntry
	30, // 10: unittest.PatchMergeConf.time:type_name -> unittest.PatchMergeConf.Time
	31, // 11: unittest.PatchMergeConf.item_map:type_name -> unittest.PatchMergeConf.ItemMapEntry
	32, // 12: unittest.PatchMergeConf.replace_item_map:type_name -> unittest.PatchMergeConf.ReplaceItemMapEntry
	33, // 13: unittest.RecursivePatchConf.shop_map:type_name -> unittest.RecursivePatchConf.ShopMapEntry
	9,  // 14: unittest.JsonUtilTestData.normal_field:type_name -> unittest.PatchMergeConf
	9,  // 15: unittest.JsonUtilTestData.list_field:type_name -> unittest.PatchMergeConf
	42, // 16: unittest.JsonUtilTestData.map_field:type_name -> unittest.JsonUtilTestData.MapFieldEntry
	43, // 17: unittest.UniqueFieldInVerticalStructList.item_list:type_name -> unittest.UniqueFieldInVerticalStructList.Item
	44, // 18: unittest.VerticalUniqueFieldStructMap.main_map:type_name -> unittest.VerticalUniqueFieldStructMap.MainMapEntry
	49, // 19: unittest.DocumentUniqueFieldStructList.item_list:type_name -> unittest.DocumentUniqueFieldStructList.Item
	50, // 20: unittest.DocumentUniqueFieldStructMap.chapter:type_name -> unittest.DocumentUniqueFieldStructMap.ChapterEntry
	52, // 21: unittest.DocumentUniqueFieldStructMap.scalar_map:type_name -> unittest.DocumentUniqueFieldStructMap.ScalarMapEntry
	53, // 22: unittest.DocumentUniqueFieldStructMap.incell_map:type_name -> unittest.DocumentUniqueFieldStructMap.IncellMapEntry
	54, // 23: unittest.DocumentUniqueFieldStructMap.chapter_info:type_name -> unittest.DocumentUniqueFieldStructMap.ChapterInfoEntry
	18, // 24: unittest.IncellMap.FruitMapEntry.value:type_name -> unittest.IncellMap.Fruit
	66, // 25: unittest.IncellMap.Fruit.key:type_name -> unittest.FruitType
	65, // 26: unittest.IncellMap.FlavorMapEntry.value:type_name -> unittest.FruitFlavor
	21, // 27: unittest.IncellMap.ItemMapEntry.value:type_name -> unittest.IncellMap.Item
	66, // 28: unittest.IncellMap.Item.key:type_name -> unittest.FruitType
	65, // 29: unittest.IncellMap.Item.value:type_name -> unittest.FruitFlavor
	64, // 30: unittest.ItemConf.ItemMapEntry.value:type_name -> unittest.Item
	24, // 31: unittest.MallConf.ShopMapEntry.value:type_name -> unittest.MallConf.Shop
	25, // 32: unittest.MallConf.Shop.goods_map:type_name -> unittest.MallConf.Shop.GoodsMapEntry
	26, // 33: unittest.MallConf.Shop.GoodsMapEntry.value:type_name -> unittest.MallConf.Shop.Goods
	28, // 34: unittest.RewardConf.RewardMapEntry.value:type_name -> unittest.RewardConf.Reward
	29, // 35: unittest.RewardConf.Reward.item_map:type_name -> unittest.RewardConf.Reward.ItemMapEntry
	64, // 36: unittest.RewardConf.Reward.ItemMapEntry.value:type_name -> unittest.Item
	67, // 37: unittest.PatchMergeConf.Time.start:type_name -> google.protobuf.Timestamp
	68, // 38: unittest.PatchMergeConf.Time.expiry:type_name -> google.protobuf.Duration
	64, // 39: unittest.PatchMergeConf.ItemMapEntry.value:type_name -> unittest.Item
	64, // 40: unittest.PatchMergeConf.ReplaceItemMapEntry.value:type_name -> unittest.Item
	34, // 41: unittest.RecursivePatchConf.ShopMapEntry.value:type_name -> unittest.RecursivePatchConf.Shop
	35, // 42: unittest.RecursivePatchConf.Shop.goods_map:type_name -> unittest.RecursivePatchConf.Shop.GoodsMapEntry
	36, // 43: unittest.RecursivePatchConf.Shop.GoodsMapEntry.value:type_name -> unittest.RecursivePatchConf.Shop.Goods
	37, // 44: unittest.RecursivePatchConf.Shop.Goods.currency_map:type_name -> unittest.RecursivePatchConf.Shop.Goods.CurrencyMapEntry
	39, // 45: unittest.RecursivePatchConf.Shop.Goods.award_list:type_name -> unittest.RecursivePatchConf.Shop.Goods.Award
	38, // 46: unittest.RecursivePatchConf.Shop.Goods.CurrencyMapEntry.value:type_name -> unittest.RecursivePatchConf.Shop.Goods.Currency
	40, // 47: unittest.RecursivePatchConf.Shop.Goods.Currency.value_list:type_name -> unittest.RecursivePatchConf.Shop.Goods.Currency.ValueListEntry
	41, // 48: unittest.RecursivePatchConf.Shop.Goods.Currency.message_list:type_name -> unittest.RecursivePatchConf.Shop.Goods.Currency.MessageListEntry
	9,  // 49: unittest.JsonUtilTestData.MapFieldEntry.value:type_name -> unittest.PatchMergeConf
	45, // 50: unittest.VerticalUniqueFieldStructMap.MainMapEntry.value:type_name -> unittest.VerticalUniqueFieldStructMap.Main
	46, // 51: unittest.VerticalUniqueFieldStructMap.Main.main_kv_map:type_name -> unittest.VerticalUniqueFieldStructMap.Main.MainKvMapEntry
	47, // 52: unittest.VerticalUniqueFieldStructMap.Main.sub_map:type_name -> unittest.VerticalUniqueFieldStructMap.Main.SubMapEntry
	48, // 53: unittest.VerticalUniqueFieldStructMap.Main.SubMapEntry.value:type_name -> unittest.VerticalUniqueFieldStructMap.Main.Sub
	51, // 54: unittest.DocumentUniqueFieldStructMap.ChapterEntry.value:type_name -> unittest.DocumentUniqueFieldStructMap.Chapter
	56, // 55: unittest.DocumentUniqueFieldStructMap.Chapter.section:type_name -> unittest.DocumentUniqueFieldStructMap.Chapter.SectionEntry
	55, // 56: unittest.DocumentUniqueFieldStructMap.ChapterInfoEntry.value:type_name -> unittest.DocumentUniqueFieldStructMap.ChapterInfo
	58, // 57: unittest.DocumentUniqueFieldStructMap.ChapterInfo.section:type_name -> unittest.DocumentUniqueFieldStructMap.ChapterInfo.SectionEntry
	57, // 58: unittest.DocumentUniqueFieldStructMap.Chapter.SectionEntry.value:type_name -> unittest.DocumentUniqueFieldStructMap.Chapter.Section
	59, // 59: unittest.DocumentUniqueFieldStructMap.ChapterInfo.SectionEntry.value:type_name -> unittest.DocumentUniqueFieldStructMap.ChapterInfo.Section
	60, // 60: unittest.DocumentUniqueFieldStructMap.ChapterInfo.Section.section:type_name -> unittest.DocumentUniqueFieldStructMap.ChapterInfo.Section.SectionEntry
	61, // 61: unittest.DocumentUniqueFieldStructMap.ChapterInfo.Section.SectionEntry.value:type_name -> unittest.DocumentUniqueFieldStructMap.ChapterInfo.Section.Section
	62, // 62: unittest.DocumentUniqueFieldStructMap.ChapterInfo.Section.Section.section:type_name -> unittest.DocumentUniqueFieldStructMap.ChapterInfo.Section.Section.SectionEntry
	63, // 63: unittest.DocumentUniqueFieldStructMap.ChapterInfo.Section.Section.SectionEntry.value:type_name -> unittest.DocumentUniqueFieldStructMap.ChapterInfo.Section.Section.Section
	64, // [64:64] is the sub-list for method output_type
	64, // [64:64] is the sub-list for method input_type
	64, // [64:64] is the sub-list for extension type_name
	64, // [64:64] is the sub-list for extension extendee
	0,  // [0:64] is the sub-list for field type_name
}

func init() { file_tableau_protobuf_unittest_unittest_proto_init() }
func file_tableau_protobuf_unittest_unittest_proto_init() {
	if File_tableau_protobuf_unittest_unittest_proto != nil {
		return
	}
	file_tableau_protobuf_unittest_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_tableau_protobuf_unittest_unittest_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SimpleIncellMap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tableau_protobuf_unittest_unittest_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IncellMap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tableau_protobuf_unittest_unittest_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IncellStructList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tableau_protobuf_unittest_unittest_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IncellList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tableau_protobuf_unittest_unittest_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ItemConf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tableau_protobuf_unittest_unittest_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MallConf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tableau_protobuf_unittest_unittest_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RewardConf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tableau_protobuf_unittest_unittest_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*YamlScalarConf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tableau_protobuf_unittest_unittest_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatchReplaceConf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tableau_protobuf_unittest_unittest_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatchMergeConf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tableau_protobuf_unittest_unittest_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecursivePatchConf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tableau_protobuf_unittest_unittest_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JsonUtilTestData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tableau_protobuf_unittest_unittest_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UniqueFieldInVerticalStructList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tableau_protobuf_unittest_unittest_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerticalUniqueFieldStructMap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tableau_protobuf_unittest_unittest_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DocumentUniqueFieldStructList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tableau_protobuf_unittest_unittest_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DocumentUniqueFieldStructMap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tableau_protobuf_unittest_unittest_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IncellMap_Fruit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tableau_protobuf_unittest_unittest_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IncellMap_Item); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tableau_protobuf_unittest_unittest_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MallConf_Shop); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tableau_protobuf_unittest_unittest_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MallConf_Shop_Goods); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tableau_protobuf_unittest_unittest_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RewardConf_Reward); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tableau_protobuf_unittest_unittest_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatchMergeConf_Time); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tableau_protobuf_unittest_unittest_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecursivePatchConf_Shop); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tableau_protobuf_unittest_unittest_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecursivePatchConf_Shop_Goods); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tableau_protobuf_unittest_unittest_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecursivePatchConf_Shop_Goods_Currency); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tableau_protobuf_unittest_unittest_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecursivePatchConf_Shop_Goods_Award); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tableau_protobuf_unittest_unittest_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UniqueFieldInVerticalStructList_Item); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tableau_protobuf_unittest_unittest_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerticalUniqueFieldStructMap_Main); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tableau_protobuf_unittest_unittest_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerticalUniqueFieldStructMap_Main_Sub); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tableau_protobuf_unittest_unittest_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DocumentUniqueFieldStructList_Item); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tableau_protobuf_unittest_unittest_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DocumentUniqueFieldStructMap_Chapter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tableau_protobuf_unittest_unittest_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DocumentUniqueFieldStructMap_ChapterInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tableau_protobuf_unittest_unittest_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DocumentUniqueFieldStructMap_Chapter_Section); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tableau_protobuf_unittest_unittest_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DocumentUniqueFieldStructMap_ChapterInfo_Section); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tableau_protobuf_unittest_unittest_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DocumentUniqueFieldStructMap_ChapterInfo_Section_Section); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tableau_protobuf_unittest_unittest_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DocumentUniqueFieldStructMap_ChapterInfo_Section_Section_Section); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_tableau_protobuf_unittest_unittest_proto_msgTypes[9].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_tableau_protobuf_unittest_unittest_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   64,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_tableau_protobuf_unittest_unittest_proto_goTypes,
		DependencyIndexes: file_tableau_protobuf_unittest_unittest_proto_depIdxs,
		MessageInfos:      file_tableau_protobuf_unittest_unittest_proto_msgTypes,
	}.Build()
	File_tableau_protobuf_unittest_unittest_proto = out.File
	file_tableau_protobuf_unittest_unittest_proto_rawDesc = nil
	file_tableau_protobuf_unittest_unittest_proto_goTypes = nil
	file_tableau_protobuf_unittest_unittest_proto_depIdxs = nil
}
