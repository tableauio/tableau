// clang-format off

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.21.12
// source: tableau/protobuf/unittest/unittest.proto

package unittestpb

import (
	_ "github.com/tableauio/tableau/proto/tableaupb"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type IncellMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FruitMap  map[int32]*IncellMap_Fruit `protobuf:"bytes,1,rep,name=fruit_map,json=fruitMap,proto3" json:"fruit_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	FlavorMap map[int64]FruitFlavor      `protobuf:"bytes,2,rep,name=flavor_map,json=flavorMap,proto3" json:"flavor_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3,enum=unittest.FruitFlavor"`
	ItemMap   map[int32]*IncellMap_Item  `protobuf:"bytes,3,rep,name=item_map,json=itemMap,proto3" json:"item_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *IncellMap) Reset() {
	*x = IncellMap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tableau_protobuf_unittest_unittest_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IncellMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IncellMap) ProtoMessage() {}

func (x *IncellMap) ProtoReflect() protoreflect.Message {
	mi := &file_tableau_protobuf_unittest_unittest_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IncellMap.ProtoReflect.Descriptor instead.
func (*IncellMap) Descriptor() ([]byte, []int) {
	return file_tableau_protobuf_unittest_unittest_proto_rawDescGZIP(), []int{0}
}

func (x *IncellMap) GetFruitMap() map[int32]*IncellMap_Fruit {
	if x != nil {
		return x.FruitMap
	}
	return nil
}

func (x *IncellMap) GetFlavorMap() map[int64]FruitFlavor {
	if x != nil {
		return x.FlavorMap
	}
	return nil
}

func (x *IncellMap) GetItemMap() map[int32]*IncellMap_Item {
	if x != nil {
		return x.ItemMap
	}
	return nil
}

type IncellList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ValueList  []int32       `protobuf:"varint,1,rep,packed,name=value_list,json=valueList,proto3" json:"value_list,omitempty"`
	FlavorList []FruitFlavor `protobuf:"varint,2,rep,packed,name=flavor_list,json=flavorList,proto3,enum=unittest.FruitFlavor" json:"flavor_list,omitempty"`
	ItemList   []*Item       `protobuf:"bytes,3,rep,name=item_list,json=itemList,proto3" json:"item_list,omitempty"`
}

func (x *IncellList) Reset() {
	*x = IncellList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tableau_protobuf_unittest_unittest_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IncellList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IncellList) ProtoMessage() {}

func (x *IncellList) ProtoReflect() protoreflect.Message {
	mi := &file_tableau_protobuf_unittest_unittest_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IncellList.ProtoReflect.Descriptor instead.
func (*IncellList) Descriptor() ([]byte, []int) {
	return file_tableau_protobuf_unittest_unittest_proto_rawDescGZIP(), []int{1}
}

func (x *IncellList) GetValueList() []int32 {
	if x != nil {
		return x.ValueList
	}
	return nil
}

func (x *IncellList) GetFlavorList() []FruitFlavor {
	if x != nil {
		return x.FlavorList
	}
	return nil
}

func (x *IncellList) GetItemList() []*Item {
	if x != nil {
		return x.ItemList
	}
	return nil
}

type ItemConf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemMap map[uint32]*Item `protobuf:"bytes,1,rep,name=item_map,json=itemMap,proto3" json:"item_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ItemConf) Reset() {
	*x = ItemConf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tableau_protobuf_unittest_unittest_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ItemConf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ItemConf) ProtoMessage() {}

func (x *ItemConf) ProtoReflect() protoreflect.Message {
	mi := &file_tableau_protobuf_unittest_unittest_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ItemConf.ProtoReflect.Descriptor instead.
func (*ItemConf) Descriptor() ([]byte, []int) {
	return file_tableau_protobuf_unittest_unittest_proto_rawDescGZIP(), []int{2}
}

func (x *ItemConf) GetItemMap() map[uint32]*Item {
	if x != nil {
		return x.ItemMap
	}
	return nil
}

type MallConf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShopMap map[uint32]*MallConf_Shop `protobuf:"bytes,1,rep,name=shop_map,json=shopMap,proto3" json:"shop_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *MallConf) Reset() {
	*x = MallConf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tableau_protobuf_unittest_unittest_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MallConf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MallConf) ProtoMessage() {}

func (x *MallConf) ProtoReflect() protoreflect.Message {
	mi := &file_tableau_protobuf_unittest_unittest_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MallConf.ProtoReflect.Descriptor instead.
func (*MallConf) Descriptor() ([]byte, []int) {
	return file_tableau_protobuf_unittest_unittest_proto_rawDescGZIP(), []int{3}
}

func (x *MallConf) GetShopMap() map[uint32]*MallConf_Shop {
	if x != nil {
		return x.ShopMap
	}
	return nil
}

type RewardConf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RewardMap map[uint32]*RewardConf_Reward `protobuf:"bytes,1,rep,name=reward_map,json=rewardMap,proto3" json:"reward_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *RewardConf) Reset() {
	*x = RewardConf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tableau_protobuf_unittest_unittest_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RewardConf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RewardConf) ProtoMessage() {}

func (x *RewardConf) ProtoReflect() protoreflect.Message {
	mi := &file_tableau_protobuf_unittest_unittest_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RewardConf.ProtoReflect.Descriptor instead.
func (*RewardConf) Descriptor() ([]byte, []int) {
	return file_tableau_protobuf_unittest_unittest_proto_rawDescGZIP(), []int{4}
}

func (x *RewardConf) GetRewardMap() map[uint32]*RewardConf_Reward {
	if x != nil {
		return x.RewardMap
	}
	return nil
}

type YamlScalarConf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         uint32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Num        int32   `protobuf:"varint,2,opt,name=num,proto3" json:"num,omitempty"`
	Value      uint64  `protobuf:"varint,3,opt,name=value,proto3" json:"value,omitempty"`
	Weight     int64   `protobuf:"varint,4,opt,name=weight,proto3" json:"weight,omitempty"`
	Percentage float32 `protobuf:"fixed32,5,opt,name=percentage,proto3" json:"percentage,omitempty"`
	Ratio      float64 `protobuf:"fixed64,6,opt,name=ratio,proto3" json:"ratio,omitempty"`
	Name       string  `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty"`
	Blob       []byte  `protobuf:"bytes,8,opt,name=blob,proto3" json:"blob,omitempty"`
	Ok         bool    `protobuf:"varint,9,opt,name=ok,proto3" json:"ok,omitempty"`
}

func (x *YamlScalarConf) Reset() {
	*x = YamlScalarConf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tableau_protobuf_unittest_unittest_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *YamlScalarConf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YamlScalarConf) ProtoMessage() {}

func (x *YamlScalarConf) ProtoReflect() protoreflect.Message {
	mi := &file_tableau_protobuf_unittest_unittest_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use YamlScalarConf.ProtoReflect.Descriptor instead.
func (*YamlScalarConf) Descriptor() ([]byte, []int) {
	return file_tableau_protobuf_unittest_unittest_proto_rawDescGZIP(), []int{5}
}

func (x *YamlScalarConf) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *YamlScalarConf) GetNum() int32 {
	if x != nil {
		return x.Num
	}
	return 0
}

func (x *YamlScalarConf) GetValue() uint64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *YamlScalarConf) GetWeight() int64 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *YamlScalarConf) GetPercentage() float32 {
	if x != nil {
		return x.Percentage
	}
	return 0
}

func (x *YamlScalarConf) GetRatio() float64 {
	if x != nil {
		return x.Ratio
	}
	return 0
}

func (x *YamlScalarConf) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *YamlScalarConf) GetBlob() []byte {
	if x != nil {
		return x.Blob
	}
	return nil
}

func (x *YamlScalarConf) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

type PatchReplaceConf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	PriceList []int32 `protobuf:"varint,2,rep,packed,name=price_list,json=priceList,proto3" json:"price_list,omitempty"`
}

func (x *PatchReplaceConf) Reset() {
	*x = PatchReplaceConf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tableau_protobuf_unittest_unittest_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatchReplaceConf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatchReplaceConf) ProtoMessage() {}

func (x *PatchReplaceConf) ProtoReflect() protoreflect.Message {
	mi := &file_tableau_protobuf_unittest_unittest_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatchReplaceConf.ProtoReflect.Descriptor instead.
func (*PatchReplaceConf) Descriptor() ([]byte, []int) {
	return file_tableau_protobuf_unittest_unittest_proto_rawDescGZIP(), []int{6}
}

func (x *PatchReplaceConf) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PatchReplaceConf) GetPriceList() []int32 {
	if x != nil {
		return x.PriceList
	}
	return nil
}

type PatchMergeConf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name             string               `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Time             *PatchMergeConf_Time `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
	PriceList        []int32              `protobuf:"varint,3,rep,packed,name=price_list,json=priceList,proto3" json:"price_list,omitempty"`
	ReplacePriceList []int32              `protobuf:"varint,4,rep,packed,name=replace_price_list,json=replacePriceList,proto3" json:"replace_price_list,omitempty"`
	ItemMap          map[uint32]*Item     `protobuf:"bytes,5,rep,name=item_map,json=itemMap,proto3" json:"item_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ReplaceItemMap   map[uint32]*Item     `protobuf:"bytes,6,rep,name=replace_item_map,json=replaceItemMap,proto3" json:"replace_item_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *PatchMergeConf) Reset() {
	*x = PatchMergeConf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tableau_protobuf_unittest_unittest_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatchMergeConf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatchMergeConf) ProtoMessage() {}

func (x *PatchMergeConf) ProtoReflect() protoreflect.Message {
	mi := &file_tableau_protobuf_unittest_unittest_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatchMergeConf.ProtoReflect.Descriptor instead.
func (*PatchMergeConf) Descriptor() ([]byte, []int) {
	return file_tableau_protobuf_unittest_unittest_proto_rawDescGZIP(), []int{7}
}

func (x *PatchMergeConf) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PatchMergeConf) GetTime() *PatchMergeConf_Time {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *PatchMergeConf) GetPriceList() []int32 {
	if x != nil {
		return x.PriceList
	}
	return nil
}

func (x *PatchMergeConf) GetReplacePriceList() []int32 {
	if x != nil {
		return x.ReplacePriceList
	}
	return nil
}

func (x *PatchMergeConf) GetItemMap() map[uint32]*Item {
	if x != nil {
		return x.ItemMap
	}
	return nil
}

func (x *PatchMergeConf) GetReplaceItemMap() map[uint32]*Item {
	if x != nil {
		return x.ReplaceItemMap
	}
	return nil
}

type IncellMap_Fruit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   FruitType `protobuf:"varint,1,opt,name=key,proto3,enum=unittest.FruitType" json:"key,omitempty"`
	Value int64     `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *IncellMap_Fruit) Reset() {
	*x = IncellMap_Fruit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tableau_protobuf_unittest_unittest_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IncellMap_Fruit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IncellMap_Fruit) ProtoMessage() {}

func (x *IncellMap_Fruit) ProtoReflect() protoreflect.Message {
	mi := &file_tableau_protobuf_unittest_unittest_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IncellMap_Fruit.ProtoReflect.Descriptor instead.
func (*IncellMap_Fruit) Descriptor() ([]byte, []int) {
	return file_tableau_protobuf_unittest_unittest_proto_rawDescGZIP(), []int{0, 1}
}

func (x *IncellMap_Fruit) GetKey() FruitType {
	if x != nil {
		return x.Key
	}
	return FruitType_FRUIT_TYPE_UNKNOWN
}

func (x *IncellMap_Fruit) GetValue() int64 {
	if x != nil {
		return x.Value
	}
	return 0
}

type IncellMap_Item struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   FruitType   `protobuf:"varint,1,opt,name=key,proto3,enum=unittest.FruitType" json:"key,omitempty"`
	Value FruitFlavor `protobuf:"varint,2,opt,name=value,proto3,enum=unittest.FruitFlavor" json:"value,omitempty"`
}

func (x *IncellMap_Item) Reset() {
	*x = IncellMap_Item{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tableau_protobuf_unittest_unittest_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IncellMap_Item) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IncellMap_Item) ProtoMessage() {}

func (x *IncellMap_Item) ProtoReflect() protoreflect.Message {
	mi := &file_tableau_protobuf_unittest_unittest_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IncellMap_Item.ProtoReflect.Descriptor instead.
func (*IncellMap_Item) Descriptor() ([]byte, []int) {
	return file_tableau_protobuf_unittest_unittest_proto_rawDescGZIP(), []int{0, 4}
}

func (x *IncellMap_Item) GetKey() FruitType {
	if x != nil {
		return x.Key
	}
	return FruitType_FRUIT_TYPE_UNKNOWN
}

func (x *IncellMap_Item) GetValue() FruitFlavor {
	if x != nil {
		return x.Value
	}
	return FruitFlavor_FRUIT_FLAVOR_UNKNOWN
}

type MallConf_Shop struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShopId   uint32                          `protobuf:"varint,1,opt,name=shop_id,json=shopId,proto3" json:"shop_id,omitempty"`
	GoodsMap map[uint32]*MallConf_Shop_Goods `protobuf:"bytes,2,rep,name=goods_map,json=goodsMap,proto3" json:"goods_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *MallConf_Shop) Reset() {
	*x = MallConf_Shop{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tableau_protobuf_unittest_unittest_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MallConf_Shop) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MallConf_Shop) ProtoMessage() {}

func (x *MallConf_Shop) ProtoReflect() protoreflect.Message {
	mi := &file_tableau_protobuf_unittest_unittest_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MallConf_Shop.ProtoReflect.Descriptor instead.
func (*MallConf_Shop) Descriptor() ([]byte, []int) {
	return file_tableau_protobuf_unittest_unittest_proto_rawDescGZIP(), []int{3, 1}
}

func (x *MallConf_Shop) GetShopId() uint32 {
	if x != nil {
		return x.ShopId
	}
	return 0
}

func (x *MallConf_Shop) GetGoodsMap() map[uint32]*MallConf_Shop_Goods {
	if x != nil {
		return x.GoodsMap
	}
	return nil
}

type MallConf_Shop_Goods struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GoodsId uint32 `protobuf:"varint,1,opt,name=goods_id,json=goodsId,proto3" json:"goods_id,omitempty"`
	Price   int32  `protobuf:"varint,2,opt,name=price,proto3" json:"price,omitempty"`
}

func (x *MallConf_Shop_Goods) Reset() {
	*x = MallConf_Shop_Goods{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tableau_protobuf_unittest_unittest_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MallConf_Shop_Goods) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MallConf_Shop_Goods) ProtoMessage() {}

func (x *MallConf_Shop_Goods) ProtoReflect() protoreflect.Message {
	mi := &file_tableau_protobuf_unittest_unittest_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MallConf_Shop_Goods.ProtoReflect.Descriptor instead.
func (*MallConf_Shop_Goods) Descriptor() ([]byte, []int) {
	return file_tableau_protobuf_unittest_unittest_proto_rawDescGZIP(), []int{3, 1, 1}
}

func (x *MallConf_Shop_Goods) GetGoodsId() uint32 {
	if x != nil {
		return x.GoodsId
	}
	return 0
}

func (x *MallConf_Shop_Goods) GetPrice() int32 {
	if x != nil {
		return x.Price
	}
	return 0
}

type RewardConf_Reward struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RewardId uint32           `protobuf:"varint,1,opt,name=reward_id,json=rewardId,proto3" json:"reward_id,omitempty"`
	ItemMap  map[uint32]*Item `protobuf:"bytes,2,rep,name=item_map,json=itemMap,proto3" json:"item_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *RewardConf_Reward) Reset() {
	*x = RewardConf_Reward{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tableau_protobuf_unittest_unittest_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RewardConf_Reward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RewardConf_Reward) ProtoMessage() {}

func (x *RewardConf_Reward) ProtoReflect() protoreflect.Message {
	mi := &file_tableau_protobuf_unittest_unittest_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RewardConf_Reward.ProtoReflect.Descriptor instead.
func (*RewardConf_Reward) Descriptor() ([]byte, []int) {
	return file_tableau_protobuf_unittest_unittest_proto_rawDescGZIP(), []int{4, 1}
}

func (x *RewardConf_Reward) GetRewardId() uint32 {
	if x != nil {
		return x.RewardId
	}
	return 0
}

func (x *RewardConf_Reward) GetItemMap() map[uint32]*Item {
	if x != nil {
		return x.ItemMap
	}
	return nil
}

type PatchMergeConf_Time struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Start  *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=start,proto3" json:"start,omitempty"`
	Expiry *durationpb.Duration   `protobuf:"bytes,2,opt,name=expiry,proto3" json:"expiry,omitempty"`
}

func (x *PatchMergeConf_Time) Reset() {
	*x = PatchMergeConf_Time{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tableau_protobuf_unittest_unittest_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatchMergeConf_Time) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatchMergeConf_Time) ProtoMessage() {}

func (x *PatchMergeConf_Time) ProtoReflect() protoreflect.Message {
	mi := &file_tableau_protobuf_unittest_unittest_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatchMergeConf_Time.ProtoReflect.Descriptor instead.
func (*PatchMergeConf_Time) Descriptor() ([]byte, []int) {
	return file_tableau_protobuf_unittest_unittest_proto_rawDescGZIP(), []int{7, 0}
}

func (x *PatchMergeConf_Time) GetStart() *timestamppb.Timestamp {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *PatchMergeConf_Time) GetExpiry() *durationpb.Duration {
	if x != nil {
		return x.Expiry
	}
	return nil
}

var File_tableau_protobuf_unittest_unittest_proto protoreflect.FileDescriptor

var file_tableau_protobuf_unittest_unittest_proto_rawDesc = []byte{
	0x0a, 0x28, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x61, 0x75, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x75, 0x6e, 0x69, 0x74, 0x74, 0x65, 0x73, 0x74, 0x2f, 0x75, 0x6e, 0x69, 0x74,
	0x74, 0x65, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x75, 0x6e, 0x69, 0x74,
	0x74, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x61, 0x75, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x61, 0x75, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x26, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x61, 0x75, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x75, 0x6e, 0x69, 0x74, 0x74, 0x65, 0x73, 0x74,
	0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf0, 0x05,
	0x0a, 0x09, 0x49, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x4d, 0x61, 0x70, 0x12, 0x52, 0x0a, 0x09, 0x66,
	0x72, 0x75, 0x69, 0x74, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x75, 0x6e, 0x69, 0x74, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x49, 0x6e, 0x63, 0x65, 0x6c, 0x6c,
	0x4d, 0x61, 0x70, 0x2e, 0x46, 0x72, 0x75, 0x69, 0x74, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x42, 0x12, 0x82, 0xb5, 0x18, 0x0e, 0x0a, 0x05, 0x46, 0x72, 0x75, 0x69, 0x74, 0x1a, 0x03,
	0x4b, 0x65, 0x79, 0x20, 0x03, 0x52, 0x08, 0x66, 0x72, 0x75, 0x69, 0x74, 0x4d, 0x61, 0x70, 0x12,
	0x51, 0x0a, 0x0a, 0x66, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x75, 0x6e, 0x69, 0x74, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x49,
	0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x4d, 0x61, 0x70, 0x2e, 0x46, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x4d,
	0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x0e, 0x82, 0xb5, 0x18, 0x0a, 0x0a, 0x06, 0x46,
	0x6c, 0x61, 0x76, 0x6f, 0x72, 0x20, 0x03, 0x52, 0x09, 0x66, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x4d,
	0x61, 0x70, 0x12, 0x4e, 0x0a, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x75, 0x6e, 0x69, 0x74, 0x74, 0x65, 0x73, 0x74, 0x2e,
	0x49, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x4d, 0x61, 0x70, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x4d, 0x61,
	0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x11, 0x82, 0xb5, 0x18, 0x0d, 0x0a, 0x04, 0x49, 0x74,
	0x65, 0x6d, 0x1a, 0x03, 0x4b, 0x65, 0x79, 0x20, 0x03, 0x52, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x4d,
	0x61, 0x70, 0x1a, 0x56, 0x0a, 0x0d, 0x46, 0x72, 0x75, 0x69, 0x74, 0x4d, 0x61, 0x70, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x75, 0x6e, 0x69, 0x74, 0x74, 0x65, 0x73, 0x74, 0x2e,
	0x49, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x4d, 0x61, 0x70, 0x2e, 0x46, 0x72, 0x75, 0x69, 0x74, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x5c, 0x0a, 0x05, 0x46, 0x72,
	0x75, 0x69, 0x74, 0x12, 0x30, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x13, 0x2e, 0x75, 0x6e, 0x69, 0x74, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x46, 0x72, 0x75, 0x69,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x42, 0x09, 0x82, 0xb5, 0x18, 0x05, 0x0a, 0x03, 0x4b, 0x65, 0x79,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x21, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x42, 0x0b, 0x82, 0xb5, 0x18, 0x07, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x53, 0x0a, 0x0e, 0x46, 0x6c, 0x61, 0x76,
	0x6f, 0x72, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2b, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x75, 0x6e,
	0x69, 0x74, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x46, 0x72, 0x75, 0x69, 0x74, 0x46, 0x6c, 0x61, 0x76,
	0x6f, 0x72, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x54, 0x0a,
	0x0c, 0x49, 0x74, 0x65, 0x6d, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x2e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x75, 0x6e, 0x69, 0x74, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x49, 0x6e, 0x63, 0x65, 0x6c, 0x6c,
	0x4d, 0x61, 0x70, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x72, 0x0a, 0x04, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x30, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x75, 0x6e, 0x69, 0x74, 0x74,
	0x65, 0x73, 0x74, 0x2e, 0x46, 0x72, 0x75, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x42, 0x09, 0x82,
	0xb5, 0x18, 0x05, 0x0a, 0x03, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x38, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x75,
	0x6e, 0x69, 0x74, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x46, 0x72, 0x75, 0x69, 0x74, 0x46, 0x6c, 0x61,
	0x76, 0x6f, 0x72, 0x42, 0x0b, 0x82, 0xb5, 0x18, 0x07, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x17, 0x82, 0xb5, 0x18, 0x13, 0x0a, 0x09, 0x49,
	0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x4d, 0x61, 0x70, 0x10, 0x01, 0x18, 0x02, 0x20, 0x03, 0x28, 0x04,
	0x22, 0xd7, 0x01, 0x0a, 0x0a, 0x49, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x2c, 0x0a, 0x0a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x05, 0x42, 0x0d, 0x82, 0xb5, 0x18, 0x09, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x20, 0x03, 0x52, 0x09, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x46, 0x0a,
	0x0b, 0x66, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0e, 0x32, 0x15, 0x2e, 0x75, 0x6e, 0x69, 0x74, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x46, 0x72,
	0x75, 0x69, 0x74, 0x46, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x42, 0x0e, 0x82, 0xb5, 0x18, 0x0a, 0x0a,
	0x06, 0x46, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x20, 0x03, 0x52, 0x0a, 0x66, 0x6c, 0x61, 0x76, 0x6f,
	0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x09, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x75, 0x6e, 0x69, 0x74, 0x74,
	0x65, 0x73, 0x74, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x0c, 0x82, 0xb5, 0x18, 0x08, 0x0a, 0x04,
	0x49, 0x74, 0x65, 0x6d, 0x20, 0x03, 0x52, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x4c, 0x69, 0x73, 0x74,
	0x3a, 0x18, 0x82, 0xb5, 0x18, 0x14, 0x0a, 0x0a, 0x49, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x4c, 0x69,
	0x73, 0x74, 0x10, 0x01, 0x18, 0x02, 0x20, 0x03, 0x28, 0x04, 0x22, 0xba, 0x01, 0x0a, 0x08, 0x49,
	0x74, 0x65, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x12, 0x4a, 0x0a, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x5f,
	0x6d, 0x61, 0x70, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x75, 0x6e, 0x69, 0x74,
	0x74, 0x65, 0x73, 0x74, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x2e, 0x49, 0x74,
	0x65, 0x6d, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x0e, 0x82, 0xb5, 0x18, 0x0a,
	0x1a, 0x02, 0x49, 0x44, 0x20, 0x01, 0x7a, 0x02, 0x20, 0x01, 0x52, 0x07, 0x69, 0x74, 0x65, 0x6d,
	0x4d, 0x61, 0x70, 0x1a, 0x4a, 0x0a, 0x0c, 0x49, 0x74, 0x65, 0x6d, 0x4d, 0x61, 0x70, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x24, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x75, 0x6e, 0x69, 0x74, 0x74, 0x65, 0x73, 0x74, 0x2e,
	0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x3a,
	0x16, 0x82, 0xb5, 0x18, 0x12, 0x0a, 0x08, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x10,
	0x01, 0x18, 0x02, 0x20, 0x03, 0x28, 0x04, 0x22, 0xfa, 0x03, 0x0a, 0x08, 0x4d, 0x61, 0x6c, 0x6c,
	0x43, 0x6f, 0x6e, 0x66, 0x12, 0x4a, 0x0a, 0x08, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x6d, 0x61, 0x70,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x75, 0x6e, 0x69, 0x74, 0x74, 0x65, 0x73,
	0x74, 0x2e, 0x4d, 0x61, 0x6c, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x2e, 0x53, 0x68, 0x6f, 0x70, 0x4d,
	0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x0e, 0x82, 0xb5, 0x18, 0x0a, 0x1a, 0x06, 0x53,
	0x68, 0x6f, 0x70, 0x49, 0x44, 0x20, 0x01, 0x52, 0x07, 0x73, 0x68, 0x6f, 0x70, 0x4d, 0x61, 0x70,
	0x1a, 0x53, 0x0a, 0x0c, 0x53, 0x68, 0x6f, 0x70, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x2d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x75, 0x6e, 0x69, 0x74, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x61, 0x6c,
	0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x2e, 0x53, 0x68, 0x6f, 0x70, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0xb4, 0x02, 0x0a, 0x04, 0x53, 0x68, 0x6f, 0x70, 0x12, 0x25,
	0x0a, 0x07, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x0c, 0x82, 0xb5, 0x18, 0x08, 0x0a, 0x06, 0x53, 0x68, 0x6f, 0x70, 0x49, 0x44, 0x52, 0x06, 0x73,
	0x68, 0x6f, 0x70, 0x49, 0x64, 0x12, 0x53, 0x0a, 0x09, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6d,
	0x61, 0x70, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x75, 0x6e, 0x69, 0x74, 0x74,
	0x65, 0x73, 0x74, 0x2e, 0x4d, 0x61, 0x6c, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x2e, 0x53, 0x68, 0x6f,
	0x70, 0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42,
	0x0f, 0x82, 0xb5, 0x18, 0x0b, 0x1a, 0x07, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x49, 0x44, 0x20, 0x01,
	0x52, 0x08, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x4d, 0x61, 0x70, 0x1a, 0x5a, 0x0a, 0x0d, 0x47, 0x6f,
	0x6f, 0x64, 0x73, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x33, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x75,
	0x6e, 0x69, 0x74, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x61, 0x6c, 0x6c, 0x43, 0x6f, 0x6e, 0x66,
	0x2e, 0x53, 0x68, 0x6f, 0x70, 0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x54, 0x0a, 0x05, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x12,
	0x28, 0x0a, 0x08, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x0d, 0x82, 0xb5, 0x18, 0x09, 0x0a, 0x07, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x49, 0x44,
	0x52, 0x07, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x05, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0b, 0x82, 0xb5, 0x18, 0x07, 0x0a, 0x05,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x3a, 0x16, 0x82, 0xb5,
	0x18, 0x12, 0x0a, 0x08, 0x4d, 0x61, 0x6c, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x10, 0x01, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x04, 0x22, 0xb2, 0x03, 0x0a, 0x0a, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x43,
	0x6f, 0x6e, 0x66, 0x12, 0x54, 0x0a, 0x0a, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x6d, 0x61,
	0x70, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x75, 0x6e, 0x69, 0x74, 0x74, 0x65,
	0x73, 0x74, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x2e, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x10, 0x82, 0xb5,
	0x18, 0x0c, 0x1a, 0x08, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x49, 0x44, 0x20, 0x01, 0x52, 0x09,
	0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x4d, 0x61, 0x70, 0x1a, 0x59, 0x0a, 0x0e, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x31, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x75,
	0x6e, 0x69, 0x74, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x43, 0x6f,
	0x6e, 0x66, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0xd8, 0x01, 0x0a, 0x06, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12,
	0x2b, 0x0a, 0x09, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x0e, 0x82, 0xb5, 0x18, 0x0a, 0x0a, 0x08, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x49, 0x44, 0x52, 0x08, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x55, 0x0a, 0x08,
	0x69, 0x74, 0x65, 0x6d, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x75, 0x6e, 0x69, 0x74, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x43, 0x6f, 0x6e, 0x66, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x49, 0x74, 0x65, 0x6d,
	0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x10, 0x82, 0xb5, 0x18, 0x0c, 0x0a, 0x04,
	0x49, 0x74, 0x65, 0x6d, 0x1a, 0x02, 0x49, 0x44, 0x20, 0x02, 0x52, 0x07, 0x69, 0x74, 0x65, 0x6d,
	0x4d, 0x61, 0x70, 0x1a, 0x4a, 0x0a, 0x0c, 0x49, 0x74, 0x65, 0x6d, 0x4d, 0x61, 0x70, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x24, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x75, 0x6e, 0x69, 0x74, 0x74, 0x65, 0x73, 0x74, 0x2e,
	0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x3a,
	0x18, 0x82, 0xb5, 0x18, 0x14, 0x0a, 0x0a, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e,
	0x66, 0x10, 0x01, 0x18, 0x02, 0x20, 0x03, 0x28, 0x04, 0x22, 0xd5, 0x02, 0x0a, 0x0e, 0x59, 0x61,
	0x6d, 0x6c, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x12, 0x18, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x08, 0x82, 0xb5, 0x18, 0x04, 0x0a, 0x02,
	0x49, 0x44, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x42, 0x09, 0x82, 0xb5, 0x18, 0x05, 0x0a, 0x03, 0x4e, 0x75, 0x6d, 0x52, 0x03,
	0x6e, 0x75, 0x6d, 0x12, 0x21, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x42, 0x0b, 0x82, 0xb5, 0x18, 0x07, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x24, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x42, 0x0c, 0x82, 0xb5, 0x18, 0x08, 0x0a, 0x06, 0x57, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x30, 0x0a, 0x0a,
	0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02,
	0x42, 0x10, 0x82, 0xb5, 0x18, 0x0c, 0x0a, 0x0a, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61,
	0x67, 0x65, 0x52, 0x0a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x21,
	0x0a, 0x05, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x42, 0x0b, 0x82,
	0xb5, 0x18, 0x07, 0x0a, 0x05, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x52, 0x05, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x12, 0x1e, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0a, 0x82, 0xb5, 0x18, 0x06, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x1e, 0x0a, 0x04, 0x62, 0x6c, 0x6f, 0x62, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x42,
	0x0a, 0x82, 0xb5, 0x18, 0x06, 0x0a, 0x04, 0x42, 0x6c, 0x6f, 0x62, 0x52, 0x04, 0x62, 0x6c, 0x6f,
	0x62, 0x12, 0x18, 0x0a, 0x02, 0x6f, 0x6b, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x42, 0x08, 0x82,
	0xb5, 0x18, 0x04, 0x0a, 0x02, 0x4f, 0x4b, 0x52, 0x02, 0x6f, 0x6b, 0x3a, 0x14, 0x82, 0xb5, 0x18,
	0x10, 0x0a, 0x0e, 0x59, 0x61, 0x6d, 0x6c, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x43, 0x6f, 0x6e,
	0x66, 0x22, 0x83, 0x01, 0x0a, 0x10, 0x50, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x12, 0x1e, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x82, 0xb5, 0x18, 0x06, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x0a, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x42, 0x0d, 0x82, 0xb5, 0x18, 0x09,
	0x0a, 0x05, 0x50, 0x72, 0x69, 0x63, 0x65, 0x20, 0x03, 0x52, 0x09, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x3a, 0x21, 0x82, 0xb5, 0x18, 0x1d, 0x0a, 0x10, 0x50, 0x61, 0x74, 0x63,
	0x68, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x10, 0x01, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x04, 0xa0, 0x01, 0x01, 0x22, 0xf7, 0x05, 0x0a, 0x0e, 0x50, 0x61, 0x74, 0x63,
	0x68, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x12, 0x1e, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x82, 0xb5, 0x18, 0x06, 0x0a, 0x04,
	0x4e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x75, 0x6e, 0x69, 0x74, 0x74,
	0x65, 0x73, 0x74, 0x2e, 0x50, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x0a, 0x82, 0xb5, 0x18, 0x06, 0x0a, 0x04, 0x54,
	0x69, 0x6d, 0x65, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x0a, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x42, 0x0d, 0x82,
	0xb5, 0x18, 0x09, 0x0a, 0x05, 0x50, 0x72, 0x69, 0x63, 0x65, 0x20, 0x03, 0x52, 0x09, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x46, 0x0a, 0x12, 0x72, 0x65, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x05, 0x42, 0x18, 0x82, 0xb5, 0x18, 0x14, 0x0a, 0x0c, 0x52, 0x65, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x20, 0x03, 0x7a, 0x02, 0x60, 0x01, 0x52, 0x10, 0x72,
	0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x52, 0x0a, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x75, 0x6e, 0x69, 0x74, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x61, 0x74,
	0x63, 0x68, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x2e, 0x49, 0x74, 0x65, 0x6d,
	0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x10, 0x82, 0xb5, 0x18, 0x0c, 0x0a, 0x04,
	0x49, 0x74, 0x65, 0x6d, 0x1a, 0x02, 0x49, 0x44, 0x20, 0x02, 0x52, 0x07, 0x69, 0x74, 0x65, 0x6d,
	0x4d, 0x61, 0x70, 0x12, 0x73, 0x0a, 0x10, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f, 0x69,
	0x74, 0x65, 0x6d, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e,
	0x75, 0x6e, 0x69, 0x74, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x65,
	0x72, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x49,
	0x74, 0x65, 0x6d, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x1b, 0x82, 0xb5, 0x18,
	0x17, 0x0a, 0x0b, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x1a, 0x02,
	0x49, 0x44, 0x20, 0x02, 0x7a, 0x02, 0x60, 0x01, 0x52, 0x0e, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63,
	0x65, 0x49, 0x74, 0x65, 0x6d, 0x4d, 0x61, 0x70, 0x1a, 0x86, 0x01, 0x0a, 0x04, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x3d, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0b, 0x82, 0xb5,
	0x18, 0x07, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x12, 0x3f, 0x0a, 0x06, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0c, 0x82, 0xb5, 0x18,
	0x08, 0x0a, 0x06, 0x45, 0x78, 0x70, 0x69, 0x72, 0x79, 0x52, 0x06, 0x65, 0x78, 0x70, 0x69, 0x72,
	0x79, 0x1a, 0x4a, 0x0a, 0x0c, 0x49, 0x74, 0x65, 0x6d, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x24, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x75, 0x6e, 0x69, 0x74, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x49, 0x74,
	0x65, 0x6d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x51, 0x0a,
	0x13, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x4d, 0x61, 0x70, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x24, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x75, 0x6e, 0x69, 0x74, 0x74, 0x65, 0x73, 0x74,
	0x2e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x3a, 0x1f, 0x82, 0xb5, 0x18, 0x1b, 0x0a, 0x0e, 0x50, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x65, 0x72,
	0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x10, 0x01, 0x18, 0x02, 0x20, 0x03, 0x28, 0x04, 0xa0, 0x01,
	0x02, 0x42, 0x56, 0x82, 0xb5, 0x18, 0x19, 0x0a, 0x17, 0x75, 0x6e, 0x69, 0x74, 0x74, 0x65, 0x73,
	0x74, 0x2f, 0x55, 0x6e, 0x69, 0x74, 0x74, 0x65, 0x73, 0x74, 0x23, 0x2a, 0x2e, 0x63, 0x73, 0x76,
	0x5a, 0x37, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x61, 0x75, 0x69, 0x6f, 0x2f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x61, 0x75, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x61, 0x75, 0x70, 0x62, 0x2f, 0x75,
	0x6e, 0x69, 0x74, 0x74, 0x65, 0x73, 0x74, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_tableau_protobuf_unittest_unittest_proto_rawDescOnce sync.Once
	file_tableau_protobuf_unittest_unittest_proto_rawDescData = file_tableau_protobuf_unittest_unittest_proto_rawDesc
)

func file_tableau_protobuf_unittest_unittest_proto_rawDescGZIP() []byte {
	file_tableau_protobuf_unittest_unittest_proto_rawDescOnce.Do(func() {
		file_tableau_protobuf_unittest_unittest_proto_rawDescData = protoimpl.X.CompressGZIP(file_tableau_protobuf_unittest_unittest_proto_rawDescData)
	})
	return file_tableau_protobuf_unittest_unittest_proto_rawDescData
}

var file_tableau_protobuf_unittest_unittest_proto_msgTypes = make([]protoimpl.MessageInfo, 24)
var file_tableau_protobuf_unittest_unittest_proto_goTypes = []interface{}{
	(*IncellMap)(nil),             // 0: unittest.IncellMap
	(*IncellList)(nil),            // 1: unittest.IncellList
	(*ItemConf)(nil),              // 2: unittest.ItemConf
	(*MallConf)(nil),              // 3: unittest.MallConf
	(*RewardConf)(nil),            // 4: unittest.RewardConf
	(*YamlScalarConf)(nil),        // 5: unittest.YamlScalarConf
	(*PatchReplaceConf)(nil),      // 6: unittest.PatchReplaceConf
	(*PatchMergeConf)(nil),        // 7: unittest.PatchMergeConf
	nil,                           // 8: unittest.IncellMap.FruitMapEntry
	(*IncellMap_Fruit)(nil),       // 9: unittest.IncellMap.Fruit
	nil,                           // 10: unittest.IncellMap.FlavorMapEntry
	nil,                           // 11: unittest.IncellMap.ItemMapEntry
	(*IncellMap_Item)(nil),        // 12: unittest.IncellMap.Item
	nil,                           // 13: unittest.ItemConf.ItemMapEntry
	nil,                           // 14: unittest.MallConf.ShopMapEntry
	(*MallConf_Shop)(nil),         // 15: unittest.MallConf.Shop
	nil,                           // 16: unittest.MallConf.Shop.GoodsMapEntry
	(*MallConf_Shop_Goods)(nil),   // 17: unittest.MallConf.Shop.Goods
	nil,                           // 18: unittest.RewardConf.RewardMapEntry
	(*RewardConf_Reward)(nil),     // 19: unittest.RewardConf.Reward
	nil,                           // 20: unittest.RewardConf.Reward.ItemMapEntry
	(*PatchMergeConf_Time)(nil),   // 21: unittest.PatchMergeConf.Time
	nil,                           // 22: unittest.PatchMergeConf.ItemMapEntry
	nil,                           // 23: unittest.PatchMergeConf.ReplaceItemMapEntry
	(FruitFlavor)(0),              // 24: unittest.FruitFlavor
	(*Item)(nil),                  // 25: unittest.Item
	(FruitType)(0),                // 26: unittest.FruitType
	(*timestamppb.Timestamp)(nil), // 27: google.protobuf.Timestamp
	(*durationpb.Duration)(nil),   // 28: google.protobuf.Duration
}
var file_tableau_protobuf_unittest_unittest_proto_depIdxs = []int32{
	8,  // 0: unittest.IncellMap.fruit_map:type_name -> unittest.IncellMap.FruitMapEntry
	10, // 1: unittest.IncellMap.flavor_map:type_name -> unittest.IncellMap.FlavorMapEntry
	11, // 2: unittest.IncellMap.item_map:type_name -> unittest.IncellMap.ItemMapEntry
	24, // 3: unittest.IncellList.flavor_list:type_name -> unittest.FruitFlavor
	25, // 4: unittest.IncellList.item_list:type_name -> unittest.Item
	13, // 5: unittest.ItemConf.item_map:type_name -> unittest.ItemConf.ItemMapEntry
	14, // 6: unittest.MallConf.shop_map:type_name -> unittest.MallConf.ShopMapEntry
	18, // 7: unittest.RewardConf.reward_map:type_name -> unittest.RewardConf.RewardMapEntry
	21, // 8: unittest.PatchMergeConf.time:type_name -> unittest.PatchMergeConf.Time
	22, // 9: unittest.PatchMergeConf.item_map:type_name -> unittest.PatchMergeConf.ItemMapEntry
	23, // 10: unittest.PatchMergeConf.replace_item_map:type_name -> unittest.PatchMergeConf.ReplaceItemMapEntry
	9,  // 11: unittest.IncellMap.FruitMapEntry.value:type_name -> unittest.IncellMap.Fruit
	26, // 12: unittest.IncellMap.Fruit.key:type_name -> unittest.FruitType
	24, // 13: unittest.IncellMap.FlavorMapEntry.value:type_name -> unittest.FruitFlavor
	12, // 14: unittest.IncellMap.ItemMapEntry.value:type_name -> unittest.IncellMap.Item
	26, // 15: unittest.IncellMap.Item.key:type_name -> unittest.FruitType
	24, // 16: unittest.IncellMap.Item.value:type_name -> unittest.FruitFlavor
	25, // 17: unittest.ItemConf.ItemMapEntry.value:type_name -> unittest.Item
	15, // 18: unittest.MallConf.ShopMapEntry.value:type_name -> unittest.MallConf.Shop
	16, // 19: unittest.MallConf.Shop.goods_map:type_name -> unittest.MallConf.Shop.GoodsMapEntry
	17, // 20: unittest.MallConf.Shop.GoodsMapEntry.value:type_name -> unittest.MallConf.Shop.Goods
	19, // 21: unittest.RewardConf.RewardMapEntry.value:type_name -> unittest.RewardConf.Reward
	20, // 22: unittest.RewardConf.Reward.item_map:type_name -> unittest.RewardConf.Reward.ItemMapEntry
	25, // 23: unittest.RewardConf.Reward.ItemMapEntry.value:type_name -> unittest.Item
	27, // 24: unittest.PatchMergeConf.Time.start:type_name -> google.protobuf.Timestamp
	28, // 25: unittest.PatchMergeConf.Time.expiry:type_name -> google.protobuf.Duration
	25, // 26: unittest.PatchMergeConf.ItemMapEntry.value:type_name -> unittest.Item
	25, // 27: unittest.PatchMergeConf.ReplaceItemMapEntry.value:type_name -> unittest.Item
	28, // [28:28] is the sub-list for method output_type
	28, // [28:28] is the sub-list for method input_type
	28, // [28:28] is the sub-list for extension type_name
	28, // [28:28] is the sub-list for extension extendee
	0,  // [0:28] is the sub-list for field type_name
}

func init() { file_tableau_protobuf_unittest_unittest_proto_init() }
func file_tableau_protobuf_unittest_unittest_proto_init() {
	if File_tableau_protobuf_unittest_unittest_proto != nil {
		return
	}
	file_tableau_protobuf_unittest_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_tableau_protobuf_unittest_unittest_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IncellMap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tableau_protobuf_unittest_unittest_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IncellList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tableau_protobuf_unittest_unittest_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ItemConf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tableau_protobuf_unittest_unittest_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MallConf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tableau_protobuf_unittest_unittest_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RewardConf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tableau_protobuf_unittest_unittest_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*YamlScalarConf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tableau_protobuf_unittest_unittest_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatchReplaceConf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tableau_protobuf_unittest_unittest_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatchMergeConf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tableau_protobuf_unittest_unittest_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IncellMap_Fruit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tableau_protobuf_unittest_unittest_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IncellMap_Item); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tableau_protobuf_unittest_unittest_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MallConf_Shop); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tableau_protobuf_unittest_unittest_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MallConf_Shop_Goods); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tableau_protobuf_unittest_unittest_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RewardConf_Reward); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tableau_protobuf_unittest_unittest_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatchMergeConf_Time); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_tableau_protobuf_unittest_unittest_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   24,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_tableau_protobuf_unittest_unittest_proto_goTypes,
		DependencyIndexes: file_tableau_protobuf_unittest_unittest_proto_depIdxs,
		MessageInfos:      file_tableau_protobuf_unittest_unittest_proto_msgTypes,
	}.Build()
	File_tableau_protobuf_unittest_unittest_proto = out.File
	file_tableau_protobuf_unittest_unittest_proto_rawDesc = nil
	file_tableau_protobuf_unittest_unittest_proto_goTypes = nil
	file_tableau_protobuf_unittest_unittest_proto_depIdxs = nil
}
